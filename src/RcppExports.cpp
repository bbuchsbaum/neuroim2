// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// indexToGridCpp
NumericMatrix indexToGridCpp(IntegerVector idx, IntegerVector array_dim);
RcppExport SEXP _neuroim2_indexToGridCpp(SEXP idxSEXP, SEXP array_dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type idx(idxSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type array_dim(array_dimSEXP);
    rcpp_result_gen = Rcpp::wrap(indexToGridCpp(idx, array_dim));
    return rcpp_result_gen;
END_RCPP
}
// box_nbhd
NumericVector box_nbhd(NumericVector arr, IntegerVector dims, int x, int y, int z, int window, NumericVector out, int slicedim);
RcppExport SEXP _neuroim2_box_nbhd(SEXP arrSEXP, SEXP dimsSEXP, SEXP xSEXP, SEXP ySEXP, SEXP zSEXP, SEXP windowSEXP, SEXP outSEXP, SEXP slicedimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type arr(arrSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dims(dimsSEXP);
    Rcpp::traits::input_parameter< int >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type z(zSEXP);
    Rcpp::traits::input_parameter< int >::type window(windowSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type out(outSEXP);
    Rcpp::traits::input_parameter< int >::type slicedim(slicedimSEXP);
    rcpp_result_gen = Rcpp::wrap(box_nbhd(arr, dims, x, y, z, window, out, slicedim));
    return rcpp_result_gen;
END_RCPP
}
// box_blur
NumericVector box_blur(NumericVector arr, IntegerVector mask_idx, int window);
RcppExport SEXP _neuroim2_box_blur(SEXP arrSEXP, SEXP mask_idxSEXP, SEXP windowSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type arr(arrSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type mask_idx(mask_idxSEXP);
    Rcpp::traits::input_parameter< int >::type window(windowSEXP);
    rcpp_result_gen = Rcpp::wrap(box_blur(arr, mask_idx, window));
    return rcpp_result_gen;
END_RCPP
}
// find_seqnum
NumericVector find_seqnum(NumericVector clens, NumericVector idx);
RcppExport SEXP _neuroim2_find_seqnum(SEXP clensSEXP, SEXP idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type clens(clensSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type idx(idxSEXP);
    rcpp_result_gen = Rcpp::wrap(find_seqnum(clens, idx));
    return rcpp_result_gen;
END_RCPP
}
// grid_to_intvec
long long grid_to_intvec(IntegerVector D, IntegerVector vox);
RcppExport SEXP _neuroim2_grid_to_intvec(SEXP DSEXP, SEXP voxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type D(DSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type vox(voxSEXP);
    rcpp_result_gen = Rcpp::wrap(grid_to_intvec(D, vox));
    return rcpp_result_gen;
END_RCPP
}
// exgridToIndex3DCpp
NumericVector exgridToIndex3DCpp(IntegerVector array_dim, IntegerVector iind, IntegerVector jind, IntegerVector kind);
RcppExport SEXP _neuroim2_exgridToIndex3DCpp(SEXP array_dimSEXP, SEXP iindSEXP, SEXP jindSEXP, SEXP kindSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type array_dim(array_dimSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type iind(iindSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type jind(jindSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type kind(kindSEXP);
    rcpp_result_gen = Rcpp::wrap(exgridToIndex3DCpp(array_dim, iind, jind, kind));
    return rcpp_result_gen;
END_RCPP
}
// exgridToIndex4DCpp
NumericVector exgridToIndex4DCpp(IntegerVector array_dim, IntegerVector iind, IntegerVector jind, IntegerVector kind, IntegerVector mind);
RcppExport SEXP _neuroim2_exgridToIndex4DCpp(SEXP array_dimSEXP, SEXP iindSEXP, SEXP jindSEXP, SEXP kindSEXP, SEXP mindSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type array_dim(array_dimSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type iind(iindSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type jind(jindSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type kind(kindSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type mind(mindSEXP);
    rcpp_result_gen = Rcpp::wrap(exgridToIndex4DCpp(array_dim, iind, jind, kind, mind));
    return rcpp_result_gen;
END_RCPP
}
// gridToIndexCpp
IntegerVector gridToIndexCpp(IntegerVector array_dim, IntegerMatrix voxmat);
RcppExport SEXP _neuroim2_gridToIndexCpp(SEXP array_dimSEXP, SEXP voxmatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type array_dim(array_dimSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type voxmat(voxmatSEXP);
    rcpp_result_gen = Rcpp::wrap(gridToIndexCpp(array_dim, voxmat));
    return rcpp_result_gen;
END_RCPP
}
// gridToIndex3DCpp
IntegerVector gridToIndex3DCpp(IntegerVector array_dim, NumericMatrix voxmat);
RcppExport SEXP _neuroim2_gridToIndex3DCpp(SEXP array_dimSEXP, SEXP voxmatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type array_dim(array_dimSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type voxmat(voxmatSEXP);
    rcpp_result_gen = Rcpp::wrap(gridToIndex3DCpp(array_dim, voxmat));
    return rcpp_result_gen;
END_RCPP
}

// kernel_filt_3d_cpp
NumericMatrix kernel_filt_3d_cpp(NumericMatrix data, NumericMatrix kernel);
RcppExport SEXP _neuroim2_kernel_filt_3d_cpp(SEXP dataSEXP, SEXP kernelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type data(dataSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type kernel(kernelSEXP);
    rcpp_result_gen = Rcpp::wrap(kernel_filt_3d_cpp(data, kernel));
    return rcpp_result_gen;
END_RCPP
}


static const R_CallMethodDef CallEntries[] = {
    {"_neuroim2_indexToGridCpp", (DL_FUNC) &_neuroim2_indexToGridCpp, 2},
    {"_neuroim2_box_nbhd", (DL_FUNC) &_neuroim2_box_nbhd, 8},
    {"_neuroim2_box_blur", (DL_FUNC) &_neuroim2_box_blur, 3},
    {"_neuroim2_find_seqnum", (DL_FUNC) &_neuroim2_find_seqnum, 2},
    {"_neuroim2_grid_to_intvec", (DL_FUNC) &_neuroim2_grid_to_intvec, 2},
    {"_neuroim2_exgridToIndex3DCpp", (DL_FUNC) &_neuroim2_exgridToIndex3DCpp, 4},
    {"_neuroim2_exgridToIndex4DCpp", (DL_FUNC) &_neuroim2_exgridToIndex4DCpp, 5},
    {"_neuroim2_gridToIndexCpp", (DL_FUNC) &_neuroim2_gridToIndexCpp, 2},
    {"_neuroim2_gridToIndex3DCpp", (DL_FUNC) &_neuroim2_gridToIndex3DCpp, 2},
    {"_neuroim2_kernel_filt_3d_cpp", (DL_FUNC) &_neuroim2_kernel_filt_3d_cpp, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_neuroim2(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
