// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// bilateral_weights
NumericMatrix bilateral_weights(int window, double spatial_sigma, double intensity_sigma, NumericVector spacing, double intensity_sd);
RcppExport SEXP _neuroim2_bilateral_weights(SEXP windowSEXP, SEXP spatial_sigmaSEXP, SEXP intensity_sigmaSEXP, SEXP spacingSEXP, SEXP intensity_sdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type window(windowSEXP);
    Rcpp::traits::input_parameter< double >::type spatial_sigma(spatial_sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type intensity_sigma(intensity_sigmaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type spacing(spacingSEXP);
    Rcpp::traits::input_parameter< double >::type intensity_sd(intensity_sdSEXP);
    rcpp_result_gen = Rcpp::wrap(bilateral_weights(window, spatial_sigma, intensity_sigma, spacing, intensity_sd));
    return rcpp_result_gen;
END_RCPP
}
// bilateral_filter_cpp
NumericVector bilateral_filter_cpp(NumericVector arr, IntegerVector mask_idx, int window, double spatial_sigma, double intensity_sigma, NumericVector spacing);
RcppExport SEXP _neuroim2_bilateral_filter_cpp(SEXP arrSEXP, SEXP mask_idxSEXP, SEXP windowSEXP, SEXP spatial_sigmaSEXP, SEXP intensity_sigmaSEXP, SEXP spacingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type arr(arrSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type mask_idx(mask_idxSEXP);
    Rcpp::traits::input_parameter< int >::type window(windowSEXP);
    Rcpp::traits::input_parameter< double >::type spatial_sigma(spatial_sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type intensity_sigma(intensity_sigmaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type spacing(spacingSEXP);
    rcpp_result_gen = Rcpp::wrap(bilateral_filter_cpp(arr, mask_idx, window, spatial_sigma, intensity_sigma, spacing));
    return rcpp_result_gen;
END_RCPP
}
// bilateral_filter_4d_cpp_par
NumericVector bilateral_filter_4d_cpp_par(NumericVector arr, IntegerVector mask_idx, int spatial_window, int temporal_window, double spatial_sigma, double intensity_sigma, double temporal_sigma, NumericVector spacing);
RcppExport SEXP _neuroim2_bilateral_filter_4d_cpp_par(SEXP arrSEXP, SEXP mask_idxSEXP, SEXP spatial_windowSEXP, SEXP temporal_windowSEXP, SEXP spatial_sigmaSEXP, SEXP intensity_sigmaSEXP, SEXP temporal_sigmaSEXP, SEXP spacingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type arr(arrSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type mask_idx(mask_idxSEXP);
    Rcpp::traits::input_parameter< int >::type spatial_window(spatial_windowSEXP);
    Rcpp::traits::input_parameter< int >::type temporal_window(temporal_windowSEXP);
    Rcpp::traits::input_parameter< double >::type spatial_sigma(spatial_sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type intensity_sigma(intensity_sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type temporal_sigma(temporal_sigmaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type spacing(spacingSEXP);
    rcpp_result_gen = Rcpp::wrap(bilateral_filter_4d_cpp_par(arr, mask_idx, spatial_window, temporal_window, spatial_sigma, intensity_sigma, temporal_sigma, spacing));
    return rcpp_result_gen;
END_RCPP
}
// fast_multilayer_laplacian_enhancement_masked
NumericVector fast_multilayer_laplacian_enhancement_masked(NumericVector img, LogicalVector mask, int k, int patch_size, int search_radius, double h, List mapping_params, bool use_normalization_free);
RcppExport SEXP _neuroim2_fast_multilayer_laplacian_enhancement_masked(SEXP imgSEXP, SEXP maskSEXP, SEXP kSEXP, SEXP patch_sizeSEXP, SEXP search_radiusSEXP, SEXP hSEXP, SEXP mapping_paramsSEXP, SEXP use_normalization_freeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type img(imgSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type mask(maskSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type patch_size(patch_sizeSEXP);
    Rcpp::traits::input_parameter< int >::type search_radius(search_radiusSEXP);
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< List >::type mapping_params(mapping_paramsSEXP);
    Rcpp::traits::input_parameter< bool >::type use_normalization_free(use_normalization_freeSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_multilayer_laplacian_enhancement_masked(img, mask, k, patch_size, search_radius, h, mapping_params, use_normalization_free));
    return rcpp_result_gen;
END_RCPP
}
// indexToGridCpp
NumericMatrix indexToGridCpp(IntegerVector idx, IntegerVector array_dim);
RcppExport SEXP _neuroim2_indexToGridCpp(SEXP idxSEXP, SEXP array_dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type idx(idxSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type array_dim(array_dimSEXP);
    rcpp_result_gen = Rcpp::wrap(indexToGridCpp(idx, array_dim));
    return rcpp_result_gen;
END_RCPP
}
// gridToIndex3DCpp
IntegerVector gridToIndex3DCpp(IntegerVector array_dim, NumericMatrix voxmat);
RcppExport SEXP _neuroim2_gridToIndex3DCpp(SEXP array_dimSEXP, SEXP voxmatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type array_dim(array_dimSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type voxmat(voxmatSEXP);
    rcpp_result_gen = Rcpp::wrap(gridToIndex3DCpp(array_dim, voxmat));
    return rcpp_result_gen;
END_RCPP
}
// gridToIndexCpp
NumericVector gridToIndexCpp(IntegerVector array_dim, IntegerMatrix voxmat);
RcppExport SEXP _neuroim2_gridToIndexCpp(SEXP array_dimSEXP, SEXP voxmatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type array_dim(array_dimSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type voxmat(voxmatSEXP);
    rcpp_result_gen = Rcpp::wrap(gridToIndexCpp(array_dim, voxmat));
    return rcpp_result_gen;
END_RCPP
}
// exgridToIndex4DCpp
NumericVector exgridToIndex4DCpp(IntegerVector array_dim, IntegerVector iind, IntegerVector jind, IntegerVector kind, IntegerVector mind);
RcppExport SEXP _neuroim2_exgridToIndex4DCpp(SEXP array_dimSEXP, SEXP iindSEXP, SEXP jindSEXP, SEXP kindSEXP, SEXP mindSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type array_dim(array_dimSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type iind(iindSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type jind(jindSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type kind(kindSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type mind(mindSEXP);
    rcpp_result_gen = Rcpp::wrap(exgridToIndex4DCpp(array_dim, iind, jind, kind, mind));
    return rcpp_result_gen;
END_RCPP
}
// box_nbhd
NumericVector box_nbhd(NumericVector arr, IntegerVector dims, int x, int y, int z, int window, NumericVector out, int slicedim);
RcppExport SEXP _neuroim2_box_nbhd(SEXP arrSEXP, SEXP dimsSEXP, SEXP xSEXP, SEXP ySEXP, SEXP zSEXP, SEXP windowSEXP, SEXP outSEXP, SEXP slicedimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type arr(arrSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dims(dimsSEXP);
    Rcpp::traits::input_parameter< int >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type z(zSEXP);
    Rcpp::traits::input_parameter< int >::type window(windowSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type out(outSEXP);
    Rcpp::traits::input_parameter< int >::type slicedim(slicedimSEXP);
    rcpp_result_gen = Rcpp::wrap(box_nbhd(arr, dims, x, y, z, window, out, slicedim));
    return rcpp_result_gen;
END_RCPP
}
// gaussian_weights
NumericVector gaussian_weights(int window, double sigma, NumericVector spacing);
RcppExport SEXP _neuroim2_gaussian_weights(SEXP windowSEXP, SEXP sigmaSEXP, SEXP spacingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type window(windowSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type spacing(spacingSEXP);
    rcpp_result_gen = Rcpp::wrap(gaussian_weights(window, sigma, spacing));
    return rcpp_result_gen;
END_RCPP
}
// gaussian_blur_cpp
NumericVector gaussian_blur_cpp(NumericVector arr, IntegerVector mask_idx, int window, double sigma, NumericVector spacing);
RcppExport SEXP _neuroim2_gaussian_blur_cpp(SEXP arrSEXP, SEXP mask_idxSEXP, SEXP windowSEXP, SEXP sigmaSEXP, SEXP spacingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type arr(arrSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type mask_idx(mask_idxSEXP);
    Rcpp::traits::input_parameter< int >::type window(windowSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type spacing(spacingSEXP);
    rcpp_result_gen = Rcpp::wrap(gaussian_blur_cpp(arr, mask_idx, window, sigma, spacing));
    return rcpp_result_gen;
END_RCPP
}
// box_blur
NumericVector box_blur(NumericVector arr, IntegerVector mask_idx, int window);
RcppExport SEXP _neuroim2_box_blur(SEXP arrSEXP, SEXP mask_idxSEXP, SEXP windowSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type arr(arrSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type mask_idx(mask_idxSEXP);
    Rcpp::traits::input_parameter< int >::type window(windowSEXP);
    rcpp_result_gen = Rcpp::wrap(box_blur(arr, mask_idx, window));
    return rcpp_result_gen;
END_RCPP
}
// local_sphere
NumericMatrix local_sphere(int vx, int vy, int vz, double radius, NumericVector spacing, IntegerVector dim);
RcppExport SEXP _neuroim2_local_sphere(SEXP vxSEXP, SEXP vySEXP, SEXP vzSEXP, SEXP radiusSEXP, SEXP spacingSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type vx(vxSEXP);
    Rcpp::traits::input_parameter< int >::type vy(vySEXP);
    Rcpp::traits::input_parameter< int >::type vz(vzSEXP);
    Rcpp::traits::input_parameter< double >::type radius(radiusSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type spacing(spacingSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(local_sphere(vx, vy, vz, radius, spacing, dim));
    return rcpp_result_gen;
END_RCPP
}
// local_spheres
List local_spheres(NumericMatrix centers, double radius, NumericVector spacing, IntegerVector dim);
RcppExport SEXP _neuroim2_local_spheres(SEXP centersSEXP, SEXP radiusSEXP, SEXP spacingSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type centers(centersSEXP);
    Rcpp::traits::input_parameter< double >::type radius(radiusSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type spacing(spacingSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(local_spheres(centers, radius, spacing, dim));
    return rcpp_result_gen;
END_RCPP
}
// kernel_filt_3d_cpp
NumericMatrix kernel_filt_3d_cpp(NumericMatrix data, NumericMatrix kernel);
RcppExport SEXP _neuroim2_kernel_filt_3d_cpp(SEXP dataSEXP, SEXP kernelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type data(dataSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type kernel(kernelSEXP);
    rcpp_result_gen = Rcpp::wrap(kernel_filt_3d_cpp(data, kernel));
    return rcpp_result_gen;
END_RCPP
}
// radius_search_3d_nonisotropic
Rcpp::List radius_search_3d_nonisotropic(Rcpp::IntegerMatrix cds_vox, Rcpp::NumericMatrix cds_mm, Rcpp::NumericMatrix queries_mm, double radius_mm, double sx, double sy, double sz, double ox_mm, double oy_mm, double oz_mm);
RcppExport SEXP _neuroim2_radius_search_3d_nonisotropic(SEXP cds_voxSEXP, SEXP cds_mmSEXP, SEXP queries_mmSEXP, SEXP radius_mmSEXP, SEXP sxSEXP, SEXP sySEXP, SEXP szSEXP, SEXP ox_mmSEXP, SEXP oy_mmSEXP, SEXP oz_mmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type cds_vox(cds_voxSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type cds_mm(cds_mmSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type queries_mm(queries_mmSEXP);
    Rcpp::traits::input_parameter< double >::type radius_mm(radius_mmSEXP);
    Rcpp::traits::input_parameter< double >::type sx(sxSEXP);
    Rcpp::traits::input_parameter< double >::type sy(sySEXP);
    Rcpp::traits::input_parameter< double >::type sz(szSEXP);
    Rcpp::traits::input_parameter< double >::type ox_mm(ox_mmSEXP);
    Rcpp::traits::input_parameter< double >::type oy_mm(oy_mmSEXP);
    Rcpp::traits::input_parameter< double >::type oz_mm(oz_mmSEXP);
    rcpp_result_gen = Rcpp::wrap(radius_search_3d_nonisotropic(cds_vox, cds_mm, queries_mm, radius_mm, sx, sy, sz, ox_mm, oy_mm, oz_mm));
    return rcpp_result_gen;
END_RCPP
}
// radius_search_3d_direct
Rcpp::List radius_search_3d_direct(Rcpp::IntegerMatrix cds_vox, Rcpp::NumericMatrix cds_mm, Rcpp::NumericMatrix queries_mm, double radius_mm, double sx, double sy, double sz, double ox_mm, double oy_mm, double oz_mm);
RcppExport SEXP _neuroim2_radius_search_3d_direct(SEXP cds_voxSEXP, SEXP cds_mmSEXP, SEXP queries_mmSEXP, SEXP radius_mmSEXP, SEXP sxSEXP, SEXP sySEXP, SEXP szSEXP, SEXP ox_mmSEXP, SEXP oy_mmSEXP, SEXP oz_mmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type cds_vox(cds_voxSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type cds_mm(cds_mmSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type queries_mm(queries_mmSEXP);
    Rcpp::traits::input_parameter< double >::type radius_mm(radius_mmSEXP);
    Rcpp::traits::input_parameter< double >::type sx(sxSEXP);
    Rcpp::traits::input_parameter< double >::type sy(sySEXP);
    Rcpp::traits::input_parameter< double >::type sz(szSEXP);
    Rcpp::traits::input_parameter< double >::type ox_mm(ox_mmSEXP);
    Rcpp::traits::input_parameter< double >::type oy_mm(oy_mmSEXP);
    Rcpp::traits::input_parameter< double >::type oz_mm(oz_mmSEXP);
    rcpp_result_gen = Rcpp::wrap(radius_search_3d_direct(cds_vox, cds_mm, queries_mm, radius_mm, sx, sy, sz, ox_mm, oy_mm, oz_mm));
    return rcpp_result_gen;
END_RCPP
}
// radius_search_3d_precomputed
Rcpp::List radius_search_3d_precomputed(Rcpp::IntegerMatrix cds_vox, Rcpp::NumericMatrix cds_mm, Rcpp::NumericMatrix queries_mm, double radius_mm, double sx, double sy, double sz, double ox_mm, double oy_mm, double oz_mm);
RcppExport SEXP _neuroim2_radius_search_3d_precomputed(SEXP cds_voxSEXP, SEXP cds_mmSEXP, SEXP queries_mmSEXP, SEXP radius_mmSEXP, SEXP sxSEXP, SEXP sySEXP, SEXP szSEXP, SEXP ox_mmSEXP, SEXP oy_mmSEXP, SEXP oz_mmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type cds_vox(cds_voxSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type cds_mm(cds_mmSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type queries_mm(queries_mmSEXP);
    Rcpp::traits::input_parameter< double >::type radius_mm(radius_mmSEXP);
    Rcpp::traits::input_parameter< double >::type sx(sxSEXP);
    Rcpp::traits::input_parameter< double >::type sy(sySEXP);
    Rcpp::traits::input_parameter< double >::type sz(szSEXP);
    Rcpp::traits::input_parameter< double >::type ox_mm(ox_mmSEXP);
    Rcpp::traits::input_parameter< double >::type oy_mm(oy_mmSEXP);
    Rcpp::traits::input_parameter< double >::type oz_mm(oz_mmSEXP);
    rcpp_result_gen = Rcpp::wrap(radius_search_3d_precomputed(cds_vox, cds_mm, queries_mm, radius_mm, sx, sy, sz, ox_mm, oy_mm, oz_mm));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_neuroim2_bilateral_weights", (DL_FUNC) &_neuroim2_bilateral_weights, 5},
    {"_neuroim2_bilateral_filter_cpp", (DL_FUNC) &_neuroim2_bilateral_filter_cpp, 6},
    {"_neuroim2_bilateral_filter_4d_cpp_par", (DL_FUNC) &_neuroim2_bilateral_filter_4d_cpp_par, 8},
    {"_neuroim2_fast_multilayer_laplacian_enhancement_masked", (DL_FUNC) &_neuroim2_fast_multilayer_laplacian_enhancement_masked, 8},
    {"_neuroim2_indexToGridCpp", (DL_FUNC) &_neuroim2_indexToGridCpp, 2},
    {"_neuroim2_gridToIndex3DCpp", (DL_FUNC) &_neuroim2_gridToIndex3DCpp, 2},
    {"_neuroim2_gridToIndexCpp", (DL_FUNC) &_neuroim2_gridToIndexCpp, 2},
    {"_neuroim2_exgridToIndex4DCpp", (DL_FUNC) &_neuroim2_exgridToIndex4DCpp, 5},
    {"_neuroim2_box_nbhd", (DL_FUNC) &_neuroim2_box_nbhd, 8},
    {"_neuroim2_gaussian_weights", (DL_FUNC) &_neuroim2_gaussian_weights, 3},
    {"_neuroim2_gaussian_blur_cpp", (DL_FUNC) &_neuroim2_gaussian_blur_cpp, 5},
    {"_neuroim2_box_blur", (DL_FUNC) &_neuroim2_box_blur, 3},
    {"_neuroim2_local_sphere", (DL_FUNC) &_neuroim2_local_sphere, 6},
    {"_neuroim2_local_spheres", (DL_FUNC) &_neuroim2_local_spheres, 4},
    {"_neuroim2_kernel_filt_3d_cpp", (DL_FUNC) &_neuroim2_kernel_filt_3d_cpp, 2},
    {"_neuroim2_radius_search_3d_nonisotropic", (DL_FUNC) &_neuroim2_radius_search_3d_nonisotropic, 10},
    {"_neuroim2_radius_search_3d_direct", (DL_FUNC) &_neuroim2_radius_search_3d_direct, 10},
    {"_neuroim2_radius_search_3d_precomputed", (DL_FUNC) &_neuroim2_radius_search_3d_precomputed, 10},
    {NULL, NULL, 0}
};

RcppExport void R_init_neuroim2(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
