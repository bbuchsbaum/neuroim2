% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/all_generic.R, R/clustervol.R, R/neurovec.R
\name{split_clusters}
\alias{split_clusters}
\alias{split_clusters,NeuroVec,ClusteredNeuroVol-method}
\alias{split_clusters,NeuroVec,integer-method}
\alias{split_clusters,NeuroVol,ClusteredNeuroVol-method}
\alias{split_clusters,NeuroVol,integer-method}
\alias{split_clusters,NeuroVol,numeric-method}
\alias{split_clusters,ClusteredNeuroVol,missing-method}
\alias{split_clusters,NeuroVec,numeric-method}
\title{Cut an object into a list of spatial or spatiotemporal clusters}
\usage{
split_clusters(x, clusters, ...)

\S4method{split_clusters}{NeuroVec,ClusteredNeuroVol}(x, clusters, ...)

\S4method{split_clusters}{NeuroVec,integer}(x, clusters, ...)

\S4method{split_clusters}{NeuroVol,ClusteredNeuroVol}(x, clusters)

\S4method{split_clusters}{NeuroVol,integer}(x, clusters)

\S4method{split_clusters}{NeuroVol,numeric}(x, clusters)

\S4method{split_clusters}{ClusteredNeuroVol,missing}(x, clusters)

\S4method{split_clusters}{NeuroVec,integer}(x, clusters, ...)

\S4method{split_clusters}{NeuroVec,numeric}(x, clusters, ...)

\S4method{split_clusters}{NeuroVec,ClusteredNeuroVol}(x, clusters, ...)
}
\arguments{
\item{x}{A NeuroVec object to be split.}

\item{clusters}{Either a ClusteredNeuroVol object or an integer vector of cluster assignments.}

\item{...}{Additional arguments to be passed to methods.}
}
\value{
A deflist object containing ROIVec instances for each cluster.
}
\description{
This function cuts an object into a list of sub-objects based on a vector of cluster indices.
The resulting list contains each of the clusters as separate objects.

These methods split a NeuroVec object into multiple ROIVec objects based on cluster assignments.
}
\details{
There are two methods for splitting clusters:
\itemize{
  \item Using a ClusteredNeuroVol object: This method uses the pre-defined clusters in the ClusteredNeuroVol object.
  \item Using an integer vector: This method allows for custom cluster assignments.
}

Both methods return a deflist, which is a lazy-loading list of ROIVec objects.
}
\examples{
\dontrun{
# Using ClusteredNeuroVol
neuro_vec <- # ... create a NeuroVec object
clustered_vol <- # ... create a ClusteredNeuroVol object
split_result <- split_clusters(neuro_vec, clustered_vol)

# Using integer vector
cluster_assignments <- # ... create an integer vector of cluster assignments
split_result <- split_clusters(neuro_vec, cluster_assignments)
}


## split 'NeuroVol' with a 'ClusteredNeuroVol'
vol <- NeuroVol(array(runif(10*10*10),c(10,10,10)), NeuroSpace(c(10,10,10)))
mask <- as.logical(vol > .5)
mask.idx <- which(mask != 0)
grid <- index_to_coord(mask, mask.idx)
vox <- index_to_grid(mask, mask.idx)

library(purrr)
## partition coordinates into 50 clusters using 'kmeans'
kres <- kmeans(grid, centers=50, iter.max=500)
kvol <- ClusteredNeuroVol(mask, kres$cluster)
klis <- split_clusters(mask, kvol)
ret1 <- vol \%>\% split_clusters(kvol) \%>\% purrr::map_dbl(~ mean(values(.)))

## split NeuroVol with 'integer' vector of clusters.
indices <- numeric(prod(dim(mask)[1:3]))

## locations with a cluster value of 0 are ignored
indices[mask.idx] <- kres$cluster

ret2 <- vol \%>\% split_clusters(as.integer(indices)) \%>\%
purrr::map_dbl(~ mean(values(.)))
all(ret1 == ret1)
}
\seealso{
\code{\link{NeuroVec-class}}, \code{\link{ClusteredNeuroVol-class}}, \code{\link{ROIVec-class}}
}
