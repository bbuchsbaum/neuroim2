<?xml version="1.0" encoding="UTF-8"?>
<golden_test xmlns="http://golden-tests.org/schema">
  <metadata>
    <id>neurovol_arithmetic_operations</id>
    <version>1.0</version>
    <description>Test arithmetic operations between NeuroVol objects and scalars</description>
    <tags>
      <tag>volume_operations</tag>
      <tag>arithmetic</tag>
      <tag>core</tag>
    </tags>
  </metadata>
  
  <semantic_description>
    <purpose>
      Validate element-wise arithmetic operations between NeuroVol objects,
      including addition, subtraction, multiplication, division, and operations with scalars.
    </purpose>
    <algorithm>
      1. Create two 3x3x3 NeuroVol objects with known values
         - vol1: filled with values 1 to 27
         - vol2: filled with values 2, 4, 6, ... (even numbers)
      2. Test element-wise operations:
         - Addition: vol1 + vol2
         - Subtraction: vol1 - vol2
         - Multiplication: vol1 * vol2
         - Division: vol1 / vol2
      3. Test scalar operations:
         - vol1 + 10
         - vol1 * 2
      4. Verify results at specific voxels and compute summary statistics
    </algorithm>
  </semantic_description>
  
  <inputs>
    <array>
      <name>data1</name>
      <dimensions>3 3 3</dimensions>
      <values>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27</values>
    </array>
    <array>
      <name>data2</name>
      <dimensions>3 3 3</dimensions>
      <values>2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52 54</values>
    </array>
    <scalar>
      <name>scalar_add</name>
      <value>10</value>
    </scalar>
    <scalar>
      <name>scalar_mult</name>
      <value>2</value>
    </scalar>
  </inputs>
  
  <expected_outputs>
    <numeric_checks>
      <!-- Addition results -->
      <check>
        <type>exact_value</type>
        <name>add_voxel_1_1_1</name>
        <location>vol_add[1,1,1]</location>
        <expected>3</expected>
        <tolerance>1e-10</tolerance>
      </check>
      
      <check>
        <type>exact_value</type>
        <name>add_voxel_2_2_2</name>
        <location>vol_add[2,2,2]</location>
        <expected>42</expected>
        <tolerance>1e-10</tolerance>
      </check>
      
      <check>
        <type>exact_value</type>
        <name>add_sum</name>
        <location>sum(vol_add)</location>
        <expected>1134</expected>
        <tolerance>1e-10</tolerance>
      </check>
      
      <!-- Subtraction results -->
      <check>
        <type>exact_value</type>
        <name>sub_voxel_1_1_1</name>
        <location>vol_sub[1,1,1]</location>
        <expected>-1</expected>
        <tolerance>1e-10</tolerance>
      </check>
      
      <check>
        <type>exact_value</type>
        <name>sub_mean</name>
        <location>mean(vol_sub)</location>
        <expected>-14</expected>
        <tolerance>1e-10</tolerance>
      </check>
      
      <!-- Multiplication results -->
      <check>
        <type>exact_value</type>
        <name>mult_voxel_3_3_3</name>
        <location>vol_mult[3,3,3]</location>
        <expected>1458</expected>
        <tolerance>1e-10</tolerance>
      </check>
      
      <check>
        <type>exact_value</type>
        <name>mult_max</name>
        <location>max(vol_mult)</location>
        <expected>1458</expected>
        <tolerance>1e-10</tolerance>
      </check>
      
      <!-- Division results -->
      <check>
        <type>relative</type>
        <name>div_voxel_1_1_1</name>
        <location>vol_div[1,1,1]</location>
        <expected>0.5</expected>
        <tolerance>1e-10</tolerance>
      </check>
      
      <check>
        <type>relative</type>
        <name>div_voxel_3_3_3</name>
        <location>vol_div[3,3,3]</location>
        <expected>0.5</expected>
        <tolerance>1e-10</tolerance>
      </check>
      
      <!-- Scalar addition -->
      <check>
        <type>exact_value</type>
        <name>scalar_add_voxel_1_1_1</name>
        <location>vol_scalar_add[1,1,1]</location>
        <expected>11</expected>
        <tolerance>1e-10</tolerance>
      </check>
      
      <check>
        <type>exact_value</type>
        <name>scalar_add_mean</name>
        <location>mean(vol_scalar_add)</location>
        <expected>24</expected>
        <tolerance>1e-10</tolerance>
      </check>
      
      <!-- Scalar multiplication -->
      <check>
        <type>exact_value</type>
        <name>scalar_mult_voxel_3_3_3</name>
        <location>vol_scalar_mult[3,3,3]</location>
        <expected>54</expected>
        <tolerance>1e-10</tolerance>
      </check>
      
      <check>
        <type>exact_value</type>
        <name>scalar_mult_sum</name>
        <location>sum(vol_scalar_mult)</location>
        <expected>756</expected>
        <tolerance>1e-10</tolerance>
      </check>
    </numeric_checks>
  </expected_outputs>
  
  <implementations>
    <R><![CDATA[
library(neuroim2)

# Create test space
space <- NeuroSpace(dim = c(3, 3, 3), 
                    spacing = c(1, 1, 1), 
                    origin = c(0, 0, 0))

# Create first volume with values 1:27
data1 <- array(1:27, dim = c(3, 3, 3))
vol1 <- NeuroVol(data1, space)

# Create second volume with even values
data2 <- array(seq(2, 54, by = 2), dim = c(3, 3, 3))
vol2 <- NeuroVol(data2, space)

# Perform arithmetic operations
vol_add <- vol1 + vol2
vol_sub <- vol1 - vol2
vol_mult <- vol1 * vol2
vol_div <- vol1 / vol2

# Scalar operations
vol_scalar_add <- vol1 + 10
vol_scalar_mult <- vol1 * 2

# Extract specific values for testing
add_voxel_1_1_1 <- vol_add[1, 1, 1]
add_voxel_2_2_2 <- vol_add[2, 2, 2]
add_sum_val <- sum(vol_add)

sub_voxel_1_1_1 <- vol_sub[1, 1, 1]
sub_mean_val <- mean(vol_sub)

mult_voxel_3_3_3 <- vol_mult[3, 3, 3]
mult_max_val <- max(vol_mult)

div_voxel_1_1_1 <- vol_div[1, 1, 1]
div_voxel_3_3_3 <- vol_div[3, 3, 3]

scalar_add_voxel_1_1_1 <- vol_scalar_add[1, 1, 1]
scalar_add_mean_val <- mean(vol_scalar_add)

scalar_mult_voxel_3_3_3 <- vol_scalar_mult[3, 3, 3]
scalar_mult_sum_val <- sum(vol_scalar_mult)
]]></R>
  </implementations>
  
  <propagation_status>
    <implementation lang="R" status="complete" date="2025-01-06"/>
    <implementation lang="Python" status="pending"/>
    <implementation lang="Rust" status="pending"/>
  </propagation_status>
</golden_test>