<?xml version="1.0" encoding="UTF-8"?>
<golden_test xmlns="http://golden-tests.org/schema">
  <metadata>
    <id>concatenation_operations</id>
    <version>1.0</version>
    <description>Test concatenation of multiple 3D volumes into 4D NeuroVec</description>
    <tags>
      <tag>volume_operations</tag>
      <tag>concatenation</tag>
      <tag>4d_construction</tag>
      <tag>core</tag>
    </tags>
  </metadata>
  
  <semantic_description>
    <purpose>
      Validate concatenation of multiple 3D NeuroVol objects into a single 4D NeuroVec,
      testing both concat and concat_list functionality with proper dimension handling.
    </purpose>
    <algorithm>
      1. Create three 3x3x3 NeuroVol objects with distinct patterns
         - Vol1: values 1-27 (constant pattern)
         - Vol2: values 101-127 (offset by 100)
         - Vol3: values 201-227 (offset by 200)
      2. Concatenate using concat_list to create 4D NeuroVec
      3. Verify dimensions are 3x3x3x3 (spatial x time)
      4. Test extraction of individual time points
      5. Verify values preserved at each time point
      6. Test series extraction across time dimension
    </algorithm>
  </semantic_description>
  
  <inputs>
    <array>
      <name>data1</name>
      <dimensions>3 3 3</dimensions>
      <values>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27</values>
    </array>
    <array>
      <name>data2</name>
      <dimensions>3 3 3</dimensions>
      <values>101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127</values>
    </array>
    <array>
      <name>data3</name>
      <dimensions>3 3 3</dimensions>
      <values>201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227</values>
    </array>
  </inputs>
  
  <expected_outputs>
    <numeric_checks>
      <!-- Check concatenated dimensions -->
      <check>
        <type>dimension</type>
        <name>concat_dims</name>
        <location>dim(vec4d)</location>
        <expected>3 3 3 3</expected>
      </check>
      
      <!-- Check values from first time point -->
      <check>
        <type>exact_value</type>
        <name>t1_value_1_1_1</name>
        <location>vec4d[1,1,1,1]</location>
        <expected>1</expected>
        <tolerance>1e-10</tolerance>
      </check>
      
      <check>
        <type>exact_value</type>
        <name>t1_value_3_3_3</name>
        <location>vec4d[3,3,3,1]</location>
        <expected>27</expected>
        <tolerance>1e-10</tolerance>
      </check>
      
      <!-- Check values from second time point -->
      <check>
        <type>exact_value</type>
        <name>t2_value_1_1_1</name>
        <location>vec4d[1,1,1,2]</location>
        <expected>101</expected>
        <tolerance>1e-10</tolerance>
      </check>
      
      <check>
        <type>exact_value</type>
        <name>t2_value_2_2_2</name>
        <location>vec4d[2,2,2,2]</location>
        <expected>114</expected>
        <tolerance>1e-10</tolerance>
      </check>
      
      <!-- Check values from third time point -->
      <check>
        <type>exact_value</type>
        <name>t3_value_3_3_3</name>
        <location>vec4d[3,3,3,3]</location>
        <expected>227</expected>
        <tolerance>1e-10</tolerance>
      </check>
      
      <!-- Check sum at each time point -->
      <check>
        <type>exact_value</type>
        <name>sum_t1</name>
        <location>sum(vec4d[,,,1])</location>
        <expected>378</expected>
        <tolerance>1e-10</tolerance>
      </check>
      
      <check>
        <type>exact_value</type>
        <name>sum_t2</name>
        <location>sum(vec4d[,,,2])</location>
        <expected>3078</expected>
        <tolerance>1e-10</tolerance>
      </check>
      
      <check>
        <type>exact_value</type>
        <name>sum_t3</name>
        <location>sum(vec4d[,,,3])</location>
        <expected>5778</expected>
        <tolerance>1e-10</tolerance>
      </check>
      
      <!-- Check time series at specific voxel -->
      <check>
        <type>exact_value</type>
        <name>series_at_2_2_2</name>
        <location>series_2_2_2</location>
        <expected>14 114 214</expected>
        <tolerance>1e-10</tolerance>
      </check>
      
      <!-- Check total number of elements -->
      <check>
        <type>exact_value</type>
        <name>total_elements</name>
        <location>prod(dim(vec4d))</location>
        <expected>81</expected>
      </check>
    </numeric_checks>
  </expected_outputs>
  
  <implementations>
    <R><![CDATA[
library(neuroim2)

# Create shared space
space <- NeuroSpace(dim = c(3, 3, 3), 
                    spacing = c(1, 1, 1), 
                    origin = c(0, 0, 0))

# Create three volumes with different value ranges
data1 <- array(1:27, dim = c(3, 3, 3))
vol1 <- NeuroVol(data1, space)

data2 <- array(101:127, dim = c(3, 3, 3))
vol2 <- NeuroVol(data2, space)

data3 <- array(201:227, dim = c(3, 3, 3))
vol3 <- NeuroVol(data3, space)

# Concatenate into 4D NeuroVec
vec4d <- concat(vol1, vol2, vol3)

# Get dimensions
concat_dims <- dim(vec4d)

# Extract values at specific coordinates and time points
t1_val_1_1_1 <- vec4d[1, 1, 1, 1]
t1_val_3_3_3 <- vec4d[3, 3, 3, 1]
t2_val_1_1_1 <- vec4d[1, 1, 1, 2]
t2_val_2_2_2 <- vec4d[2, 2, 2, 2]
t3_val_3_3_3 <- vec4d[3, 3, 3, 3]

# Calculate sums at each time point
sum_t1 <- sum(vec4d[,,,1])
sum_t2 <- sum(vec4d[,,,2])
sum_t3 <- sum(vec4d[,,,3])

# Extract time series at voxel (2,2,2)
series_2_2_2 <- c(vec4d[2,2,2,1], vec4d[2,2,2,2], vec4d[2,2,2,3])

# Get total number of elements
total_elems <- length(vec4d)
]]></R>
  </implementations>
  
  <propagation_status>
    <implementation lang="R" status="complete" date="2025-01-06"/>
    <implementation lang="Python" status="pending"/>
    <implementation lang="Rust" status="pending"/>
  </propagation_status>
</golden_test>