<?xml version="1.0" encoding="UTF-8"?>
<golden_test xmlns="http://golden-tests.org/schema">
  <metadata>
    <id>neurovec_construction_series</id>
    <version>1.0</version>
    <description>Test NeuroVec construction and time series extraction</description>
    <tags>
      <tag>vector_operations</tag>
      <tag>time_series</tag>
      <tag>core</tag>
    </tags>
  </metadata>
  
  <semantic_description>
    <purpose>
      Validate NeuroVec construction from 2D matrix data representing 4D neuroimaging data,
      time series extraction from specific voxels, and computation of series mean.
    </purpose>
    <algorithm>
      1. Create a 2x2x2 spatial volume with 5 time points
      2. Construct data matrix where each row is a time point, columns are voxels
      3. Data pattern: voxel_value = voxel_index + time_point * 10
      4. Create NeuroVec from matrix
      5. Extract time series from specific voxels
      6. Compute series mean across all voxels for each time point
      7. Validate dimensions and values
    </algorithm>
  </semantic_description>
  
  <inputs>
    <matrix>
      <name>data_matrix</name>
      <dimensions>5 8</dimensions>
      <values>
        11 12 13 14 15 16 17 18
        21 22 23 24 25 26 27 28
        31 32 33 34 35 36 37 38
        41 42 43 44 45 46 47 48
        51 52 53 54 55 56 57 58
      </values>
    </matrix>
    <parameters>
      <parameter>
        <name>spatial_dim</name>
        <value>2 2 2</value>
      </parameter>
      <parameter>
        <name>spacing</name>
        <value>1 1 1</value>
      </parameter>
      <parameter>
        <name>origin</name>
        <value>0 0 0</value>
      </parameter>
    </parameters>
  </inputs>
  
  <expected_outputs>
    <numeric_checks>
      <!-- Check dimensions -->
      <check>
        <type>dimension</type>
        <name>neurovec_dims</name>
        <location>dim(neurovec)</location>
        <expected>2 2 2 5</expected>
      </check>
      
      <!-- Check series extraction for voxel (1,1,1) -->
      <check>
        <type>exact_value</type>
        <name>series_1_1_1</name>
        <location>series_1_1_1</location>
        <expected>11 21 31 41 51</expected>
        <tolerance>1e-10</tolerance>
      </check>
      
      <!-- Check series extraction for voxel (2,2,2) -->
      <check>
        <type>exact_value</type>
        <name>series_2_2_2</name>
        <location>series_2_2_2</location>
        <expected>18 28 38 48 58</expected>
        <tolerance>1e-10</tolerance>
      </check>
      
      <!-- Check series mean -->
      <check>
        <type>exact_value</type>
        <name>series_mean_values</name>
        <location>mean_series</location>
        <expected>14.5 24.5 34.5 44.5 54.5</expected>
        <tolerance>1e-10</tolerance>
      </check>
      
      <!-- Check length of time dimension -->
      <check>
        <type>exact_value</type>
        <name>time_length</name>
        <location>time_dim</location>
        <expected>5</expected>
      </check>
      
      <!-- Check value at specific time point -->
      <check>
        <type>exact_value</type>
        <name>value_at_t3_v1_1_2</name>
        <location>val_t3</location>
        <expected>35</expected>
        <tolerance>1e-10</tolerance>
      </check>
      
      <!-- Check sum at time point 1 -->
      <check>
        <type>exact_value</type>
        <name>sum_time1</name>
        <location>sum_t1</location>
        <expected>116</expected>
        <tolerance>1e-10</tolerance>
      </check>
      
      <!-- Check sum at time point 5 -->
      <check>
        <type>exact_value</type>
        <name>sum_time5</name>
        <location>sum_t5</location>
        <expected>436</expected>
        <tolerance>1e-10</tolerance>
      </check>
    </numeric_checks>
  </expected_outputs>
  
  <implementations>
    <R><![CDATA[
library(neuroim2)

# Create spatial structure
space <- NeuroSpace(dim = c(2, 2, 2), 
                    spacing = c(1, 1, 1), 
                    origin = c(0, 0, 0))

# Create data matrix: rows = time, columns = voxels
# Pattern: voxel_value = voxel_index + time_point * 10
data_matrix <- matrix(0, nrow = 5, ncol = 8)
for (t in 1:5) {
  for (v in 1:8) {
    data_matrix[t, v] <- v + t * 10
  }
}

# Create NeuroVec - transpose matrix so rows = voxels, cols = time
neurovec <- DenseNeuroVec(t(data_matrix), space)

# Extract time series from specific voxels using correct syntax
series_1_1_1 <- series(neurovec, 1, 1, 1)
series_2_2_2 <- series(neurovec, 2, 2, 2)

# Compute series mean - mean across voxels for each time point
mean_series <- apply(neurovec, 4, mean)

# Get dimensions
vec_dims <- dim(neurovec)
time_dim <- vec_dims[4]

# Get value at specific time and voxel
val_t3 <- neurovec[1, 1, 2, 3]

# Sum values at different time points
sum_t1 <- sum(neurovec[,,,1])
sum_t5 <- sum(neurovec[,,,5])
]]></R>
  </implementations>
  
  <propagation_status>
    <implementation lang="R" status="complete" date="2025-01-06"/>
    <implementation lang="Python" status="pending"/>
    <implementation lang="Rust" status="pending"/>
  </propagation_status>
</golden_test>