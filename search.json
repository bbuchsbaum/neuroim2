[{"path":"https://bbuchsbaum.github.io/neuroim2/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 neuroim2 authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/ImageVolumes.html","id":"reading-a-nifti-formatted-image-volume","dir":"Articles","previous_headings":"","what":"Reading a NIFTI formatted image volume","title":"Working with 3D Image Volumes","text":"way read volumetric image file use read_vol:","code":"library(neuroim2) #> Loading required package: Matrix #>  #> Attaching package: 'neuroim2' #> The following object is masked from 'package:base': #>  #>     scale     file_name <- system.file(\"extdata\", \"global_mask2.nii.gz\", package=\"neuroim2\")     vol <- read_vol(file_name)"},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/ImageVolumes.html","id":"working-with-image-volumes","dir":"Articles","previous_headings":"","what":"Working with image volumes","title":"Working with 3D Image Volumes","text":"Information geometry image volume shown : read_vol returns object class NeuroVol object extends R array 3 dimensions (x,y,z). Arithmetic can performed images ordinary arrays:","code":"print(vol) #>  #>  === NeuroVol Object ===  #>  #> * Basic Information  #>   Type:      DenseNeuroVol #>   Dimensions: 64 x 64 x 25 (406.6 Kb) #>   Total Voxels: 102,400 #>  #> * Data Properties #>   Value Range: [0.00, 1.00] #>  #> * Spatial Properties #>   Spacing: 3.50 x 3.50 x 3.70 mm #>   Origin:  112.0, -108.5, -46.2 mm #>   Axes:    Right-to-Left x Posterior-to-Anterior x Inferior-to-Superior #>  #> ====================================== #>  #>  Access Methods:  #>   .  Get Slice:   slice(object, zlevel=10)  #>   .  Get Value:   object[i, j, k]  #>   .  Plot:       plot(object)  # shows multiple slices class(vol) #> [1] \"DenseNeuroVol\" #> attr(,\"package\") #> [1] \"neuroim2\"          is.array(vol) #> [1] TRUE          dim(vol) #> [1] 64 64 25          vol[1,1,1] #> [1] 0          vol[64,64,24] #> [1] 0 vol2 <- vol + vol     sum(vol2) == 2 * sum(vol) #> [1] TRUE          vol3 <- vol2 - 2*vol     all(vol3 == 0) #> [1] TRUE"},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/ImageVolumes.html","id":"inspecting-geometry-and-spatial-metadata","dir":"Articles","previous_headings":"","what":"Inspecting geometry and spatial metadata","title":"Working with 3D Image Volumes","text":"NeuroVol associated NeuroSpace describing geometry (dimensions, spacing, origin, axes/orientation). can convert indices, voxel grid coordinates, real-world coordinates: numeric image volume can converted binary image follows:","code":"sp <- space(vol)     sp                 # human-readable summary #>  #>  NeuroSpace Object  #>  #>  >> Dimensions  #>   Grid Size: 64 x 64 x 25 #>   Memory:   5.9 KB #>  #>  >> Spatial Properties  #>   Spacing:   3.50 x 3.50 x 3.70 mm #>   Origin:    112.00 x -108.50 x -46.25 mm #>  #>  >> Anatomical Orientation  #>   X: Right-to-Left  |  Y: Posterior-to-Anterior  |  Z: Inferior-to-Superior  #>  #>  >> World Transformation  #>   Forward (Voxel to World):  #>     -3.500  -0.000  -0.000   112.000 #>  0.000   3.500  -0.000  -108.500 #> -0.000   0.000   3.700   -46.250 #>  0.000   0.000   0.000     1.000  #>   Inverse (World to Voxel):  #>     -0.286  -0.000  -0.000  32.000 #>  0.000   0.286   0.000  31.000 #>  0.000   0.000   0.270  12.500 #>  0.000   0.000   0.000   1.000  #>  #>  >> Bounding Box  #>   Min Corner: -108.5, -108.5, -46.2 mm #>   Max Corner: 112.0, 112.0, 42.6 mm #>  #> ==================================================     dim(vol)           # spatial dimensions (x, y, z) #> [1] 64 64 25     spacing(vol)       # voxel size in mm #> [1] 3.5 3.5 3.7     origin(vol)        # image origin #> [1]  112.00 -108.50  -46.25 idx <- 1:5     g   <- index_to_grid(vol, idx)     # 1D index -> (i,j,k)     w   <- index_to_coord(vol, idx)    # 1D index -> world coords     idx2 <- coord_to_index(vol, w)     # back to indices     all.equal(idx, idx2) #> [1] TRUE vol2 <- as.logical(vol)     class(vol2) #> [1] \"LogicalNeuroVol\" #> attr(,\"package\") #> [1] \"neuroim2\"     print(vol2[1,1,1]) #> [1] FALSE"},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/ImageVolumes.html","id":"masks-and-logicalneurovol","dir":"Articles","previous_headings":"","what":"Masks and LogicalNeuroVol","title":"Working with 3D Image Volumes","text":"Create mask threshold explicit set indices. Masks LogicalNeuroVol align 3D space. can also create NeuroVol instance array numeric vector. First consruct standard R array: Now reate NeuroSpace instance describes geometry image including, minimum, dimensions voxel spacing. usually create NeuroSpace objects, geometric information image automatically determined information stored image file header. Thus, NeuroSpace objects usually copied existing images using space extractor function needed:","code":"# Threshold-based mask     mask1 <- as.mask(vol > 0.5)     mask1 #>  #>  === NeuroVol Object ===  #>  #> * Basic Information  #>   Type:      LogicalNeuroVol #>   Dimensions: 64 x 64 x 25 (406.6 Kb) #>   Total Voxels: 102,400 #>  #> * Data Properties #>   Value Range: [0.00, 1.00] #>  #> * Spatial Properties #>   Spacing: 3.50 x 3.50 x 3.70 mm #>   Origin:  112.0, -108.5, -46.2 mm #>   Axes:    Right-to-Left x Posterior-to-Anterior x Inferior-to-Superior #>  #> ====================================== #>  #>  Access Methods:  #>   .  Get Slice:   slice(object, zlevel=10)  #>   .  Get Value:   object[i, j, k]  #>   .  Plot:       plot(object)  # shows multiple slices      # Index-based mask     idx_hi <- which(vol > 0.8)     mask2 <- as.mask(vol, idx_hi)     sum(mask2) == length(idx_hi) #> [1] TRUE      # Use a mask to compute a summary     mean_in_mask <- mean(vol[mask1@.Data])     mean_in_mask #> [1] 1 x <- array(0, c(64,64,64)) bspace <- NeuroSpace(dim=c(64,64,64), spacing=c(1,1,1))     vol <- NeuroVol(x, bspace)     vol #>  #>  === NeuroVol Object ===  #>  #> * Basic Information  #>   Type:      DenseNeuroVol #>   Dimensions: 64 x 64 x 64 (2 Mb) #>   Total Voxels: 262,144 #>  #> * Data Properties #>   Value Range: [0.00, 0.00] #>  #> * Spatial Properties #>   Spacing: 1.00 x 1.00 x 1.00 mm #>   Origin:  0.0, 0.0, 0.0 mm #>   Axes:    Left-to-Right x Posterior-to-Anterior x Inferior-to-Superior #>  #> ====================================== #>  #>  Access Methods:  #>   .  Get Slice:   slice(object, zlevel=10)  #>   .  Get Value:   object[i, j, k]  #>   .  Plot:       plot(object)  # shows multiple slices vol2 <- NeuroVol((vol+1)*25, space(vol))     max(vol2) #> [1] 25     space(vol2) #>  #>  NeuroSpace Object  #>  #>  >> Dimensions  #>   Grid Size: 64 x 64 x 64 #>   Memory:   5.9 KB #>  #>  >> Spatial Properties  #>   Spacing:   1.00 x 1.00 x 1.00 mm #>   Origin:    0.00 x 0.00 x 0.00 mm #>  #>  >> Anatomical Orientation  #>   X: Left-to-Right  |  Y: Posterior-to-Anterior  |  Z: Inferior-to-Superior  #>  #>  >> World Transformation  #>   Forward (Voxel to World):  #>     1.000  0.000  0.000  0.000 #> 0.000  1.000  0.000  0.000 #> 0.000  0.000  1.000  0.000 #> 0.000  0.000  0.000  1.000  #>   Inverse (World to Voxel):  #>     1.000  0.000  0.000  0.000 #> 0.000  1.000  0.000  0.000 #> 0.000  0.000  1.000  0.000 #> 0.000  0.000  0.000  1.000  #>  #>  >> Bounding Box  #>   Min Corner: 0.0, 0.0, 0.0 mm #>   Max Corner: 63.0, 63.0, 63.0 mm #>  #> =================================================="},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/ImageVolumes.html","id":"slicing-and-quick-visualization","dir":"Articles","previous_headings":"","what":"Slicing and quick visualization","title":"Working with 3D Image Volumes","text":"Extract single 2D slice display using standard array indexing: Mid-slice example volume","code":"z <- ceiling(dim(vol)[3] / 2)     image(vol[,,z], main = paste(\"Slice z=\", z))"},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/ImageVolumes.html","id":"reorienting-and-resampling","dir":"Articles","previous_headings":"","what":"Reorienting and resampling","title":"Working with 3D Image Volumes","text":"can change image’s orientation voxel spacing. Use reorient() remap axes (e.g., RAS) resample_to() match target space. Resample new spacing match target NeuroSpace:","code":"# Reorient the space (LPI -> RAS) and compare coordinate mappings     sp_lpi <- space(vol)     sp_ras <- reorient(sp_lpi, c(\"R\",\"A\",\"S\"))     g     <- t(matrix(c(10, 10, 10)))     world_lpi <- grid_to_coord(sp_lpi, g)     world_ras <- grid_to_coord(sp_ras, g)     # world_lpi and world_ras differ due to axis remapping # Create a target space with 2x finer resolution     sp  <- space(vol)     sp2 <- NeuroSpace(sp@dim * c(2,2,2), sp@spacing/2, origin=sp@origin, trans=trans(vol))      # Resample (trilinear)     vol_resamp <- resample_to(vol, sp2, method = \"linear\")     dim(vol_resamp)"},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/ImageVolumes.html","id":"downsampling","dir":"Articles","previous_headings":"","what":"Downsampling","title":"Working with 3D Image Volumes","text":"Reduce spatial resolution speed downstream operations.","code":"# Downsample by target spacing     vol_ds1 <- downsample(vol, spacing = spacing(vol)[1:3] * 2)     dim(vol_ds1) #> [1] 32 32 32      # Or by factor     vol_ds2 <- downsample(vol, factor = 0.5)     dim(vol_ds2) #> [1] 32 32 32"},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/ImageVolumes.html","id":"writing-a-nifti-formatted-image-volume","dir":"Articles","previous_headings":"","what":"Writing a NIFTI formatted image volume","title":"Working with 3D Image Volumes","text":"’re ready write image volume disk, use write_vol can also write temporary file workflows:","code":"write_vol(vol2, \"output.nii\")          ## adding a '.gz' extension results ina gzipped file.     write_vol(vol2, \"output.nii.gz\") tmp <- tempfile(fileext = \".nii.gz\")     write_vol(vol2, tmp)     file.exists(tmp) #> [1] TRUE     unlink(tmp)"},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/NeuroVector.html","id":"working-with-neuroimaging-time-series-data","dir":"Articles","previous_headings":"","what":"Working with neuroimaging time-series data","title":"Working with 4D NeuroVectors (NeuroVec)","text":"neuroim2 package contains data structures functions reading, accessing, processing 4-dimensional neuroimaging data. vignette, ’ll introduce NeuroVec (4D images) related helpers ’ll use often: Read/write -disk images (read_vec, write_vec) Spatial metadata via NeuroSpace (dimensions, spacing, origin) Voxel- ROI-based access (series, series_roi, coords) Common transforms (z-scoring scale_series, concatenation concat) Dense vs. sparse representations (DenseNeuroVec, SparseNeuroVec, .sparse)","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/NeuroVector.html","id":"reading-a-four-dimensional-nifti-image-with-read_vec","dir":"Articles","previous_headings":"Working with neuroimaging time-series data","what":"Reading a four-dimensional NifTI image with read_vec","title":"Working with 4D NeuroVectors (NeuroVec)","text":"read example image. file 3D (single timepoint) package data; interface 4D images. Now imagine set images. can read multiple files read_vec. Passing multiple paths returns NeuroVecSeq (sequence vectors) rather single concatenated 4D vector. extract subset volumes 4D vector, ’ll first create small time series concatenating 3D volume:","code":"library(purrr)       library(ggplot2)       file_name <- system.file(\"extdata\", \"global_mask_v4.nii\", package=\"neuroim2\")       vec <- read_vec(file_name)       dim(vec) #> [1] 64 64 25  4       vec #>  #> DenseNeuroVec (3.13 bytes MB) #>  #> - Spatial Info --------------------------- #> | Dimensions    : 64 x 64 x 25 (4 timepoints) #> | Total Voxels  : 102,400 #> | Spacing       : 3.5 x 3.5 x 3.7 #>  #> - Properties --------------------------- #> | Origin        : 112 x -108 x -46.2 #> | Orientation   : Right-to-Left Posterior-to-Anterior Inferior-to-Superior #>  #> - Statistics --------------------------- #>     Mean +/- SD    : 0.288 +/- 0.453 #>  #> Label: /home/runner/work/_temp/Library/neuroim2/extdata/global_mask_v4.nii file_name <- system.file(\"extdata\", \"global_mask_v4.nii\", package=\"neuroim2\")       vec_multi <- read_vec(c(file_name, file_name, file_name))       dim(vec_multi) #> [1] 64 64 25 12              vec2 <- read_vec(rep(file_name, 10))       vec2 #>  #> NeuroVecSeq (10 vectors) #>  #> += Sequence Info --------------------------- #> | Length        : 10 #> | Total Time    : 40 points #>  #> += Spatial Info --------------------------- #> | Dimensions    : 64 x 64 x 25 #> | Spacing       : 3.5 x 3.5 x 3.7 #> | Origin        : 112 x -108 x -46.2 #> | Orientation   : Right-to-Left Posterior-to-Anterior Inferior-to-Superior #>  #> += Vector Details -------------------------- #>   1. DenseNeuroVec (4 timepoints) #>   2. DenseNeuroVec (4 timepoints) #>   3. DenseNeuroVec (4 timepoints) #>   4. DenseNeuroVec (4 timepoints) #>   5. DenseNeuroVec (4 timepoints) #>   6. DenseNeuroVec (4 timepoints) #>   7. DenseNeuroVec (4 timepoints) #>   8. DenseNeuroVec (4 timepoints) #>   9. DenseNeuroVec (4 timepoints) #>   10. DenseNeuroVec (4 timepoints) # Build a 4D vector with 10 timepoints by concatenation       vol <- read_vol(file_name)       vec_t <- concat(vol, vol, vol, vol, vol, vol, vol, vol, vol, vol)              # Extract a subset of volumes       vec_1_6 <- sub_vector(vec_t, 1:6)       dim(vec_1_6) #> [1] 64 64 25  6       vec_1_6 #>  #> DenseNeuroVec (4.69 bytes MB) #>  #> - Spatial Info --------------------------- #> | Dimensions    : 64 x 64 x 25 (6 timepoints) #> | Total Voxels  : 102,400 #> | Spacing       : 3.5 x 3.5 x 3.7 #>  #> - Properties --------------------------- #> | Origin        : 112 x -108 x -46.2 #> | Orientation   : Right-to-Left Posterior-to-Anterior Inferior-to-Superior #>  #> - Statistics --------------------------- #>     Mean +/- SD    : 0.288 +/- 0.453 #>  #> Label: none"},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/NeuroVector.html","id":"extracting-time-series-data-using-the-series-and-series_roi-functions","dir":"Articles","previous_headings":"Working with neuroimaging time-series data","what":"Extracting time-series data using the series and series_roi functions","title":"Working with 4D NeuroVectors (NeuroVec)","text":"get time-series voxel (1,1,1) can use series function: can extract 4d region interest series_roi follows: can also extract ROI using 1d indices: can extract plain matrix using series function: can also use coordinate indexing using voxel coordinates. First load binary mask spatial dimensions NeuroVec: Now convert indices voxels extract matrix values specified locations: using series_roi:","code":"series(vec_1_6, 1,1,1) #> [1] 0 0 0 0 0 0 file_name <- system.file(\"extdata\", \"global_mask_v4.nii\", package=\"neuroim2\")       vol <- read_vol(file_name)       roi <- spherical_roi(vol, c(12,12,12), radius=8)       rvec1 <- series_roi(vec, roi)              ## or alternatively as a pipeline       rvec2 <- read_vol(file_name) %>% spherical_roi(c(12,12,12), radius=8) %>% series_roi(vec,.)       rvec2 #>  #>  === ROIVec Object ===  #>  #> - Structure  #>   Points:     49 #>   Features:   3 (147 total) #>   Memory:     9.6 Kb #>  #> - Spatial Properties #>   Parent Space: 64 x 64 x 25 x 4 #>   Centroid:     [13.0, 13.0, 13.0 mm] #>  #> - Value Properties #>   Range:    [0.00, 0.00] #>  #> ====================================== #>  #>  Access Methods:  #>   .  Get Points:   coords(object)  #>   .  Get Values:   as.matrix(object)  #>   .  Subset:       object[1:10, ]              ## we can extract the ROI values with the `values` method.       assertthat::assert_that(all(values(rvec1) == values(rvec2))) #> [1] TRUE       assertthat::assert_that(all(coords(rvec1) == coords(rvec2))) #> [1] TRUE r1 <- series_roi(vec, 1:100) r1 #>  #>  === ROIVec Object ===  #>  #> - Structure  #>   Points:     100 #>   Features:   3 (300 total) #>   Memory:     11.2 Kb #>  #> - Spatial Properties #>   Parent Space: 64 x 64 x 25 x 4 #>   Centroid:     [27.5, 1.4, 1.0 mm] #>  #> - Value Properties #>   Range:    [0.00, 0.00] #>  #> ====================================== #>  #>  Access Methods:  #>   .  Get Points:   coords(object)  #>   .  Get Values:   as.matrix(object)  #>   .  Subset:       object[1:10, ] r2 <- series(vec, 1:100) dim(r2) #> [1]   4 100 mask <- read_vol(system.file(\"extdata\", \"global_mask_v4.nii\", package=\"neuroim2\")) vox <- index_to_grid(mask, 1:100)  r3 <- series(vec, vox) dim(r3) #> [1]   4 100 r4 <- series_roi(vec,vox) r4 #>  #>  === ROIVec Object ===  #>  #> - Structure  #>   Points:     100 #>   Features:   3 (300 total) #>   Memory:     12.4 Kb #>  #> - Spatial Properties #>   Parent Space: 64 x 64 x 25 x 4 #>   Centroid:     [27.5, 1.4, 1.0 mm] #>  #> - Value Properties #>   Range:    [0.00, 0.00] #>  #> ====================================== #>  #>  Access Methods:  #>   .  Get Points:   coords(object)  #>   .  Get Values:   as.matrix(object)  #>   .  Subset:       object[1:10, ]"},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/NeuroVector.html","id":"inspecting-spatial-metadata-with-neurospace","dir":"Articles","previous_headings":"Working with neuroimaging time-series data","what":"Inspecting spatial metadata with NeuroSpace","title":"Working with 4D NeuroVectors (NeuroVec)","text":"Every NeuroVec carries NeuroSpace describing geometry. default mask dense vectors “voxels valid”:","code":"sp <- space(vec_t) sp                   # dimensions, spacing, origin, axes #>  #>  NeuroSpace Object  #>  #>  >> Dimensions  #>   Grid Size: 64 x 64 x 25 x 10 #>   Memory:   5.9 KB #>  #>  >> Spatial Properties  #>   Spacing:   3.50 x 3.50 x 3.70 mm #>   Origin:    112.00 x -108.00 x -46.20 mm #>  #>  >> Anatomical Orientation  #>   X: Right-to-Left  |  Y: Posterior-to-Anterior  |  Z: Inferior-to-Superior  #>  #>  >> World Transformation  #>   Forward (Voxel to World):  #>     -3.500  0.000  -0.000   112.000 #>  0.000  3.500  -0.000  -108.000 #>  0.000  0.000   3.700   -46.200 #>  0.000  0.000   0.000     1.000  #>   Inverse (World to Voxel):  #>     -0.286  -0.000  -0.000  32.000 #>  0.000   0.286   0.000  30.857 #>  0.000   0.000   0.270  12.486 #>  0.000   0.000   0.000   1.000  #>  #>  >> Bounding Box  #>   Min Corner: -108.5, -108.0, -46.2 mm #>   Max Corner: 112.0, 112.5, 42.6 mm #>  #> ================================================== dim(vec_t)           # 4D dims: X × Y × Z × T #> [1] 64 64 25 10 spacing(vec_t)       # voxel spacing (mm) #> [1] 3.5 3.5 3.7 origin(vec_t)        # image origin #> [1]  112.0 -108.0  -46.2 ndim(vec_t)          # == 4 for time series #> [1] 4 m <- mask(vec_t) m #>  #>  === NeuroVol Object ===  #>  #> * Basic Information  #>   Type:      LogicalNeuroVol #>   Dimensions: 64 x 64 x 25 (406.6 Kb) #>   Total Voxels: 102,400 #>  #> * Data Properties #>   Value Range: [1.00, 1.00] #>  #> * Spatial Properties #>   Spacing: 3.50 x 3.50 x 3.70 mm #>   Origin:  112.0, -108.0, -46.2 mm #>   Axes:    Left-to-Right x Posterior-to-Anterior x Inferior-to-Superior #>  #> ====================================== #>  #>  Access Methods:  #>   .  Get Slice:   slice(object, zlevel=10)  #>   .  Get Value:   object[i, j, k]  #>   .  Plot:       plot(object)  # shows multiple slices"},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/NeuroVector.html","id":"creating-a-neurovec-from-an-in-memory-array","dir":"Articles","previous_headings":"Working with neuroimaging time-series data","what":"Creating a NeuroVec from an in-memory array","title":"Working with 4D NeuroVectors (NeuroVec)","text":"can build NeuroVec directly arrays matrices: can also start matrix (voxels × time time × voxels) using DenseNeuroVec:","code":"set.seed(1) dims <- c(24, 24, 24, 5) arr  <- array(rnorm(prod(dims)), dims) sp4  <- NeuroSpace(dims, spacing = c(2,2,2)) dvec <- NeuroVec(arr, sp4) dim(dvec) #> [1] 24 24 24  5 mat  <- matrix(rnorm(prod(dims)), nrow = prod(dims[1:3]), ncol = dims[4]) dvec2 <- DenseNeuroVec(mat, sp4) all.equal(dim(dvec), dim(dvec2)) #> [1] TRUE"},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/NeuroVector.html","id":"time-series-transforms-z-scoring-and-summary-volumes","dir":"Articles","previous_headings":"Working with neuroimaging time-series data","what":"Time-series transforms: z-scoring and summary volumes","title":"Working with 4D NeuroVectors (NeuroVec)","text":"Z-score voxel’s time-series (center scale across time): Compute mean volume across time return 3D NeuroVol:","code":"vec_z <- scale_series(dvec, center = TRUE, scale = TRUE) dim(vec_z) #> [1] 24 24 24  5 M      <- as.matrix(dvec)              # voxels × time vmean  <- rowMeans(M)                  # per-voxel mean mean3d <- NeuroVol(vmean, drop_dim(space(dvec))) mean3d #>  #>  === NeuroVol Object ===  #>  #> * Basic Information  #>   Type:      DenseNeuroVol #>   Dimensions: 24 x 24 x 24 (114.6 Kb) #>   Total Voxels: 13,824 #>  #> * Data Properties #>   Value Range: [-1.64, 1.76] #>  #> * Spatial Properties #>   Spacing: 2.00 x 2.00 x 2.00 mm #>   Origin:  0.0, 0.0, 0.0 mm #>   Axes:    Left-to-Right x Posterior-to-Anterior x Inferior-to-Superior #>  #> ====================================== #>  #>  Access Methods:  #>   .  Get Slice:   slice(object, zlevel=10)  #>   .  Get Value:   object[i, j, k]  #>   .  Plot:       plot(object)  # shows multiple slices"},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/NeuroVector.html","id":"concatenating-along-time","dir":"Articles","previous_headings":"Working with neuroimaging time-series data","what":"Concatenating along time","title":"Working with 4D NeuroVectors (NeuroVec)","text":"Append time points concatenating vectors volumes:","code":"dvec_more <- concat(dvec, dvec)        # doubles the time dimension dim(dvec_more) #> [1] 24 24 24 10"},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/NeuroVector.html","id":"dense-sparse-workflows","dir":"Articles","previous_headings":"Working with neuroimaging time-series data","what":"Dense ↔︎ sparse workflows","title":"Working with 4D NeuroVectors (NeuroVec)","text":"Sparse representations store voxels within mask. handy large ROIs brain masks. Tip: file-backed memory-mapped vectors, convert DenseNeuroVec via matrix need dense-operations:","code":"# Build a random mask and convert a dense vec to sparse mask_arr <- array(runif(prod(dims[1:3])) > 0.7, dims[1:3]) mask_vol <- LogicalNeuroVol(mask_arr, drop_dim(sp4))  svec <- as.sparse(dvec, mask_vol)     # SparseNeuroVec with explicit mask svec                                 # note the stored mask and cardinality #>  #> SparseNeuroVec  #>  #> += Spatial Info --------------------------- #> | Dimensions    : 24 x 24 x 24 #> | Time Points   : 5 #> | Spacing       : 2 x 2 x 2 #> | Origin        : 0 x 0 x 0 #>  #> +- Sparse Info  ---------------------------- #> | Cardinality   : 4128 #>  #> += Memory Usage -------------------------- #>   Size          : 306.02 KB  # Convert back to dense if needed dense_again <- as.dense(svec) all.equal(dim(dense_again), dim(dvec)) #> [1] TRUE dv_dense <- DenseNeuroVec(as.matrix(vec), space(vec))"},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/NeuroVector.html","id":"writing-vectors-to-disk","dir":"Articles","previous_headings":"Working with neuroimaging time-series data","what":"Writing vectors to disk","title":"Working with 4D NeuroVectors (NeuroVec)","text":"can write NeuroVec NeuroVol objects NIfTI files:","code":"tmp_vec <- tempfile(fileext = \".nii.gz\") write_vec(vec_1_6, tmp_vec) file.exists(tmp_vec) #> [1] TRUE unlink(tmp_vec)"},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/NeuroVector.html","id":"putting-it-together-with-an-roi","dir":"Articles","previous_headings":"Working with neuroimaging time-series data","what":"Putting it together with an ROI","title":"Working with 4D NeuroVectors (NeuroVec)","text":"Combine ROI extraction time-series transforms: ’s core workflow 4D data neuroim2: load create NeuroVec, inspect NeuroSpace, access time-series via voxels ROIs, apply simple transforms, optionally move dense sparse representations.","code":"vol3d <- read_vol(system.file(\"extdata\", \"global_mask_v4.nii\", package=\"neuroim2\")) roi   <- spherical_roi(vol3d, c(12,12,12), radius = 6) rts   <- series_roi(vec, roi)          # ROIVec (T × N with coords)  # z-score each column (voxel) across time, then average within ROI mat_roi  <- values(rts)                # T × N mat_z    <- base::scale(mat_roi, center=TRUE, scale=TRUE) roi_mean <- rowMeans(mat_z) length(roi_mean)                       # matches time dimension #> [1] 4"},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/Overview.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Overview: Getting Started with neuroim2","text":"neuroim2 comprehensive R package neuroimaging data analysis, providing efficient data structures methods handling 3D brain volumes 4D time-series data. Whether ’re working structural MRI, functional MRI, volumetric brain imaging data, neuroim2 offers tools need.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/Overview.html","id":"key-features","dir":"Articles","previous_headings":"Introduction","what":"Key Features","title":"Overview: Getting Started with neuroim2","text":"Efficient Data Structures: Optimized representations dense sparse neuroimaging data Flexible /O: Read write common neuroimaging formats (NIfTI, AFNI) ROI Analysis: Create analyze regions interest various shapes Searchlight Methods: Implement searchlight analyses pattern detection Memory Management: Handle large datasets file-backed memory-mapped arrays Spatial Operations: Resample, reorient, filter, transform brain images Parcellation Support: Work brain atlases parcellated data","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/Overview.html","id":"quick-start","dir":"Articles","previous_headings":"Introduction","what":"Quick Start","title":"Overview: Getting Started with neuroim2","text":"","code":"library(neuroim2)  # Load a 3D brain volume img <- read_vol(system.file(\"extdata\", \"global_mask2.nii.gz\", package = \"neuroim2\"))  # Inspect the spatial properties space(img)      # Complete spatial information #>  #>  NeuroSpace Object  #>  #>  >> Dimensions  #>   Grid Size: 64 x 64 x 25 #>   Memory:   5.9 KB #>  #>  >> Spatial Properties  #>   Spacing:   3.50 x 3.50 x 3.70 mm #>   Origin:    112.00 x -108.50 x -46.25 mm #>  #>  >> Anatomical Orientation  #>   X: Right-to-Left  |  Y: Posterior-to-Anterior  |  Z: Inferior-to-Superior  #>  #>  >> World Transformation  #>   Forward (Voxel to World):  #>     -3.500  -0.000  -0.000   112.000 #>  0.000   3.500  -0.000  -108.500 #> -0.000   0.000   3.700   -46.250 #>  0.000   0.000   0.000     1.000  #>   Inverse (World to Voxel):  #>     -0.286  -0.000  -0.000  32.000 #>  0.000   0.286   0.000  31.000 #>  0.000   0.000   0.270  12.500 #>  0.000   0.000   0.000   1.000  #>  #>  >> Bounding Box  #>   Min Corner: -108.5, -108.5, -46.2 mm #>   Max Corner: 112.0, 112.0, 42.6 mm #>  #> ================================================== dim(img)        # Dimensions #> [1] 64 64 25 spacing(img)    # Voxel sizes #> [1] 3.5 3.5 3.7 origin(img)     # Origin coordinates #> [1]  112.00 -108.50  -46.25"},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/Overview.html","id":"d-volumes-neurovol","dir":"Articles","previous_headings":"Core Data Structures","what":"3D Volumes: NeuroVol","title":"Overview: Getting Started with neuroim2","text":"NeuroVol class represents 3D brain volumes (structural images, masks, single time points):","code":"# Create a synthetic 3D volume dims <- c(64, 64, 40) dat <- array(rnorm(prod(dims)), dims) vol <- NeuroVol(dat, NeuroSpace(dims))  # Basic operations vol_mean <- mean(vol) vol_sd <- sd(vol) cat(\"Volume mean:\", vol_mean, \"SD:\", vol_sd, \"\\n\") #> Volume mean: -0.003293314 SD: 1.001015  # Logical volumes for masks mask <- vol > 0 cat(\"Voxels above zero:\", sum(mask), \"\\n\") #> Voxels above zero: 81574"},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/Overview.html","id":"d-time-series-neurovec","dir":"Articles","previous_headings":"Core Data Structures","what":"4D Time-Series: NeuroVec","title":"Overview: Getting Started with neuroim2","text":"NeuroVec class handles 4D data (e.g., fMRI time-series):","code":"# Create a 4D time-series (small example) dims_4d <- c(10, 10, 10, 20)  # 10x10x10 volume, 20 time points dat_4d <- array(rnorm(prod(dims_4d)), dims_4d) vec_4d <- NeuroVec(dat_4d, NeuroSpace(dims_4d))  # Extract time-series at a specific voxel ts <- series(vec_4d, 5, 5, 5) cat(\"Time-series length at voxel (5,5,5):\", length(ts), \"\\n\") #> Time-series length at voxel (5,5,5): 20  # Extract a single volume at time point 10 vol_t10 <- vec_4d[,,,10] cat(\"Volume at t=10 dimensions:\", dim(vol_t10), \"\\n\") #> Volume at t=10 dimensions: 10 10 10"},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/Overview.html","id":"creating-rois","dir":"Articles","previous_headings":"Region of Interest (ROI) Analysis","what":"Creating ROIs","title":"Overview: Getting Started with neuroim2","text":"neuroim2 provides multiple ways define regions interest:","code":"# Spherical ROI - most common for searchlight analyses sphere <- spherical_roi(img, c(30, 30, 20), radius = 5) cat(\"Spherical ROI contains\", length(sphere), \"voxels\\n\") #> Spherical ROI contains 11 voxels  # Cuboid ROI - rectangular box cube <- cuboid_roi(space(img), c(30, 30, 20), surround = 3) cat(\"Cuboid ROI contains\", length(cube), \"voxels\\n\") #> Cuboid ROI contains 343 voxels  # Extract values from the original image using ROI roi_values <- img[coords(sphere)] cat(\"Mean value in spherical ROI:\", mean(roi_values), \"\\n\") #> Mean value in spherical ROI: 1"},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/Overview.html","id":"searchlight-analysis","dir":"Articles","previous_headings":"Region of Interest (ROI) Analysis","what":"Searchlight Analysis","title":"Overview: Getting Started with neuroim2","text":"Searchlight powerful technique local pattern analysis:","code":"# Create searchlights with 6mm radius lights <- searchlight(img, radius = 6, eager = FALSE)  # Process first few searchlights (normally you'd process all) first_5 <- lights[1:5] means <- sapply(first_5, function(roi) mean(img[coords(roi)])) cat(\"First 5 searchlight means:\", round(means, 2), \"\\n\") #> First 5 searchlight means: 0.95 0.95 0.84 0.74 0.79"},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/Overview.html","id":"coordinate-conversions","dir":"Articles","previous_headings":"Coordinate Systems and Transformations","what":"Coordinate Conversions","title":"Overview: Getting Started with neuroim2","text":"neuroim2 handles conversions different coordinate systems:","code":"# Voxel coordinates to world coordinates (mm) voxel_coords <- c(30, 30, 20) world_coords <- grid_to_coord(img, matrix(voxel_coords, nrow = 1)) cat(\"Voxel\", voxel_coords, \"-> World\", round(world_coords, 2), \"mm\\n\") #> Voxel 30 30 20 -> World 10.5 -7 24.05 mm  # World coordinates back to voxel voxel_back <- coord_to_grid(img, world_coords) cat(\"World\", round(world_coords, 2), \"-> Voxel\", voxel_back, \"\\n\") #> World 10.5 -7 24.05 -> Voxel 30 30 19.99999  # Linear indices idx <- grid_to_index(img, matrix(voxel_coords, nrow = 1)) cat(\"Voxel\", voxel_coords, \"-> Linear index\", idx, \"\\n\") #> Voxel 30 30 20 -> Linear index 79710"},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/Overview.html","id":"sparse-representations","dir":"Articles","previous_headings":"Memory-Efficient Operations","what":"Sparse Representations","title":"Overview: Getting Started with neuroim2","text":"data many zero values (e.g., masks, ROIs):","code":"# Create a sparse representation directly from an ROI roi <- spherical_roi(img, c(30, 30, 20), radius = 8, fill = 1)  # Convert ROI to sparse volume sparse_roi <- as.sparse(roi)  # Compare memory usage (convert original ROI to dense for baseline) dense_vol <- as.dense(roi) cat(\"Dense size:\", format(object.size(dense_vol), units = \"auto\"), \"\\n\") #> Dense size: 806.6 Kb cat(\"Sparse size:\", format(object.size(sparse_roi), units = \"auto\"), \"\\n\") #> Sparse size: 8.3 Kb cat(\"Non-zero voxels:\", length(roi), \"out of\", prod(dim(img)), \"total\\n\") #> Non-zero voxels: 49 out of 102400 total cat(\"Space savings:\", round((1 - as.numeric(object.size(sparse_roi)) /                                as.numeric(object.size(dense_vol))) * 100, 1), \"%\\n\") #> Space savings: 99 %"},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/Overview.html","id":"file-backed-arrays","dir":"Articles","previous_headings":"Memory-Efficient Operations","what":"File-Backed Arrays","title":"Overview: Getting Started with neuroim2","text":"datasets large fit memory:","code":"# Create a file-backed 4D dataset (not run in vignette) big_vec <- FileBackedNeuroVec(   dims = c(91, 109, 91, 1000),  # Standard MNI space, 1000 volumes   dtype = \"float32\",   file_name = \"big_data.dat\" )  # Access works like regular arrays but data stays on disk subset <- big_vec[45, 55, 45, 1:10]  # Load only what you need"},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/Overview.html","id":"smoothing-operations","dir":"Articles","previous_headings":"Spatial Filtering and Processing","what":"Smoothing Operations","title":"Overview: Getting Started with neuroim2","text":"","code":"# Gaussian smoothing with single sigma value (pass mask explicitly) img_smooth <- gaussian_blur(img, img, sigma = 2)  # Compare original vs smoothed orig_vals <- img[30:32, 30:32, 20] smooth_vals <- img_smooth[30:32, 30:32, 20] cat(\"Original variance:\", var(as.vector(orig_vals)), \"\\n\") #> Original variance: 0 cat(\"Smoothed variance:\", var(as.vector(smooth_vals)), \"\\n\") #> Smoothed variance: 0"},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/Overview.html","id":"resampling","dir":"Articles","previous_headings":"Spatial Filtering and Processing","what":"Resampling","title":"Overview: Getting Started with neuroim2","text":"","code":"# Downsample by factor of 2 img_down <- downsample(img, c(2, 2, 2)) cat(\"Original dimensions:\", dim(img), \"\\n\") #> Original dimensions: 64 64 25 cat(\"Downsampled dimensions:\", dim(img_down), \"\\n\") #> Downsampled dimensions: 112 112 46"},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/Overview.html","id":"clusteredneurovol-for-atlas-based-analysis","dir":"Articles","previous_headings":"Working with Parcellations","what":"ClusteredNeuroVol for Atlas-Based Analysis","title":"Overview: Getting Started with neuroim2","text":"","code":"# Create a simple parcellation coords <- index_to_coord(img, which(as.logical(img))) set.seed(123) k <- 10  # 10 parcels if (nrow(coords) > k) {   km <- kmeans(coords, centers = k, iter.max = 100)      # Create clustered volume   cvol <- ClusteredNeuroVol(img, km$cluster)   cat(\"Created\", num_clusters(cvol), \"parcels\\n\")      # Get centroids of each parcel   centers <- centroids(cvol)   cat(\"First parcel centroid:\", round(centers[1,], 1), \"mm\\n\") } #> Created 10 parcels #> First parcel centroid: 41.3 26.2 18.8 mm"},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/Overview.html","id":"reading-and-writing","dir":"Articles","previous_headings":"Input/Output Operations","what":"Reading and Writing","title":"Overview: Getting Started with neuroim2","text":"","code":"# Write a volume to a temporary file tmp_file <- tempfile(fileext = \".nii.gz\") write_vol(img, tmp_file) cat(\"Wrote volume to:\", tmp_file, \"\\n\") #> Wrote volume to: /tmp/Rtmp61TLEh/file2a7c1523f704.nii.gz  # Read it back img_read <- read_vol(tmp_file) cat(\"Read volume with dimensions:\", dim(img_read), \"\\n\") #> Read volume with dimensions: 64 64 25  # Clean up file.remove(tmp_file) #> [1] TRUE"},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/Overview.html","id":"working-with-multiple-files","dir":"Articles","previous_headings":"Input/Output Operations","what":"Working with Multiple Files","title":"Overview: Getting Started with neuroim2","text":"","code":"# Read multiple volumes (not run) files <- c(\"scan1.nii\", \"scan2.nii\", \"scan3.nii\") vols <- read_vec(files)  # Creates a NeuroVecSeq  # Or read as a single concatenated 4D volume vols_list <- lapply(files, read_vol) vec_concat <- vec_from_vols(vols_list)"},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/Overview.html","id":"practical-example-roi-based-time-series-analysis","dir":"Articles","previous_headings":"","what":"Practical Example: ROI-Based Time-Series Analysis","title":"Overview: Getting Started with neuroim2","text":"’s complete workflow combining multiple features:","code":"# Create synthetic fMRI-like data dims_fmri <- c(20, 20, 15, 50)  # Small for example fmri_data <- array(rnorm(prod(dims_fmri), mean = 1000, sd = 50), dims_fmri) fmri <- NeuroVec(fmri_data, NeuroSpace(dims_fmri))  # Define an ROI roi <- spherical_roi(space(fmri), c(10, 10, 8), radius = 3) cat(\"ROI size:\", length(roi), \"voxels\\n\") #> ROI size: 123 voxels  # Extract time-series from ROI roi_ts <- series_roi(fmri, roi) roi_mat <- values(roi_ts)  # T x N matrix cat(\"ROI time-series matrix:\", dim(roi_mat), \"\\n\") #> ROI time-series matrix: 50 123  # Compute mean time-series mean_ts <- rowMeans(roi_mat)  # Z-score the mean time-series z_ts <- as.numeric(base::scale(mean_ts)) cat(\"Mean time-series - Mean:\", round(mean(z_ts), 4),      \"SD:\", round(sd(z_ts), 4), \"\\n\") #> Mean time-series - Mean: 0 SD: 1  # Find peak activation time peak_time <- which.max(z_ts) cat(\"Peak activation at time point:\", peak_time,      \"with z-score:\", round(z_ts[peak_time], 2), \"\\n\") #> Peak activation at time point: 41 with z-score: 2.16"},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/Overview.html","id":"performance-tips","dir":"Articles","previous_headings":"","what":"Performance Tips","title":"Overview: Getting Started with neuroim2","text":"SparseNeuroVol masks ROIs FileBackedNeuroVec large datasets Regular arrays small--medium data Use spherical_roi_set() instead loops multiple ROIs Process searchlights parallel possible Know output dimensions allocate arrays upfront Use compressed NIfTI (.nii.gz) storage Keep working data uncompressed speed","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/Overview.html","id":"package-documentation","dir":"Articles","previous_headings":"Getting Help","what":"Package Documentation","title":"Overview: Getting Started with neuroim2","text":"","code":"# List all functions help(package = \"neuroim2\")  # Search for specific topics help.search(\"roi\", package = \"neuroim2\")"},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/Overview.html","id":"vignettes-for-deep-dives","dir":"Articles","previous_headings":"Getting Help","what":"Vignettes for Deep Dives","title":"Overview: Getting Started with neuroim2","text":"3D Volumes: vignette(\"ImageVolumes\", package = \"neuroim2\") 4D Time-Series: vignette(\"NeuroVector\", package = \"neuroim2\") ROI Analysis: vignette(\"regionOfInterest\", package = \"neuroim2\") Parcellations: vignette(\"clustered-neurovec\", package = \"neuroim2\") Pipelines: vignette(\"pipelines\", package = \"neuroim2\")","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/Overview.html","id":"quick-reference","dir":"Articles","previous_headings":"Getting Help","what":"Quick Reference","title":"Overview: Getting Started with neuroim2","text":"Common operations glance:","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/Overview.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Overview: Getting Started with neuroim2","text":"neuroim2 provides comprehensive toolkit neuroimaging analysis R. efficient data structures, flexible ROI tools, memory-conscious design make suitable interactive exploration large-scale processing pipelines. Start basic NeuroVol NeuroVec classes, explore ROI creation specific needs, leverage sparse file-backed arrays working large datasets. advanced usage specific workflows, consult topic-specific vignettes listed .","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/clustered-neurovec.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"ClusteredNeuroVec: Parcel-based 4D Analysis","text":"ClusteredNeuroVec provides efficient representation parcellated 4D neuroimaging data voxels grouped clusters parcels. Instead storing time-series every voxel, stores one time-series per cluster, making ideal analyses using brain atlases like Schaefer-Yeo parcellations.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/clustered-neurovec.html","id":"why-clusteredneurovec","dir":"Articles","previous_headings":"","what":"Why ClusteredNeuroVec?","title":"ClusteredNeuroVec: Parcel-based 4D Analysis","text":"Traditional neuroimaging analyses often involve: - Reducing voxel-level data parcel/ROI averages - Working brain atlases group voxels regions - Performing searchlight analyses parcel level rather voxel level ClusteredNeuroVec makes workflows efficient maintaining compatibility standard NeuroVec operations.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/clustered-neurovec.html","id":"from-scratch-with-synthetic-data","dir":"Articles","previous_headings":"Creating a ClusteredNeuroVec","what":"From scratch with synthetic data","title":"ClusteredNeuroVec: Parcel-based 4D Analysis","text":"","code":"# Create a simple 3D space with mask space <- NeuroSpace(c(10, 10, 10), spacing = c(2, 2, 2)) mask_data <- array(TRUE, c(10, 10, 10)) mask_data[1:3, 1:3, 1:3] <- FALSE  # exclude corner mask <- LogicalNeuroVol(mask_data, space)  # Create cluster assignments (e.g., 5 random clusters) n_masked <- sum(mask_data) cluster_ids <- sample(1:5, n_masked, replace = TRUE) cvol <- ClusteredNeuroVol(mask, cluster_ids)  # Create synthetic 4D data vec_space <- NeuroSpace(c(10, 10, 10, 20), spacing = c(2, 2, 2)) vec_data <- array(rnorm(10 * 10 * 10 * 20), dim = c(10, 10, 10, 20)) vec <- NeuroVec(vec_data, vec_space)  # Create ClusteredNeuroVec cv <- ClusteredNeuroVec(vec, cvol) print(cv) #> An object of class \"ClusteredNeuroVec\" #> Slot \"cvol\": #>  #> ClusteredNeuroVol  #> ============================================================  #>  #>  > Type:           Clustered Volume  #>  > Dimensions:     10 x 10 x 10  #>  > Spacing:        2 x 2 x 2   mm  #>  > Origin:         0 x 0 x 0   mm  #>  > Orientation:    Left-to-Right Posterior-to-Anterior Inferior-to-Superior  #>  #>  Cluster Information  #> ----------------------------------------  #>  > Total Clusters: 5  #>  > Active Voxels:  973   (97.3% of volume)  #>  #>  Region Labels  #> ----------------------------------------  #>  >  Clus_1               [1]  #>  >  Clus_2               [2]  #>  >  Clus_3               [3]  #>  >  Clus_4               [4]  #>  >  Clus_5               [5]  #>  #>  #> Slot \"ts\": #>                [,1]         [,2]         [,3]         [,4]        [,5] #>  [1,]  0.0644168463 -0.084301352 -0.046590564  0.111690839 -0.07521255 #>  [2,] -0.0279864215 -0.021818397 -0.044582569 -0.007525164  0.01309414 #>  [3,]  0.0262631528 -0.035196733  0.159554421 -0.048727571 -0.04858583 #>  [4,]  0.0378993324 -0.080978924 -0.034763381 -0.060349853 -0.06646839 #>  [5,] -0.0319708019  0.109558719 -0.176797544 -0.009897723  0.10655063 #>  [6,] -0.0002046695 -0.035705472 -0.036876107 -0.040146304  0.05236358 #>  [7,]  0.0240752324 -0.027871858 -0.033004354 -0.107316036 -0.07315611 #>  [8,] -0.0687286683  0.072565018 -0.095327890 -0.007923692  0.17143235 #>  [9,]  0.0206792888 -0.100405135  0.009336791 -0.061652350 -0.07817391 #> [10,]  0.0499251924  0.003524242  0.020157267 -0.103992274 -0.17973242 #> [11,]  0.0267051382  0.117807342 -0.028831174  0.026822052  0.13054961 #> [12,]  0.0469960240 -0.055354028 -0.033206209 -0.029400233  0.11017711 #> [13,] -0.0477317147 -0.080405021  0.058810076  0.026747244 -0.08707542 #> [14,] -0.1547026324 -0.022603680 -0.100271675 -0.098391231 -0.01533914 #> [15,]  0.0109751452 -0.110499389  0.124109837 -0.046273345 -0.04269959 #> [16,] -0.0069828699 -0.001077092  0.124818062 -0.031282976 -0.02555654 #> [17,] -0.0931860378 -0.021331039  0.045485539  0.021581931 -0.08791139 #> [18,] -0.0508247004 -0.097068831  0.021921207 -0.056050307 -0.07664986 #> [19,]  0.0617674592  0.095976977  0.024912108  0.109905432  0.01513277 #> [20,]  0.1178075236  0.042013013  0.018799022 -0.096943955  0.02009452 #>  #> Slot \"cl_map\": #>    [1] 0 0 0 3 3 2 2 3 5 4 0 0 0 1 2 3 5 3 3 1 0 0 0 4 1 1 5 3 2 2 1 3 4 1 3 5 4 #>   [38] 2 5 1 1 2 3 4 5 5 3 1 2 5 5 4 5 2 1 1 3 1 5 1 2 4 4 3 1 2 1 2 4 5 5 3 1 4 #>   [75] 1 1 3 4 1 3 5 3 2 5 5 3 2 2 2 4 2 2 4 4 1 3 3 1 3 5 0 0 0 2 3 2 5 5 3 4 0 #>  [112] 0 0 4 4 5 3 1 2 1 0 0 0 2 5 3 4 4 1 4 1 3 4 3 5 4 4 4 1 2 3 4 3 1 5 5 2 3 #>  [149] 5 1 4 2 4 5 5 5 5 1 2 1 2 5 5 1 2 5 4 2 2 3 1 1 5 5 3 2 5 5 3 3 1 4 2 1 2 #>  [186] 4 5 1 1 1 5 3 1 2 2 1 2 1 5 2 0 0 0 3 5 4 5 2 1 4 0 0 0 2 5 1 5 1 4 3 0 0 #>  [223] 0 1 1 2 4 2 1 5 5 1 1 5 5 2 2 5 1 1 5 5 4 5 5 4 2 5 1 1 2 1 2 5 1 3 2 2 5 #>  [260] 4 1 5 2 5 2 2 4 3 4 3 3 3 5 3 2 3 1 5 1 4 2 2 4 1 4 5 5 3 5 5 3 1 3 4 2 5 #>  [297] 1 4 3 1 2 3 3 1 2 1 2 2 2 5 4 4 5 4 1 2 1 2 3 2 3 1 4 2 3 5 5 3 2 5 4 2 1 #>  [334] 4 1 4 5 4 2 2 4 3 5 2 3 3 3 1 1 3 4 4 5 2 2 4 2 1 4 3 1 5 3 4 2 5 5 2 2 2 #>  [371] 1 3 4 3 3 3 4 4 3 4 2 3 4 2 1 3 4 1 1 4 4 5 1 4 5 3 2 5 4 4 1 3 3 3 5 2 5 #>  [408] 2 1 4 2 2 3 5 1 3 3 2 5 1 4 4 1 3 4 4 1 5 3 4 2 3 2 3 3 1 5 4 4 5 3 2 4 5 #>  [445] 2 3 3 1 3 2 3 3 1 2 2 2 4 1 5 5 3 3 5 1 4 2 5 4 5 1 2 3 1 1 3 2 4 5 3 4 5 #>  [482] 3 1 5 2 4 2 1 5 2 5 1 1 2 4 2 1 1 1 4 1 3 2 1 1 5 5 4 4 4 5 4 1 3 5 4 2 1 #>  [519] 4 1 3 1 3 3 2 3 4 2 1 5 3 4 5 5 4 1 1 4 3 5 2 1 4 4 4 3 2 2 3 5 4 3 3 1 5 #>  [556] 5 1 1 1 5 5 4 2 2 4 2 1 3 5 3 1 2 4 4 1 5 1 4 3 4 5 5 4 3 3 2 5 5 1 3 2 3 #>  [593] 4 2 5 3 3 2 2 4 2 1 4 1 5 2 5 2 2 3 2 3 3 1 1 5 1 5 1 2 1 3 3 4 2 4 3 1 3 #>  [630] 4 2 5 2 1 2 3 3 2 2 4 5 2 3 1 5 3 2 1 4 4 3 1 2 3 1 1 2 2 4 3 2 2 5 1 3 2 #>  [667] 2 4 4 4 5 5 4 4 2 5 2 2 4 5 3 3 2 2 1 3 5 3 5 1 2 4 3 5 5 5 4 3 3 2 2 2 2 #>  [704] 2 3 1 1 1 1 3 1 2 3 4 4 3 4 2 3 4 3 4 5 1 5 4 5 1 1 1 2 2 4 1 2 1 3 3 1 4 #>  [741] 3 5 2 4 2 2 1 1 3 5 5 1 4 2 3 3 2 5 4 1 4 3 5 5 4 5 1 5 4 5 5 5 3 4 5 5 4 #>  [778] 4 3 3 4 1 4 2 2 4 1 1 2 4 5 3 1 3 3 2 4 1 3 5 5 5 2 5 5 1 5 1 2 1 1 2 4 5 #>  [815] 2 2 2 4 5 2 3 1 4 3 3 3 2 4 4 2 3 1 4 1 1 4 3 5 2 5 2 4 2 2 4 4 1 3 1 3 3 #>  [852] 3 5 2 1 5 3 3 3 3 1 3 3 2 5 5 2 5 2 3 1 3 3 5 5 2 4 3 5 1 1 5 3 2 5 4 1 5 #>  [889] 5 1 1 5 4 5 4 5 5 1 2 5 1 5 4 3 4 3 1 1 1 5 1 4 5 2 1 4 5 3 1 4 4 1 1 3 4 #>  [926] 5 1 1 5 3 4 3 2 2 4 3 2 4 4 5 5 1 5 3 2 1 1 3 2 2 3 5 5 5 4 1 2 4 5 2 4 1 #>  [963] 5 4 5 2 5 4 1 2 2 2 5 5 3 2 2 3 3 3 4 1 5 2 1 1 1 5 1 2 4 2 5 2 2 5 4 3 5 #> [1000] 3 #>  #> Slot \"label\": #> [1] \"\" #>  #> Slot \"space\": #>  #>  NeuroSpace Object  #>  #>  >> Dimensions  #>   Grid Size: 10 x 10 x 10 x 20 #>   Memory:   5.9 KB #>  #>  >> Spatial Properties  #>   Spacing:   2.00 x 2.00 x 2.00 mm #>   Origin:    0.00 x 0.00 x 0.00 mm #>  #>  >> Anatomical Orientation  #>   X: Left-to-Right  |  Y: Posterior-to-Anterior  |  Z: Inferior-to-Superior  #>  #>  >> World Transformation  #>   Forward (Voxel to World):  #>     2.000  0.000  0.000  0.000 #> 0.000  2.000  0.000  0.000 #> 0.000  0.000  2.000  0.000 #> 0.000  0.000  0.000  1.000  #>   Inverse (World to Voxel):  #>     0.500  0.000  0.000  0.000 #> 0.000  0.500  0.000  0.000 #> 0.000  0.000  0.500  0.000 #> 0.000  0.000  0.000  1.000  #>  #>  >> Bounding Box  #>   Min Corner: 0.0, 0.0, 0.0 mm #>   Max Corner: 18.0, 18.0, 18.0 mm #>  #> =================================================="},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/clustered-neurovec.html","id":"key-properties","dir":"Articles","previous_headings":"Creating a ClusteredNeuroVec","what":"Key properties","title":"ClusteredNeuroVec: Parcel-based 4D Analysis","text":"","code":"# Dimensions: still 4D (x, y, z, time) dim(cv) #> [1] 10 10 10 20  # Number of clusters num_clusters(cv) #> [1] 5  # Access cluster time-series matrix (T x K) ts_matrix <- as.matrix(cv, by = \"cluster\") dim(ts_matrix)  # 20 time points x 5 clusters #> [1] 20  5"},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/clustered-neurovec.html","id":"array-like-access","dir":"Articles","previous_headings":"","what":"Array-like access","title":"ClusteredNeuroVec: Parcel-based 4D Analysis","text":"ClusteredNeuroVec behaves like regular 4D array:","code":"# Extract 3D volume at time point 1 vol_t1 <- cv[,,,1] dim(vol_t1)  # 10 x 10 x 10 #> [1] 10 10 10  # All voxels in the same cluster have the same value # (they share the cluster's mean time-series)  # Get time-series at a specific voxel ts <- series(cv, 5, 5, 5) length(ts)  # 20 time points #> [1] 20"},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/clustered-neurovec.html","id":"cluster-searchlight-analysis","dir":"Articles","previous_headings":"","what":"Cluster searchlight analysis","title":"ClusteredNeuroVec: Parcel-based 4D Analysis","text":"Perform searchlight analysis cluster level using centroid distances:","code":"# K-nearest neighbor searchlight (10 nearest clusters) windows_knn <- cluster_searchlight_series(cv, k = 10) length(windows_knn)  # One window per cluster #> [1] 5  # Look at first window win1 <- windows_knn[[1]] dim(values(win1))  # 10 neighbors x 20 time points #> [1] 20  5  # Radius-based searchlight (e.g., 15mm radius) windows_radius <- cluster_searchlight_series(cv, radius = 15)"},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/clustered-neurovec.html","id":"real-world-example-schaefer-parcellation","dir":"Articles","previous_headings":"","what":"Real-world example: Schaefer parcellation","title":"ClusteredNeuroVec: Parcel-based 4D Analysis","text":"","code":"# Load fMRI data fmri_data <- read_vec(\"subject01_task.nii.gz\")  # Load Schaefer atlas (example with 400 parcels) atlas <- read_vol(\"Schaefer2018_400Parcels_7Networks.nii.gz\") mask <- atlas > 0  # Create ClusteredNeuroVol from atlas cvol <- ClusteredNeuroVol(mask, as.integer(atlas[mask]))  # Create parcellated representation cv <- ClusteredNeuroVec(fmri_data, cvol)  # Now you have 400 time-series (one per parcel) instead of ~200,000 voxels parcels <- as.matrix(cv, by = \"cluster\") dim(parcels)  # T x 400  # Perform connectivity analysis at parcel level cor_matrix <- cor(parcels) dim(cor_matrix)  # 400 x 400"},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/clustered-neurovec.html","id":"integration-with-existing-workflows","dir":"Articles","previous_headings":"","what":"Integration with existing workflows","title":"ClusteredNeuroVec: Parcel-based 4D Analysis","text":"ClusteredNeuroVec integrates seamlessly existing neuroim2 functions:","code":"# Use with split_reduce for custom aggregation # (ClusteredNeuroVec already uses this internally)  # Scale time-series within each cluster # (if scale_series is implemented for ClusteredNeuroVec) # cv_scaled <- scale_series(cv, center = TRUE, scale = TRUE)  # Get cluster centroids for visualization centers <- centroids(cv) head(centers)  # x, y, z coordinates #>          [,1]     [,2]     [,3] #> [1,] 5.783920 5.356784 5.522613 #> [2,] 5.495050 5.544554 5.579208 #> [3,] 5.406250 5.588542 5.604167 #> [4,] 5.683333 5.600000 5.638889 #> [5,] 5.620000 5.895000 5.645000"},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/clustered-neurovec.html","id":"performance-benefits","dir":"Articles","previous_headings":"","what":"Performance benefits","title":"ClusteredNeuroVec: Parcel-based 4D Analysis","text":"storing K time-series instead N voxels: - Memory usage: O(K × T) instead O(N × T) - Searchlight operations: O(K²) instead O(N²) - Typical reduction: 100-1000x fewer time-series typical fMRI dataset: - Voxel-level: ~200,000 voxels × 500 timepoints = 100M values - Parcel-level: 400 parcels × 500 timepoints = 200K values","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/clustered-neurovec.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"ClusteredNeuroVec: Parcel-based 4D Analysis","text":"ClusteredNeuroVec provides: - Efficient storage parcellated 4D data - Full array-like access semantics - Cluster-aware searchlight operations - Seamless integration existing neuroim2 workflows ’s ideal : - Atlas-based analyses - Connectivity studies - Parcellated machine learning - workflow aggregates voxels regions","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/elegant-slice-visualization.html","id":"why-these-helpers","dir":"Articles","previous_headings":"","what":"Why these helpers?","title":"Elegant slice visualization with neuroim2","text":"Neuroimaging images large, orientation‑sensitive rasters. goal helpers make good defaults shortest path: perceptually uniform palettes, robust scaling, fixed aspect ratios, clean legends—without new heavy dependencies JavaScript. vignette shows : Build publication‑ready montages Create compact orthogonal (three‑plane) view crosshairs Overlay statistical map structural background (threshold + alpha) helpers used : resolve_cmap(), scale_fill_neuro(), theme_neuro() plot_montage(), plot_ortho(), plot_overlay() annotate_orientation()","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/elegant-slice-visualization.html","id":"getting-a-demo-volume","dir":"Articles","previous_headings":"","what":"Getting a demo volume","title":"Elegant slice visualization with neuroim2","text":"examples try read sample NIfTI included package. available, create small synthetic 3D volume wrap NeuroVol. Either way, rest code identical.","code":"set.seed(1)  make_synthetic_vol <- function(dims = c(96, 96, 72), vox = c(2, 2, 2)) {   i <- array(rep(seq_len(dims[1]), times = dims[2]*dims[3]), dims)   j <- array(rep(rep(seq_len(dims[2]), each = dims[1]), times = dims[3]), dims)   k <- array(rep(seq_len(dims[3]), each = dims[1]*dims[2]), dims)    c0 <- dims / 2   g1 <- exp(-((i - c0[1])^2 + (j - c0[2])^2 + (k - c0[3])^2) / (2*(min(dims)/4)^2))   g2 <- 0.5 * exp(-((i - (c0[1] + 15))^2 + (j - (c0[2] - 10))^2 + (k - (c0[3] + 8))^2) / (2*(min(dims)/6)^2))   x  <- g1 + g2 + 0.05 * array(stats::rnorm(prod(dims)), dims)    sp <- NeuroSpace(dims, spacing = vox)   NeuroVol(x, sp) }  # Prefer an included demo file. Use a real example from inst/extdata. demo_path <- system.file(\"extdata\", \"global_mask_v4.nii\", package = \"neuroim2\")  t1 <- if (nzchar(demo_path)) {   read_vol(demo_path) } else {   make_synthetic_vol() }  dims <- dim(t1)  # Build a synthetic \"z-statistic\" overlay matched to t1's dims mk_blob <- function(mu, sigma = 8) {   i <- array(rep(seq_len(dims[1]), times = dims[2]*dims[3]), dims)   j <- array(rep(rep(seq_len(dims[2]), each = dims[1]), times = dims[3]), dims)   k <- array(rep(seq_len(dims[3]), each = dims[1]*dims[2]), dims)   exp(-((i - mu[1])^2 + (j - mu[2])^2 + (k - mu[3])^2) / (2*sigma^2)) } ov_arr <- 3.5 * mk_blob(mu = round(dims * c(.60, .45, .55)), sigma = 7) -           3.2 * mk_blob(mu = round(dims * c(.35, .72, .40)), sigma = 6) +           0.3 * array(stats::rnorm(prod(dims)), dims)  overlay <- NeuroVol(ov_arr, space(t1))"},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/elegant-slice-visualization.html","id":"montages-that-read-well-at-a-glance","dir":"Articles","previous_headings":"","what":"1) Montages that read well at a glance","title":"Elegant slice visualization with neuroim2","text":"montage helper facettes single ggplot object—get shared colorbar, clean panel labels, proper aspect ratio.  Notes range = \"robust\" uses quantiles (default 2–98%) ignore outliers. coord_fixed() + reversed y handled internally preserve geometry radiological convention. Use downsample = 2 (higher) plotting huge volumes interactively.","code":"# Choose a sensible set of axial slices zlevels <- unique(round(seq( round(dims[3]*.25), round(dims[3]*.85), length.out = 12 )))  p <- plot_montage(   t1, zlevels = zlevels, along = 3,   cmap = \"grays\", range = \"robust\", probs = c(.02, .98),   ncol = 6, title = \"Axial montage (robust scaling)\" ) p + theme_neuro() plot_montage(   t1, zlevels = zlevels, along = 3,   cmap = \"grays\", range = \"robust\", ncol = 6, downsample = 2,   title = \"Downsampled montage (for speed)\" )"},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/elegant-slice-visualization.html","id":"orthogonal-threeplane-view-with-crosshairs","dir":"Articles","previous_headings":"","what":"2) Orthogonal three‑plane view (with crosshairs)","title":"Elegant slice visualization with neuroim2","text":"plot_ortho() produces aligned sagittal, coronal, axial slices shared scale, optional crosshairs, compact orientation glyphs.  Tip: MNI/world coordinates, pass unit = \"mm\" length‑3 numeric; internally convert using coord_to_grid(space(vol), …) available.","code":"center_voxel <- round(dim(t1) / 2) plot_ortho(   t1, coord = center_voxel, unit = \"index\",   cmap = \"grays\", range = \"robust\",   crosshair = TRUE, annotate = TRUE )"},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/elegant-slice-visualization.html","id":"overlaying-an-activation-map-on-a-structural-background","dir":"Articles","previous_headings":"","what":"3) Overlaying an activation map on a structural background","title":"Elegant slice visualization with neuroim2","text":"overlay compositor colorizes layer independently (can use limits palette) stacks rasters. extra packages required.","code":"plot_overlay(   bgvol = t1, overlay = overlay,   zlevels = zlevels[seq(2, length(zlevels), by = 2)],  # fewer panels for the vignette   bg_cmap = \"grays\", ov_cmap = \"inferno\",   bg_range = \"robust\", ov_range = \"robust\", probs = c(.02, .98),   ov_thresh = 2.5,   # make weaker signal transparent   ov_alpha  = 0.65,   ncol = 3, title = \"Statistical overlay (threshold 2.5, alpha 0.65)\" )"},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/elegant-slice-visualization.html","id":"palettes-and-aesthetics","dir":"Articles","previous_headings":"","what":"4) Palettes and aesthetics","title":"Elegant slice visualization with neuroim2","text":"examples use neuro‑friendly defaults: Palettes: resolve_cmap() wraps base R’s hcl.colors() aliases like “grays”, “viridis”, “inferno”—safe fallbacks. Theme: theme_neuro() keeps panels quiet legends slim. Legend: one shared colorbar facetted montages via scale_fill_neuro(). can switch palettes easily:","code":"plot_montage(   t1, zlevels = zlevels[1:6], along = 3,   cmap = \"viridis\", range = \"robust\", ncol = 6,   title = \"Same data, Viridis palette\" )"},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/elegant-slice-visualization.html","id":"practical-tips","dir":"Articles","previous_headings":"","what":"5) Practical tips","title":"Elegant slice visualization with neuroim2","text":"Choose slices meaning. Use mm positions (affine) meaningful indices; label strips handled helper. Speed vs. fidelity. Use downsample exploration; keep downsample = 1 final figures. Consistent limits. side‑‑side comparisons, compute limits combined set values (helpers orthogonal panels automatically).","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/elegant-slice-visualization.html","id":"reproducibility","dir":"Articles","previous_headings":"","what":"Reproducibility","title":"Elegant slice visualization with neuroim2","text":"","code":"sessionInfo() ## R version 4.5.1 (2025-06-13) ## Platform: x86_64-pc-linux-gnu ## Running under: Ubuntu 24.04.3 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.26.so;  LAPACK version 3.12.0 ##  ## locale: ##  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        ##  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    ##  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           ## [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    ##  ## time zone: UTC ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] stats     graphics  grDevices utils     datasets  methods   base      ##  ## other attached packages: ## [1] neuroim2_0.8.2 Matrix_1.7-3   ggplot2_3.5.2  ##  ## loaded via a namespace (and not attached): ##  [1] generics_0.1.4        sass_0.4.10           mmap_0.6-22           ##  [4] stringi_1.8.7         lattice_0.22-7        digest_0.6.37         ##  [7] magrittr_2.0.3        bigstatsr_1.6.2       evaluate_1.0.5        ## [10] grid_4.5.1            RColorBrewer_1.1-3    iterators_1.0.14      ## [13] rmio_0.4.0            fastmap_1.2.0         foreach_1.5.2         ## [16] doParallel_1.0.17     jsonlite_2.0.0        RNifti_1.8.0          ## [19] purrr_1.1.0           deflist_0.2.0         scales_1.4.0          ## [22] codetools_0.2-20      textshaping_1.0.1     jquerylib_0.1.4       ## [25] cli_3.6.5             rlang_1.1.6           crayon_1.5.3          ## [28] cowplot_1.2.0         splines_4.5.1         withr_3.0.2           ## [31] cachem_1.1.0          yaml_2.3.10           flock_0.7             ## [34] tools_4.5.1           parallel_4.5.1        memoise_2.0.1         ## [37] bigassertr_0.1.7      assertthat_0.2.1      vctrs_0.6.5           ## [40] R6_2.6.1              lifecycle_1.0.4       bigparallelr_0.3.2    ## [43] stringr_1.5.1         dbscan_1.2.3          fs_1.6.6              ## [46] ragg_1.4.0            pkgconfig_2.0.3       desc_1.4.3            ## [49] pkgdown_2.1.3         RcppParallel_5.1.11-1 pillar_1.11.0         ## [52] bslib_0.9.0           gtable_0.3.6          glue_1.8.0            ## [55] Rcpp_1.1.0            systemfonts_1.2.3     xfun_0.53             ## [58] tibble_3.3.0          knitr_1.50            farver_2.1.2          ## [61] htmltools_0.5.8.1     labeling_0.4.3        RNiftyReg_2.8.4       ## [64] rmarkdown_2.29        compiler_4.5.1"},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/pipelines.html","id":"pipelining-operations-using-a-functional-approach","dir":"Articles","previous_headings":"","what":"Pipelining operations using a functional approach","title":"Pipelines: Split, Map, and Reduce","text":"neuroim2 packages provides set functions allows one split image data various ways processing data split parts. breaking dataset pieces, can also easily parallelize certain operations.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/pipelines.html","id":"splitting-an-image-into-connected-components","dir":"Articles","previous_headings":"Pipelining operations using a functional approach","what":"Splitting an image into connected components","title":"Pipelines: Split, Map, and Reduce","text":"First load example volume, assign random values, find connected components threshold .9  Now want find average value connected components using split_clusters function. Since conn_comp returns ClusteredNeuroVol containing cluster indices, use split original volume list ROIVols compute mean one. Suppose want compute local standard deviation within 4mm radius voxel. can use searchlight function construct list spherical ROIs centered every voxel input set.  Another thing might compute k nearest neighbors searchlight replace center voxel average intensity neighbors:  need access searchlight coordinates (voxel space), can use searchlight_coords function. , simply replace center voxel average neighbors searchlight space:","code":"library(purrr)       library(ggplot2)       file_name <- system.file(\"extdata\", \"global_mask_v4.nii\", package=\"neuroim2\")       vol <- read_vol(file_name)       mask.idx <- which(vol>0)              vol2 <- vol       vol2[mask.idx] <- runif(length(mask.idx))       comp <- conn_comp(vol2, threshold=.8)              plot(comp$index, zlevels=seq(1,25,by=3), cmap=rainbow(255)) mvals <- vol2 %>% split_clusters(comp$index) %>% map_dbl( ~ mean(.)) sdvol <- vol %>% searchlight(radius=5, eager=TRUE) %>% map_dbl( ~ sd(values(.)))  sdvol <- NeuroVol(sdvol, space=space(vol), indices=which(vol!=0)) plot(sdvol, cmap=rainbow(255)) k <- 12 knnfvol <- vol2 %>% searchlight(radius=6, eager=TRUE) %>% map_dbl(function(x) {   # Just compute mean of all values in the searchlight   mean(values(x)) }) %>% NeuroVol(space=space(vol), indices=which(vol!=0)) plot(knnfvol, cmap=rainbow(255)) avgvol <- vol %>% searchlight_coords(radius=12, nonzero=TRUE) %>% map_dbl(function(x) {   vals <- vol[x]   mean(vals[vals!=0]) }) %>% NeuroVol(space=space(vol), indices=which(vol!=0)) plot(avgvol, cmap=rainbow(2), zlevels=seq(1,25,by=3))"},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/pipelines.html","id":"mapping-a-function-over-every-slice-of-a-neurovol","dir":"Articles","previous_headings":"Pipelining operations using a functional approach","what":"Mapping a function over every slice of a NeuroVol","title":"Pipelines: Split, Map, and Reduce","text":"Suppose want split image volume slice apply function slice. can use slices function achieve follows:","code":"slice_means <- vol %>% slices %>% map_dbl(~ mean(.)) plot(slice_means, type='l', ylab=\"mean intensity\", xlab=\"slice number\")"},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/pipelines.html","id":"mapping-a-function-over-each-volume-of-a-neurovec-object","dir":"Articles","previous_headings":"Pipelining operations using a functional approach","what":"Mapping a function over each volume of a NeuroVec object","title":"Pipelines: Split, Map, and Reduce","text":"","code":"vec <- concat(vol,vol,vol,vol,vol) vec #>  #> DenseNeuroVec (3.91 bytes MB) #>  #> - Spatial Info --------------------------- #> | Dimensions    : 64 x 64 x 25 (5 timepoints) #> | Total Voxels  : 102,400 #> | Spacing       : 3.5 x 3.5 x 3.7 #>  #> - Properties --------------------------- #> | Origin        : 112 x -108 x -46.2 #> | Orientation   : Right-to-Left Posterior-to-Anterior Inferior-to-Superior #>  #> - Statistics --------------------------- #>     Mean +/- SD    : 0.288 +/- 0.453 #>  #> Label: none mean_vec <- vec %>% vols %>% map_dbl(~ mean(.)) sd_vec <- vec %>% vols %>% map_dbl(~ sd(.)) assert_that(length(mean_vec) == dim(vec)[4]) #> [1] TRUE assert_that(length(sd_vec) == dim(vec)[4]) #> [1] TRUE"},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/pipelines.html","id":"mapping-a-function-over-each-vector-of-a-neurovec-object","dir":"Articles","previous_headings":"Pipelining operations using a functional approach","what":"Mapping a function over each vector of a NeuroVec object","title":"Pipelines: Split, Map, and Reduce","text":"","code":"vec <- concat(vol,vol,vol,vol,vol) vec #>  #> DenseNeuroVec (3.91 bytes MB) #>  #> - Spatial Info --------------------------- #> | Dimensions    : 64 x 64 x 25 (5 timepoints) #> | Total Voxels  : 102,400 #> | Spacing       : 3.5 x 3.5 x 3.7 #>  #> - Properties --------------------------- #> | Origin        : 112 x -108 x -46.2 #> | Orientation   : Right-to-Left Posterior-to-Anterior Inferior-to-Superior #>  #> - Statistics --------------------------- #>     Mean +/- SD    : 0.288 +/- 0.453 #>  #> Label: none mean_vol <- vec %>% vectors() %>% map_dbl(~ mean(.)) %>% NeuroVol(., space=space(vol)) assert_that(all(dim(mean_vol) == dim(vol))) #> [1] TRUE"},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/regionOfInterest.html","id":"what-are-rois","dir":"Articles","previous_headings":"Introduction to Regions of Interest","what":"What are ROIs?","title":"Regions of Interest (ROI)","text":"Regions Interest (ROIs) fundamental tools neuroimaging analysis allow researchers focus specific brain areas patterns. Rather analyzing every voxel brain independently, ROIs enable: Targeted analysis anatomically functionally defined brain regions Dimensionality reduction aggregating signals within regions Statistical power improvement spatial averaging Hypothesis-driven investigations specific brain areas","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/regionOfInterest.html","id":"roi-types-in-neuroim2","dir":"Articles","previous_headings":"Introduction to Regions of Interest","what":"ROI Types in neuroim2","title":"Regions of Interest (ROI)","text":"neuroim2 package provides comprehensive support creating manipulating ROIs:","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/regionOfInterest.html","id":"quick-start","dir":"Articles","previous_headings":"Introduction to Regions of Interest","what":"Quick Start","title":"Regions of Interest (ROI)","text":"","code":"# Load the package library(neuroim2)  # Read a brain volume file_name <- system.file(\"extdata\", \"global_mask2.nii.gz\", package=\"neuroim2\") vol <- read_vol(file_name)  # Create a simple spherical ROI roi <- spherical_roi(vol, c(20, 20, 20), radius = 5) cat(\"ROI contains\", length(roi), \"voxels\\n\") #> ROI contains 11 voxels"},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/regionOfInterest.html","id":"creating-a-spherical-roi","dir":"Articles","previous_headings":"Basic ROI Operations","what":"Creating a Spherical ROI","title":"Regions of Interest (ROI)","text":"Spherical ROIs commonly used type neuroimaging. ’re particularly useful searchlight analyses seed-based connectivity studies.","code":"# Load an example brain volume file_name <- system.file(\"extdata\", \"global_mask2.nii.gz\", package=\"neuroim2\") vol <- read_vol(file_name)  # Create a spherical ROI centered at voxel coordinates [20,20,20] # with a 5mm radius, filling all values with 100 sphere <- spherical_roi(vol, c(20, 20, 20), radius = 5, fill = 100)  # Examine the ROI cat(\"Number of voxels in ROI:\", length(sphere), \"\\n\") #> Number of voxels in ROI: 11 cat(\"ROI dimensions:\", dim(sphere), \"\\n\") #> ROI dimensions: 11 3 cat(\"All values are 100:\", all(sphere == 100), \"\\n\") #> All values are 100: TRUE"},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/regionOfInterest.html","id":"performance-note-c-vs-pure-r-implementation","dir":"Articles","previous_headings":"Basic ROI Operations > Creating a Spherical ROI","what":"Performance Note: C++ vs Pure R Implementation","title":"Regions of Interest (ROI)","text":"","code":"# The spherical_roi function can use either C++ (fast) or pure R (slower) # C++ is the default and recommended for performance sphere_cpp <- spherical_roi(vol, c(20, 20, 20), radius = 5, use_cpp = TRUE) sphere_r <- spherical_roi(vol, c(20, 20, 20), radius = 5, use_cpp = FALSE)  # Both produce the same result identical(coords(sphere_cpp), coords(sphere_r)) #> [1] FALSE"},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/regionOfInterest.html","id":"creating-a-spherical-roi-around-real-world-coordinates","dir":"Articles","previous_headings":"Basic ROI Operations","what":"Creating a Spherical ROI Around Real-World Coordinates","title":"Regions of Interest (ROI)","text":"Often, ’ll coordinates millimeter space (e.g., published studies) rather voxel indices.","code":"# Define a real-world coordinate in mm rpoint <- c(-34, -28, 10)  # Convert real-world coordinates to voxel coordinates vox <- coord_to_grid(vol, rpoint) cat(\"Real coordinate:\", rpoint, \"-> Voxel coordinate:\", vox, \"\\n\") #> Real coordinate: -34 -28 10 -> Voxel coordinate: 42.71428 24.00001 16.2027  # Create spherical ROI with 10mm radius sphere <- spherical_roi(vol, vox, radius = 10, fill = 1) cat(\"ROI contains\", length(sphere), \"voxels\\n\") #> ROI contains 85 voxels  # Verify the center of mass is close to our target coords <- index_to_coord(vol, indices(sphere)) center_of_mass <- colMeans(coords) cat(\"Center of mass:\", center_of_mass, \"\\n\") #> Center of mass: -36.75 -22.75 14.8 cat(\"Original point:\", rpoint, \"\\n\") #> Original point: -34 -28 10"},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/regionOfInterest.html","id":"creating-multiple-spherical-rois-efficiently","dir":"Articles","previous_headings":"Basic ROI Operations","what":"Creating Multiple Spherical ROIs Efficiently","title":"Regions of Interest (ROI)","text":"creating many ROIs, use vectorized spherical_roi_set() function better performance:","code":"library(neuroim2) vol <- read_vol(system.file(\"extdata\", \"global_mask_v4.nii\", package = \"neuroim2\")) d <- dim(vol)  # Define multiple ROI centers centers <- rbind(   c(floor(d[1]/3), floor(d[2]/3), floor(d[3]/3)),   c(floor(d[1]/2), floor(d[2]/2), floor(d[3]/2)),   c(floor(2*d[1]/3), floor(2*d[2]/3), floor(2*d[3]/3)) )  # Efficient vectorized creation rois <- spherical_roi_set(bvol = vol, centroids = centers, radius = 5, fill = 1) cat(\"Created\", length(rois), \"ROIs\\n\") #> Created 3 ROIs  # Compare with loop approach (slower but equivalent) rois2 <- lapply(seq_len(nrow(centers)), function(i) {   spherical_roi(vol, centers[i,], 5, fill = 1) }) cat(\"Loop method also created\", length(rois2), \"ROIs\\n\") #> Loop method also created 3 ROIs"},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/regionOfInterest.html","id":"cuboid-rois-3d-boxes","dir":"Articles","previous_headings":"Basic ROI Operations > Creating Cuboid and Square ROIs","what":"Cuboid ROIs (3D boxes)","title":"Regions of Interest (ROI)","text":"","code":"# Create a cuboid ROI - a 3D rectangular box sp1 <- NeuroSpace(c(20, 20, 20), c(1, 1, 1))  # Create a 7x7x7 cube (surround=3 means 3 voxels on each side of center) cube <- cuboid_roi(sp1, c(10, 10, 10), surround = 3, fill = 5) cat(\"Cuboid ROI contains\", length(cube), \"voxels\\n\") #> Cuboid ROI contains 343 voxels cat(\"All values are 5:\", all(cube == 5), \"\\n\") #> All values are 5: TRUE  # Get the coordinates vox_coords <- coords(cube) cat(\"Coordinate ranges:\\n\") #> Coordinate ranges: cat(\"  X:\", range(vox_coords[,1]), \"\\n\") #>   X: 7 13 cat(\"  Y:\", range(vox_coords[,2]), \"\\n\") #>   Y: 7 13 cat(\"  Z:\", range(vox_coords[,3]), \"\\n\") #>   Z: 7 13"},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/regionOfInterest.html","id":"square-rois-2d-in-3d-space","dir":"Articles","previous_headings":"Basic ROI Operations > Creating Cuboid and Square ROIs","what":"Square ROIs (2D in 3D space)","title":"Regions of Interest (ROI)","text":"","code":"# Create a square ROI - a 2D square fixed in one dimension sp1 <- NeuroSpace(c(20, 20, 20), c(1, 1, 1))  # Create a 5x5 square in the z=10 plane (fixdim=3 fixes the z dimension) square <- square_roi(sp1, c(10, 10, 10), surround = 2, fill = 3, fixdim = 3) cat(\"Square ROI contains\", length(square), \"voxels (should be 25)\\n\") #> Square ROI contains 25 voxels (should be 25)  # Verify it's planar vox_coords <- coords(square) cat(\"All z-coordinates are the same:\",      length(unique(vox_coords[,3])) == 1, \"\\n\") #> All z-coordinates are the same: TRUE cat(\"Z-plane:\", unique(vox_coords[,3]), \"\\n\") #> Z-plane: 10"},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/regionOfInterest.html","id":"converting-rois-to-sparse-volumes","dir":"Articles","previous_headings":"Working with ROI Data","what":"Converting ROIs to Sparse Volumes","title":"Regions of Interest (ROI)","text":"Sparse volumes memory-efficient representations store non-zero values:","code":"# Create a spherical ROI sphere <- spherical_roi(vol, c(50, 10, 10), radius = 10, fill = 1) cat(\"ROI contains\", length(sphere), \"voxels\\n\") #> ROI contains 85 voxels  # Convert to SparseNeuroVol - memory efficient storage # Prefer the provided coercion helper sparsevol <- as.sparse(sphere)  # Verify properties cat(\"Sum of values match:\", sum(sparsevol) == sum(sphere), \"\\n\") #> Sum of values match: TRUE cat(\"Dimensions match:\", all(dim(sparsevol) == dim(vol)), \"\\n\") #> Dimensions match: TRUE  # Memory comparison roi_size <- object.size(sphere) sparse_size <- object.size(sparsevol) cat(\"Memory usage - ROI:\", format(roi_size, units = \"auto\"), \"\\n\") #> Memory usage - ROI: 9.8 Kb cat(\"Memory usage - Sparse:\", format(sparse_size, units = \"auto\"), \"\\n\") #> Memory usage - Sparse: 8.9 Kb"},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/regionOfInterest.html","id":"extracting-time-series-from-rois-4d-data","dir":"Articles","previous_headings":"Working with ROI Data","what":"Extracting Time-Series from ROIs (4D Data)","title":"Regions of Interest (ROI)","text":"ROIs particularly useful extracting time-series 4D functional data:","code":"# Load a 4D dataset (using mask file as example - normally this would be fMRI data) vec4d <- read_vec(system.file(\"extdata\", \"global_mask_v4.nii\", package = \"neuroim2\")) cat(\"4D data dimensions:\", dim(vec4d), \"\\n\") #> 4D data dimensions: 64 64 25 4  # Create an ROI roi <- spherical_roi(vol, c(12, 12, 12), radius = 6)  # Extract time-series from the ROI roi_series <- series_roi(vec4d, roi) cat(\"ROI time-series dimensions:\", dim(roi_series), \"\\n\") #> ROI time-series dimensions: 19 3  # Get mean time-series across ROI (average across voxels) mat_roi <- values(roi_series)      # T x N matrix mean_series <- rowMeans(mat_roi)   # length equals time dimension cat(\"Mean time-series length:\", length(mean_series), \"\\n\") #> Mean time-series length: 4"},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/regionOfInterest.html","id":"using-roivec-for-4d-roi-data","dir":"Articles","previous_headings":"Working with ROI Data","what":"Using ROIVec for 4D ROI Data","title":"Regions of Interest (ROI)","text":"ROIVec class designed efficient storage 4D ROI data:","code":"# Create a 4D NeuroSpace vspace <- NeuroSpace(dim = c(10, 10, 10, 20), spacing = c(1, 1, 1))  # Define ROI coordinates roi_coords <- matrix(c(5,5,5, 6,5,5, 5,6,5, 5,5,6), ncol = 3, byrow = TRUE)  # Create synthetic time-series data for each voxel n_timepoints <- 20 n_voxels <- nrow(roi_coords) roi_data <- matrix(rnorm(n_timepoints * n_voxels),                     nrow = n_timepoints, ncol = n_voxels)  # Create ROIVec object roi_vec <- ROIVec(vspace, roi_coords, roi_data) cat(\"ROIVec created with\", nrow(roi_coords), \"voxels and\",      nrow(roi_data), \"timepoints\\n\") #> ROIVec created with 4 voxels and 20 timepoints  # Access as matrix of values (T x N) roi_matrix <- values(roi_vec) cat(\"Matrix dimensions (T x N):\", dim(roi_matrix), \"\\n\") #> Matrix dimensions (T x N): 20 4"},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/regionOfInterest.html","id":"searchlight-analyses","dir":"Articles","previous_headings":"","what":"Searchlight Analyses","title":"Regions of Interest (ROI)","text":"Searchlight analysis powerful technique multivariate pattern analysis examines local neighborhoods throughout brain.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/regionOfInterest.html","id":"basic-searchlight","dir":"Articles","previous_headings":"Searchlight Analyses","what":"Basic Searchlight","title":"Regions of Interest (ROI)","text":"","code":"library(purrr)  # Generate exhaustive searchlight covering all voxels slist <- searchlight(vol, eager = TRUE, radius = 8) cat(\"Number of searchlights:\", length(slist), \"\\n\") #> Number of searchlights: 29532  # Compute mean value in each searchlight searchlight_means <- slist %>%    purrr::map_dbl(~ mean(vol[coords(.)]))  cat(\"Computed means for\", length(searchlight_means), \"searchlights\\n\") #> Computed means for 29532 searchlights cat(\"Mean range:\", range(searchlight_means, na.rm = TRUE), \"\\n\") #> Mean range: 0.02040816 1"},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/regionOfInterest.html","id":"randomized-searchlight","dir":"Articles","previous_headings":"Searchlight Analyses","what":"Randomized Searchlight","title":"Regions of Interest (ROI)","text":"Randomized searchlight samples voxels without replacement, ensuring coverage reducing redundancy:","code":"# Randomized searchlight - each voxel appears in at least one searchlight set.seed(42)  # For reproducibility random_lights <- vol %>%    random_searchlight(radius = 8) %>%    purrr::map_dbl(~ mean(vol[coords(.)]))  cat(\"Random searchlight count:\", length(random_lights), \"\\n\") #> Random searchlight count: 2082"},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/regionOfInterest.html","id":"clustered-searchlight","dir":"Articles","previous_headings":"Searchlight Analyses","what":"Clustered Searchlight","title":"Regions of Interest (ROI)","text":"Use anatomical functional parcellations define ROIs:","code":"# Create a clustering over the voxel space grid <- index_to_coord(vol, which(vol > 0)) set.seed(123) kres <- kmeans(grid, centers = 50, iter.max = 500)  # Create ClusteredNeuroVol kvol <- ClusteredNeuroVol(vol, kres$cluster) cat(\"Created\", length(unique(kres$cluster)), \"clusters\\n\") #> Created 50 clusters  # Run clustered searchlight cluster_means <- vol %>%    clustered_searchlight(cvol = kvol) %>%    purrr::map_dbl(~ mean(vol[coords(.)]))  cat(\"Cluster mean range:\", range(cluster_means, na.rm = TRUE), \"\\n\") #> Cluster mean range: 1 1"},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/regionOfInterest.html","id":"image-patches","dir":"Articles","previous_headings":"","what":"Image Patches","title":"Regions of Interest (ROI)","text":"Patches regular, fixed-size regions tile image space, useful convolutional approaches:","code":"# Create 3x3x1 patches covering the volume pset <- patch_set(vol, dims = c(3, 3, 1)) cat(\"Number of patches:\", length(pset), \"\\n\") #> Number of patches: 102400  # Compute statistics for each patch patch_means <- pset %>% purrr::map_dbl(~ mean(.)) cat(\"Patch mean range:\", range(patch_means, na.rm = TRUE), \"\\n\") #> Patch mean range: 0 1  # Restrict patches to masked regions only pset_masked <- patch_set(vol, dims = c(3, 3, 1), mask = as.logical(vol)) cat(\"Masked patches:\", length(pset_masked), \"\\n\") #> Masked patches: 29532  # Patches are guaranteed to be equal size (padded at edges if needed) patch_sizes <- pset_masked %>% purrr::map_int(~ length(.)) cat(\"All patches same size:\", length(unique(patch_sizes)) == 1, \"\\n\") #> All patches same size: TRUE cat(\"Patch size:\", unique(patch_sizes), \"voxels\\n\") #> Patch size: 18 voxels"},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/regionOfInterest.html","id":"custom-weighted-rois-with-kernels","dir":"Articles","previous_headings":"Advanced ROI Techniques","what":"Custom Weighted ROIs with Kernels","title":"Regions of Interest (ROI)","text":"Create Gaussian-weighted custom-shaped ROIs:","code":"# Create a Gaussian kernel for weighted ROI kern_dim <- c(5, 5, 5)  # 5x5x5 kernel voxel_dim <- c(1, 1, 1)  # 1mm isotropic voxels  # Create Gaussian-weighted kernel gauss_kernel <- Kernel(kerndim = kern_dim, vdim = voxel_dim,                         FUN = dnorm, sd = 1.5)  # Embed kernel at a specific location embedded <- embed_kernel(gauss_kernel, space(vol),                           center_voxel = c(20, 20, 20)) cat(\"Kernel weights sum to:\", sum(embedded), \"\\n\") #> Kernel weights sum to: 1"},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/regionOfInterest.html","id":"working-with-clusteredneurovec-for-parcellated-data","dir":"Articles","previous_headings":"Advanced ROI Techniques","what":"Working with ClusteredNeuroVec for Parcellated Data","title":"Regions of Interest (ROI)","text":"Efficiently handle parcellated 4D data voxels grouped regions:","code":"# Create synthetic 4D data sp4 <- NeuroSpace(c(10, 10, 10, 20), c(1, 1, 1)) arr <- array(rnorm(10*10*10*20), dim = c(10, 10, 10, 20)) vec <- NeuroVec(arr, sp4)  # Create mask for central region sp3 <- NeuroSpace(c(10, 10, 10), c(1, 1, 1)) mask_arr <- array(FALSE, dim = c(10, 10, 10)) mask_arr[3:8, 3:8, 3:8] <- TRUE mask <- LogicalNeuroVol(mask_arr, sp3)  # Assign voxels to 5 random clusters n_voxels <- sum(mask_arr) clusters <- sample(1:5, n_voxels, replace = TRUE) cvol <- ClusteredNeuroVol(mask, clusters)  # Create clustered representation - one time-series per cluster cv <- ClusteredNeuroVec(vec, cvol)  # Access cluster time-series efficiently cluster_matrix <- as.matrix(cv)  # T x K matrix cat(\"Cluster matrix dimensions:\", dim(cluster_matrix), \"\\n\") #> Cluster matrix dimensions: 20 5 cat(\"(\", dim(cluster_matrix)[1], \"timepoints x\",      dim(cluster_matrix)[2], \"clusters)\\n\") #> ( 20 timepoints x 5 clusters)"},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/regionOfInterest.html","id":"roi-set-operations","dir":"Articles","previous_headings":"Advanced ROI Techniques","what":"ROI Set Operations","title":"Regions of Interest (ROI)","text":"Combine manipulate multiple ROIs:","code":"# Create two overlapping spherical ROIs roi1 <- spherical_roi(vol, c(20, 20, 20), radius = 6, fill = 1) roi2 <- spherical_roi(vol, c(23, 20, 20), radius = 6, fill = 1)  # Get indices for set operations idx1 <- indices(roi1) idx2 <- indices(roi2)  # Intersection - voxels in both ROIs intersection_idx <- intersect(idx1, idx2) cat(\"Intersection:\", length(intersection_idx), \"voxels\\n\") #> Intersection: 0 voxels  # Union - voxels in either ROI union_idx <- union(idx1, idx2) cat(\"Union:\", length(union_idx), \"voxels\\n\") #> Union: 38 voxels  # Difference - voxels in roi1 but not roi2 diff_idx <- setdiff(idx1, idx2) cat(\"Difference (roi1 - roi2):\", length(diff_idx), \"voxels\\n\") #> Difference (roi1 - roi2): 19 voxels  # Calculate overlap percentage overlap_pct <- length(intersection_idx) / length(union_idx) * 100 cat(\"Overlap:\", round(overlap_pct, 1), \"%\\n\") #> Overlap: 0 %"},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/regionOfInterest.html","id":"memory-management","dir":"Articles","previous_headings":"Best Practices and Performance","what":"Memory Management","title":"Regions of Interest (ROI)","text":"working many ROIs, consider memory usage:","code":"# Compare memory usage of different ROI storage methods n_rois <- 100 centers <- matrix(runif(n_rois * 3, 5, 15), ncol = 3)  # Method 1: List of ROI objects (flexible but more memory)   roi_list <- lapply(1:nrow(centers), function(i) {   spherical_roi(vol, centers[i,], radius = 6, fill = 1)   })  # Method 2: Single sparse volume with labeled regions (ensure increasing indices) all_indices <- list() all_labels <- list() for (i in 1:nrow(centers)) {   roi <- spherical_roi(vol, centers[i,], radius = 6)   idx <- indices(roi)   idx <- sort(unique(idx))   all_indices[[i]] <- idx   all_labels[[i]] <- rep(i, length(idx)) } idx_all <- unlist(all_indices) lab_all <- unlist(all_labels) ord <- order(idx_all) idx_all <- idx_all[ord] lab_all <- lab_all[ord] # Ensure strictly increasing indices by removing duplicates keep <- !duplicated(idx_all) idx_all <- idx_all[keep] lab_all <- lab_all[keep] combined_sparse <- SparseNeuroVol(lab_all, space(vol), indices = idx_all)  cat(\"Memory usage:\\n\") #> Memory usage: cat(\"  ROI list:\", format(object.size(roi_list), units = \"auto\"), \"\\n\") #>   ROI list: 771.1 Kb cat(\"  Sparse combined:\", format(object.size(combined_sparse), units = \"auto\"), \"\\n\") #>   Sparse combined: 23.7 Kb"},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/regionOfInterest.html","id":"choosing-roi-sizes","dir":"Articles","previous_headings":"Best Practices and Performance","what":"Choosing ROI Sizes","title":"Regions of Interest (ROI)","text":"Guidelines selecting appropriate ROI sizes:","code":"# Demonstrate effect of ROI size on coverage and overlap radii <- c(6, 8, 10, 12) coverage_stats <- data.frame(   radius = radii,   n_voxels = numeric(length(radii)),   pct_overlap = numeric(length(radii)) )  center1 <- c(20, 20, 20) center2 <- c(25, 20, 20)  # 5 voxels apart  for (i in seq_along(radii)) {   roi1 <- spherical_roi(vol, center1, radius = radii[i])   roi2 <- spherical_roi(vol, center2, radius = radii[i])      coverage_stats$n_voxels[i] <- length(roi1)      overlap <- length(intersect(indices(roi1), indices(roi2)))   total <- length(union(indices(roi1), indices(roi2)))   coverage_stats$pct_overlap[i] <- overlap / total * 100 }  print(coverage_stats) #>   radius n_voxels pct_overlap #> 1      6       19    0.000000 #> 2      8       49    0.000000 #> 3     10       85    0.000000 #> 4     12      163    5.844156"},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/regionOfInterest.html","id":"parallel-processing-tips","dir":"Articles","previous_headings":"Best Practices and Performance","what":"Parallel Processing Tips","title":"Regions of Interest (ROI)","text":"large-scale ROI analyses, consider parallel processing:","code":"# Example of parallel searchlight analysis (not run in vignette) library(parallel) library(foreach) library(doParallel)  # Setup parallel backend n_cores <- detectCores() - 1 cl <- makeCluster(n_cores) registerDoParallel(cl)  # Parallel searchlight computation searchlight_results <- foreach(roi = searchlight_list,                                 .packages = c(\"neuroim2\")) %dopar% {   # Your analysis function here   mean(data[coords(roi)]) }  # Clean up stopCluster(cl)"},{"path":[]},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/regionOfInterest.html","id":"issue-roi-extends-outside-brain-mask","dir":"Articles","previous_headings":"Troubleshooting and Tips > Common Issues and Solutions","what":"Issue: ROI extends outside brain mask","title":"Regions of Interest (ROI)","text":"","code":"# Problem: ROI at edge of brain edge_vox <- c(2, 2, 2)  # Near edge of volume  # Solution 1: Use nonzero=TRUE to keep only mask voxels roi_filtered <- spherical_roi(vol, edge_vox, radius = 5, nonzero = TRUE) cat(\"Filtered ROI size:\", length(roi_filtered), \"voxels\\n\") #> Filtered ROI size: 0 voxels  # Solution 2: Check if ROI is valid before analysis if (length(roi_filtered) < 10) {   cat(\"Warning: ROI too small for reliable analysis\\n\") } #> Warning: ROI too small for reliable analysis"},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/regionOfInterest.html","id":"issue-different-coordinate-systems","dir":"Articles","previous_headings":"Troubleshooting and Tips > Common Issues and Solutions","what":"Issue: Different coordinate systems","title":"Regions of Interest (ROI)","text":"","code":"# Always verify your coordinate system test_coord_mm <- c(-34, -28, 10)  # MNI coordinates test_coord_vox <- coord_to_grid(vol, test_coord_mm)  # Verify round-trip conversion back_to_mm <- grid_to_coord(vol, matrix(test_coord_vox, nrow = 1)) cat(\"Original (mm):\", test_coord_mm, \"\\n\") #> Original (mm): -34 -28 10 cat(\"Voxel:\", test_coord_vox, \"\\n\")   #> Voxel: 42.71428 23.85711 16.1892 cat(\"Back to mm:\", back_to_mm, \"\\n\") #> Back to mm: -33.99997 -28.00012 10.00004"},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/regionOfInterest.html","id":"see-also","dir":"Articles","previous_headings":"","what":"See Also","title":"Regions of Interest (ROI)","text":"related functionality, see vignettes help pages: vignette(\"NeuroVector\") - Working 4D neuroimaging data ?read_vec ?read_vol - Reading neuroimaging files ?NeuroSpace - Understanding coordinate systems spaces ?ClusteredNeuroVol - Parcellation-based analyses ?SparseNeuroVol - Memory-efficient sparse representations ?series ?series_roi - Time-series extraction complete list ROI-related functions:","code":"help(package = \"neuroim2\", topic = \"roi\")"},{"path":"https://bbuchsbaum.github.io/neuroim2/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Bradley R Buchsbaum. Author, maintainer, copyright holder.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Buchsbaum BR (2025). neuroim2: Data Structures Brain Imaging Data. R package version 0.8.2, https://github.com/bbuchsbaum/neuroim2.","code":"@Manual{,   title = {neuroim2: Data Structures for Brain Imaging Data},   author = {Bradley R Buchsbaum},   year = {2025},   note = {R package version 0.8.2},   url = {https://github.com/bbuchsbaum/neuroim2}, }"},{"path":"https://bbuchsbaum.github.io/neuroim2/index.html","id":"neuroim2-","dir":"","previous_headings":"","what":"Data Structures for Brain Imaging Data","title":"Data Structures for Brain Imaging Data","text":"Data structures /O volumetric brain imaging focus fMRI. successor neuroim improved S4 classes, sparse/dense 3D–4D representations, fast resampling/filtering. Website: https://bbuchsbaum.github.io/neuroim2/CRAN: https://cran.r-project.org/package=neuroim2Cheatsheet: neuroim2_cheatsheet.md","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/index.html","id":"cran","dir":"","previous_headings":"Installation","what":"CRAN","title":"Data Structures for Brain Imaging Data","text":"","code":"install.packages(\"neuroim2\")"},{"path":"https://bbuchsbaum.github.io/neuroim2/index.html","id":"r-universe-daily-builds","dir":"","previous_headings":"Installation","what":"R-universe (daily builds)","title":"Data Structures for Brain Imaging Data","text":"","code":"install.packages(\"neuroim2\",   repos = c(\"https://bbuchsbaum.r-universe.dev\", \"https://cloud.r-project.org\"))"},{"path":"https://bbuchsbaum.github.io/neuroim2/index.html","id":"development-version-github","dir":"","previous_headings":"Installation","what":"Development version (GitHub)","title":"Data Structures for Brain Imaging Data","text":"","code":"# install.packages(\"remotes\") remotes::install_github(\"bbuchsbaum/neuroim2\")"},{"path":"https://bbuchsbaum.github.io/neuroim2/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Data Structures for Brain Imaging Data","text":"Read NIFTI image perform simple operations: Create 4D image volumes:","code":"library(neuroim2) ## Loading required package: Matrix  ##  ## Attaching package: 'neuroim2'  ## The following object is masked from 'package:base': ##  ##     scale fname <- system.file(\"extdata\", \"global_mask_v4.nii\", package=\"neuroim2\") vol <- read_vol(fname)  v1 <- vol[1,1,1] vol2 <- vol + vol all(vol == (vol2 - vol)) ## [1] TRUE vec <- vec_from_vols(list(vol, vol, vol2)) series1 <- vec[1,1,1,] length(series1) ## [1] 3"},{"path":"https://bbuchsbaum.github.io/neuroim2/index.html","id":"vignettes","dir":"","previous_headings":"","what":"Vignettes","title":"Data Structures for Brain Imaging Data","text":"See examples use neuroim2 vignettes.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/AFNIMetaInfo.html","id":null,"dir":"Reference","previous_headings":"","what":"Create AFNI Format Metadata Object — AFNIMetaInfo","title":"Create AFNI Format Metadata Object — AFNIMetaInfo","text":"Creates AFNIMetaInfo object containing format-specific metadata   AFNI format neuroimaging files.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/AFNIMetaInfo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create AFNI Format Metadata Object — AFNIMetaInfo","text":"","code":"AFNIMetaInfo(descriptor, afni_header)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/AFNIMetaInfo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create AFNI Format Metadata Object — AFNIMetaInfo","text":"descriptor AFNIFormat object specifying file format details afni_header List containing AFNI header information","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/AFNIMetaInfo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create AFNI Format Metadata Object — AFNIMetaInfo","text":"AFNIMetaInfo object","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/AFNIMetaInfo.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create AFNI Format Metadata Object — AFNIMetaInfo","text":"Create AFNIMetaInfo Object AFNIMetaInfo object extends MetaInfo AFNI-specific features: AFNI brick structure Sub-brick labels scaling Space transformation Statistical parameters function handles: Dimension extraction validation Label generation sub-bricks Transformation AFNI NIFTI space Data type scaling setup","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/AbstractSparseNeuroVec-class.html","id":null,"dir":"Reference","previous_headings":"","what":"AbstractSparseNeuroVec Class — AbstractSparseNeuroVec-class","title":"AbstractSparseNeuroVec Class — AbstractSparseNeuroVec-class","text":"abstract base class sparse four-dimensional brain image representations. class provides foundation efficient storage manipulation large, sparse neuroimaging data.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/AbstractSparseNeuroVec-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"AbstractSparseNeuroVec Class — AbstractSparseNeuroVec-class","text":"AbstractSparseNeuroVec class serves template implementing various sparse representations 4D brain images. combines spatial properties NeuroVec efficiency sparse data structures.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/AbstractSparseNeuroVec-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"AbstractSparseNeuroVec Class — AbstractSparseNeuroVec-class","text":"mask object class LogicalNeuroVol defining sparse domain brain image. mask indicates voxels contain non-zero data. map object class IndexLookupVol used map spatial coordinates index/row coordinates sparse representation.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/AbstractSparseNeuroVec-class.html","id":"subclasses","dir":"Reference","previous_headings":"","what":"Subclasses","title":"AbstractSparseNeuroVec Class — AbstractSparseNeuroVec-class","text":"Concrete implementations abstract class provide specific data storage mechanisms methods efficient access manipulation sparse 4D brain image data.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/Arith-NeuroVec-NeuroVol-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Arithmetic Operations for NeuroVec and NeuroVol — Arith,NeuroVec,NeuroVol-method","title":"Arithmetic Operations for NeuroVec and NeuroVol — Arith,NeuroVec,NeuroVol-method","text":"function performs arithmetic operations NeuroVec object NeuroVol object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/Arith-NeuroVec-NeuroVol-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Arithmetic Operations for NeuroVec and NeuroVol — Arith,NeuroVec,NeuroVol-method","text":"","code":"# S4 method for class 'NeuroVec,NeuroVol' Arith(e1, e2)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/Arith-NeuroVec-NeuroVol-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Arithmetic Operations for NeuroVec and NeuroVol — Arith,NeuroVec,NeuroVol-method","text":"e1 NeuroVec object. e2 NeuroVol object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/Arith-NeuroVec-NeuroVol-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Arithmetic Operations for NeuroVec and NeuroVol — Arith,NeuroVec,NeuroVol-method","text":"DenseNeuroVec object resulting arithmetic operation.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/Arith-NeuroVol-NeuroVec-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Arithmetic Operations for NeuroVol and NeuroVec — Arith,NeuroVol,NeuroVec-method","title":"Arithmetic Operations for NeuroVol and NeuroVec — Arith,NeuroVol,NeuroVec-method","text":"function performs arithmetic operations NeuroVol object NeuroVec object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/Arith-NeuroVol-NeuroVec-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Arithmetic Operations for NeuroVol and NeuroVec — Arith,NeuroVol,NeuroVec-method","text":"","code":"# S4 method for class 'NeuroVol,NeuroVec' Arith(e1, e2)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/Arith-NeuroVol-NeuroVec-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Arithmetic Operations for NeuroVol and NeuroVec — Arith,NeuroVol,NeuroVec-method","text":"e1 NeuroVol object. e2 NeuroVec object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/Arith-NeuroVol-NeuroVec-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Arithmetic Operations for NeuroVol and NeuroVec — Arith,NeuroVol,NeuroVec-method","text":"DenseNeuroVec object resulting arithmetic operation.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/Arith-ROIVol-ROIVol-method.html","id":null,"dir":"Reference","previous_headings":"","what":"This function performs arithmetic operations on two ROIVol objects. — Arith,ROIVol,ROIVol-method","title":"This function performs arithmetic operations on two ROIVol objects. — Arith,ROIVol,ROIVol-method","text":"function performs arithmetic operations two ROIVol objects.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/Arith-ROIVol-ROIVol-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This function performs arithmetic operations on two ROIVol objects. — Arith,ROIVol,ROIVol-method","text":"","code":"# S4 method for class 'ROIVol,ROIVol' Arith(e1, e2)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/Arith-ROIVol-ROIVol-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This function performs arithmetic operations on two ROIVol objects. — Arith,ROIVol,ROIVol-method","text":"e1 ROIVol object. e2 ROIVol object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/Arith-ROIVol-ROIVol-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This function performs arithmetic operations on two ROIVol objects. — Arith,ROIVol,ROIVol-method","text":"ROIVol object resulting arithmetic operation.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/Arith-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Arithmetic Operations — Arith-methods","title":"Arithmetic Operations — Arith-methods","text":"Methods performing arithmetic operations neuroimaging objects method performs arithmetic operations two ROIVol objects (e1 e2) using generic arithmetic function. dimensions objects checked compatibility performing operation. Perform arithmetic operation two SparseNeuroVec objects. input SparseNeuroVec objects must dimensions NeuroSpace objects. method computes union masks performs arithmetic operation non-zero values. result returned new SparseNeuroVec object. Perform arithmetic operation SparseNeuroVol object NeuroVol object. input SparseNeuroVol NeuroVol objects must dimensions. method performs arithmetic operation non-zero values SparseNeuroVol corresponding values NeuroVol. result returned new DenseNeuroVol object. Perform arithmetic operation NeuroVol object SparseNeuroVol object. input NeuroVol SparseNeuroVol objects must dimensions. method performs arithmetic operation values NeuroVol non-zero values SparseNeuroVol. result returned new DenseNeuroVol object. Perform arithmetic operation two NeuroVec objects. input NeuroVec objects must dimensions. method performs arithmetic operation elements NeuroVec objects. result returned new DenseNeuroVec object. Perform arithmetic operation NeuroVol object SparseNeuroVol object. input NeuroVol SparseNeuroVol objects must dimensions. method performs arithmetic operation values NeuroVol non-zero values SparseNeuroVol. result returned new DenseNeuroVol object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/Arith-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Arithmetic Operations — Arith-methods","text":"","code":"# S4 method for class 'SparseNeuroVol,SparseNeuroVol' Arith(e1, e2)  # S4 method for class 'DenseNeuroVol,DenseNeuroVol' Arith(e1, e2)  # S4 method for class 'DenseNeuroVec,DenseNeuroVec' Arith(e1, e2)  # S4 method for class 'SparseNeuroVol,NeuroVol' Arith(e1, e2)  # S4 method for class 'NeuroVol,SparseNeuroVol' Arith(e1, e2)  # S4 method for class 'NeuroVec,NeuroVec' Arith(e1, e2)  # S4 method for class 'NeuroVol,SparseNeuroVol' Arith(e1, e2)  # S4 method for class 'SparseNeuroVec,SparseNeuroVec' Arith(e1, e2)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/Arith-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Arithmetic Operations — Arith-methods","text":"e1 NeuroVol object. e2 SparseNeuroVol object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/Arith-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Arithmetic Operations — Arith-methods","text":"DenseNeuroVol object representing result arithmetic operation. ROIVol object containing result arithmetic operation e1 e2. SparseNeuroVec object representing result arithmetic operation. DenseNeuroVol object representing result arithmetic operation. DenseNeuroVol object representing result arithmetic operation. DenseNeuroVec object representing result arithmetic operation. DenseNeuroVol object representing result arithmetic operation.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ArrayLike3D-class.html","id":null,"dir":"Reference","previous_headings":"","what":"ArrayLike3D Class — ArrayLike3D-class","title":"ArrayLike3D Class — ArrayLike3D-class","text":"virtual class representing three-dimensional array-like objects. provides common interface 3D array operations.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ArrayLike4D-class.html","id":null,"dir":"Reference","previous_headings":"","what":"ArrayLike4D Class — ArrayLike4D-class","title":"ArrayLike4D Class — ArrayLike4D-class","text":"virtual class representing four-dimensional array-like objects. intended serve base class 4D array representations.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ArrayLike5D-class.html","id":null,"dir":"Reference","previous_headings":"","what":"ArrayLike5D Class — ArrayLike5D-class","title":"ArrayLike5D Class — ArrayLike5D-class","text":"virtual class representing five-dimensional array-like objects. class serves interface objects mimic 5D arrays.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/AxisSet-class.html","id":null,"dir":"Reference","previous_headings":"","what":"AxisSet — AxisSet-class","title":"AxisSet — AxisSet-class","text":"Virtual base class representing ordered set named axes.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/AxisSet-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"AxisSet — AxisSet-class","text":"ndim number axes (dimensions)","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/AxisSet1D-class.html","id":null,"dir":"Reference","previous_headings":"","what":"AxisSet1D — AxisSet1D-class","title":"AxisSet1D — AxisSet1D-class","text":"one-dimensional axis set","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/AxisSet1D-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"AxisSet1D — AxisSet1D-class","text":"first axis","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/AxisSet2D-class.html","id":null,"dir":"Reference","previous_headings":"","what":"AxisSet2D — AxisSet2D-class","title":"AxisSet2D — AxisSet2D-class","text":"two-dimensional axis set representing ordered pair named axes.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/AxisSet2D-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"AxisSet2D — AxisSet2D-class","text":"first axis, inherited AxisSet1D j second axis, class \"NamedAxis\"","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/AxisSet2D-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"AxisSet2D — AxisSet2D-class","text":"","code":"# Create an AxisSet2D object axis1 <- new(\"NamedAxis\", axis = \"x\", direction = 1) axis2 <- new(\"NamedAxis\", axis = \"y\", direction = 1) axisSet2D <- new(\"AxisSet2D\", i = axis1, j = axis2, ndim = 2L)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/AxisSet3D-class.html","id":null,"dir":"Reference","previous_headings":"","what":"AxisSet3D Class — AxisSet3D-class","title":"AxisSet3D Class — AxisSet3D-class","text":"class representing three-dimensional axis set, extending AxisSet2D class additional third axis.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/AxisSet3D-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"AxisSet3D Class — AxisSet3D-class","text":"k NamedAxis object representing third axis.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/AxisSet3D-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"AxisSet3D Class — AxisSet3D-class","text":"","code":"# Create NamedAxis objects for each dimension x_axis <- new(\"NamedAxis\", axis = \"x\", direction = 1) y_axis <- new(\"NamedAxis\", axis = \"y\", direction = 1) z_axis <- new(\"NamedAxis\", axis = \"z\", direction = 1)  # Create an AxisSet3D object axis_set_3d <- new(\"AxisSet3D\", i = x_axis, j = y_axis, k = z_axis, ndim = 3L)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/AxisSet4D-class.html","id":null,"dir":"Reference","previous_headings":"","what":"AxisSet4D Class — AxisSet4D-class","title":"AxisSet4D Class — AxisSet4D-class","text":"class representing four-dimensional axis set, extending AxisSet3D class additional fourth axis.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/AxisSet4D-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"AxisSet4D Class — AxisSet4D-class","text":"l NamedAxis object representing fourth axis.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/AxisSet4D-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"AxisSet4D Class — AxisSet4D-class","text":"","code":"# Create NamedAxis objects for each dimension x_axis <- new(\"NamedAxis\", axis = \"x\", direction = 1) y_axis <- new(\"NamedAxis\", axis = \"y\", direction = 1) z_axis <- new(\"NamedAxis\", axis = \"z\", direction = 1) t_axis <- new(\"NamedAxis\", axis = \"t\", direction = 1)  # Create an AxisSet4D object axis_set_4d <- new(\"AxisSet4D\", i = x_axis, j = y_axis, k = z_axis,                    l = t_axis, ndim = 4L)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/AxisSet5D-class.html","id":null,"dir":"Reference","previous_headings":"","what":"AxisSet5D Class — AxisSet5D-class","title":"AxisSet5D Class — AxisSet5D-class","text":"class representing five-dimensional axis set, extending AxisSet4D class additional fifth axis.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/AxisSet5D-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"AxisSet5D Class — AxisSet5D-class","text":"m NamedAxis object representing fifth axis.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/AxisSet5D-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"AxisSet5D Class — AxisSet5D-class","text":"","code":"# Create NamedAxis objects for each dimension x_axis <- new(\"NamedAxis\", axis = \"x\", direction = 1) y_axis <- new(\"NamedAxis\", axis = \"y\", direction = 1) z_axis <- new(\"NamedAxis\", axis = \"z\", direction = 1) t_axis <- new(\"NamedAxis\", axis = \"t\", direction = 1) v_axis <- new(\"NamedAxis\", axis = \"v\", direction = 1)  # Create an AxisSet5D object axis_set_5d <- new(\"AxisSet5D\", i = x_axis, j = y_axis, k = z_axis,                    l = t_axis, m = v_axis, ndim = 5L)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/BigNeuroVec-class.html","id":null,"dir":"Reference","previous_headings":"","what":"BigNeuroVec Class — BigNeuroVec-class","title":"BigNeuroVec Class — BigNeuroVec-class","text":"class representing sparse four-dimensional brain image backed disk-based big matrix. BigNeuroVec objects designed efficient handling large-scale brain imaging data exceeds available memory.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/BigNeuroVec-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"BigNeuroVec Class — BigNeuroVec-class","text":"BigNeuroVec leverages file-backed storage manage large 4D neuroimaging datasets typically exceed available RAM. combines sparse representation framework AbstractSparseNeuroVec disk-based storage capabilities FBM, allowing --core computations massive datasets.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/BigNeuroVec-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"BigNeuroVec Class — BigNeuroVec-class","text":"data instance class FBM bigstatsr package, containing time-series data. FBM (File-Backed Big Matrix) matrix-like structure stored disk, enabling efficient handling large-scale data.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/BigNeuroVec-class.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"BigNeuroVec Class — BigNeuroVec-class","text":"BigNeuroVec inherits : NeuroVec: Base class 4D brain images AbstractSparseNeuroVec: Provides sparse representation framework ArrayLike4D: Interface 4D array-like operations","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/BigNeuroVec-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Memory-Mapped Neuroimaging Vector — BigNeuroVec","title":"Create a Memory-Mapped Neuroimaging Vector — BigNeuroVec","text":"Creates BigNeuroVec object, represents large neuroimaging vector using memory-mapped file storage. allows working neuroimaging data large fit memory.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/BigNeuroVec-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Memory-Mapped Neuroimaging Vector — BigNeuroVec","text":"","code":"BigNeuroVec(   data,   space,   mask,   label = \"\",   type = c(\"double\", \"float\", \"integer\"),   backingfile = tempfile() )"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/BigNeuroVec-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Memory-Mapped Neuroimaging Vector — BigNeuroVec","text":"data input data stored space NeuroSpace object defining spatial properties mask logical mask indicating voxels contain data label Optional character string label vector type Storage type, one \"double\", \"float\", \"integer\" backingfile Path file used memory mapping (defaults tempfile())","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/BigNeuroVec-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Memory-Mapped Neuroimaging Vector — BigNeuroVec","text":"new BigNeuroVec object provides memory-efficient access large neuroimaging data memory mapping.         object contains spatial properties, mask, memory-mapped data storage.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/BigNeuroVec-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Memory-Mapped Neuroimaging Vector — BigNeuroVec","text":"","code":"# \\donttest{ # Load an example 4D brain image example_file <- system.file(\"extdata\", \"global_mask_v4.nii\", package = \"neuroim2\") example_4d_image <- read_vec(example_file)  # Create a mask (e.g., selecting voxels with values > 0) mask <- array(as.vector(example_4d_image[,,,1]) > 0,              dim = dim(example_4d_image)[1:3])  if(requireNamespace(\"bigstatsr\", quietly = TRUE)) {   # Create a BigNeuroVec with memory mapping   big_vec <- BigNeuroVec(data = example_4d_image@.Data,                          space = space(example_4d_image),                          mask = mask,                          label = \"Example BigNeuroVec\")   print(big_vec) } #>  #> BigNeuroVec 'Example BigNeuroVec' #>  #> - Spatial Info --------------------------- #> | Dimensions    : 64 x 64 x 25 #> | Time Points   : 4 #> | Spacing       : 3.5 x 3.5 x 3.7 #> | Origin        : 112 x -108 x -46.2 #> | Orientation   : Right-to-Left Posterior-to-Anterior Inferior-to-Superior #>  #> - Memory Usage -------------------------- #>   Size          : 936.48 KB #>  # }"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/BinaryReader-class.html","id":null,"dir":"Reference","previous_headings":"","what":"BinaryReader Class — BinaryReader-class","title":"BinaryReader Class — BinaryReader-class","text":"Class supporting reading bulk binary data connection","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/BinaryReader-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"BinaryReader Class — BinaryReader-class","text":"input binary input connection byte_offset number bytes skip start input data_type data type binary elements bytes_per_element number bytes data element (e.g. 4 8 floating point numbers) endian endianness binary input connection signed Logical indicating whether data type signed","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/BinaryReader.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Binary Reader Object — BinaryReader","title":"Create Binary Reader Object — BinaryReader","text":"Create new instance BinaryReader class reading bulk binary data.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/BinaryReader.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Binary Reader Object — BinaryReader","text":"","code":"BinaryReader(   input,   byte_offset,   data_type,   bytes_per_element,   endian = .Platform$endian,   signed = TRUE )"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/BinaryReader.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Binary Reader Object — BinaryReader","text":"input Character string (file name) connection object read byte_offset Integer specifying bytes skip start input data_type Character string specifying R data type ('integer', 'double', etc.) bytes_per_element Integer specifying bytes per data element (e.g., 4 8) endian Character string specifying endianness ('big' 'little', default: platform-specific) signed Logical indicating data type signed (default: TRUE)","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/BinaryReader.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Binary Reader Object — BinaryReader","text":"object class BinaryReader","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/BinaryReader.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Binary Reader Object — BinaryReader","text":"","code":"# \\donttest{ # Create a temporary binary file tmp <- tempfile() writeBin(rnorm(100), tmp, size = 8)   # Read from existing connection with offset con <- file(tmp, \"rb\") reader <- BinaryReader(con, byte_offset=0,                       data_type = \"DOUBLE\", bytes_per_element = 8L) close(reader)  # Clean up unlink(tmp) # }"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/BinaryWriter-class.html","id":null,"dir":"Reference","previous_headings":"","what":"BinaryWriter Class — BinaryWriter-class","title":"BinaryWriter Class — BinaryWriter-class","text":"class supports writing bulk binary data connection","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/BinaryWriter-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"BinaryWriter Class — BinaryWriter-class","text":"output binary output connection byte_offset number bytes skip start input data_type data type binary elements bytes_per_element number bytes data element (e.g. 4 8 floating point numbers) endian endianness binary output connection","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/BinaryWriter.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Binary Writer Object — BinaryWriter","title":"Create Binary Writer Object — BinaryWriter","text":"Create new instance BinaryWriter class writing bulk binary data.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/BinaryWriter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Binary Writer Object — BinaryWriter","text":"","code":"BinaryWriter(   output,   byte_offset,   data_type,   bytes_per_element,   endian = .Platform$endian )"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/BinaryWriter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Binary Writer Object — BinaryWriter","text":"output Character string (file name) connection object write byte_offset Integer specifying bytes skip start output data_type Character string specifying R data type ('integer', 'double', etc.) bytes_per_element Integer specifying bytes per data element (e.g., 4 8) endian Character string specifying endianness ('big' 'little', default: platform-specific)","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/BinaryWriter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Binary Writer Object — BinaryWriter","text":"object class BinaryWriter","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/BinaryWriter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Binary Writer Object — BinaryWriter","text":"","code":"# \\donttest{  tmp <- tempfile() # Write to existing connection with offset con <- file(tmp, \"wb\") writer <- BinaryWriter(con, byte_offset = 100L,                       data_type = \"integer\", bytes_per_element = 4L) unlink(tmp) # }"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ClusteredNeuroVec-class.html","id":null,"dir":"Reference","previous_headings":"","what":"ClusteredNeuroVec Class — ClusteredNeuroVec-class","title":"ClusteredNeuroVec Class — ClusteredNeuroVec-class","text":"class representing 4D neuroimaging dataset voxels grouped clusters. cluster single time-series shared voxels within cluster.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ClusteredNeuroVec-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"ClusteredNeuroVec Class — ClusteredNeuroVec-class","text":"cvol ClusteredNeuroVol object defining cluster assignments ts numeric matrix dimensions T x K (time points x clusters) cl_map integer vector mapping voxel cluster ID (0 outside mask) label character string label object","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ClusteredNeuroVec.html","id":null,"dir":"Reference","previous_headings":"","what":"ClusteredNeuroVec: Cluster-aware 4D neuroimaging data — ClusteredNeuroVec","title":"ClusteredNeuroVec: Cluster-aware 4D neuroimaging data — ClusteredNeuroVec","text":"`ClusteredNeuroVec` creates 4D array-like object voxels grouped clusters, one time-series per cluster. voxels within cluster share time-series, making ideal parcellated analyses (e.g., Schaefer-Yeo parcellations).","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ClusteredNeuroVec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ClusteredNeuroVec: Cluster-aware 4D neuroimaging data — ClusteredNeuroVec","text":"","code":"ClusteredNeuroVec(x, cvol, FUN = mean, weights = NULL, label = \"\")"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ClusteredNeuroVec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ClusteredNeuroVec: Cluster-aware 4D neuroimaging data — ClusteredNeuroVec","text":"x Either `NeuroVec` object reduced clusters, pre-computed numeric matrix cluster time-series (T x K, T=time points, K=clusters) cvol `ClusteredNeuroVol` object defining cluster assignments FUN Reduction function aggregate voxels within clusters (default: mean). Common choices include mean, median, custom functions. weights Optional numeric vector per-voxel weights weighted aggregation. Must length equal number non-zero voxels mask. label Optional character label object (default: \"\")","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ClusteredNeuroVec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ClusteredNeuroVec: Cluster-aware 4D neuroimaging data — ClusteredNeuroVec","text":"ClusteredNeuroVec object containing: cvol input ClusteredNeuroVol defining cluster structure ts T×K matrix cluster time-series (T=timepoints, K=clusters) cl_map Integer vector mapping linear voxel indices cluster IDs label Character label object","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ClusteredNeuroVec.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ClusteredNeuroVec: Cluster-aware 4D neuroimaging data — ClusteredNeuroVec","text":"class implements array-like 4D access storing data efficiently T×K matrix instead full voxel×time representation. cluster's time-series computed applying aggregation function (FUN) voxels within cluster. object supports standard NeuroVec operations: Indexing: x[,,,t] extract 3D volumes time t Series extraction: series(x, , j, k) time-series voxel (,j,k) Matrix conversion: .matrix(x) get T×K cluster matrix Single-voxel clusters handled efficiently without aggregation overhead.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ClusteredNeuroVec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ClusteredNeuroVec: Cluster-aware 4D neuroimaging data — ClusteredNeuroVec","text":"","code":"# Create synthetic 4D data (10x10x10 volume, 20 timepoints) sp4 <- NeuroSpace(c(10,10,10,20), c(1,1,1)) arr <- array(rnorm(10*10*10*20), dim=c(10,10,10,20)) vec <- NeuroVec(arr, sp4)  # Create a mask covering the central region sp3 <- NeuroSpace(c(10,10,10), c(1,1,1)) mask_arr <- array(FALSE, dim=c(10,10,10)) mask_arr[3:8, 3:8, 3:8] <- TRUE mask <- LogicalNeuroVol(mask_arr, sp3)  # Assign voxels to 5 random clusters n_voxels <- sum(mask_arr) clusters <- sample(1:5, n_voxels, replace=TRUE) cvol <- ClusteredNeuroVol(mask, clusters)  # Create clustered representation cv <- ClusteredNeuroVec(vec, cvol)  # Access like a regular NeuroVec vol_t1 <- cv[,,,1]  # 3D volume at time 1 ts <- series(cv, 5, 5, 5)  # time-series at voxel (5,5,5)  # Get cluster time-series matrix cluster_matrix <- as.matrix(cv)  # T x K matrix dim(cluster_matrix)  # 20 x 5 #> [1] 20  5"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ClusteredNeuroVol-class.html","id":null,"dir":"Reference","previous_headings":"","what":"ClusteredNeuroVol Class — ClusteredNeuroVol-class","title":"ClusteredNeuroVol Class — ClusteredNeuroVol-class","text":"class represents three-dimensional brain image divided N disjoint partitions clusters. extends SparseNeuroVol class provide efficient storage manipulation clustered neuroimaging data. Construct ClusteredNeuroVol instance","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ClusteredNeuroVol-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ClusteredNeuroVol Class — ClusteredNeuroVol-class","text":"","code":"ClusteredNeuroVol(mask, clusters, label_map = NULL, label = \"\")"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ClusteredNeuroVol-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ClusteredNeuroVol Class — ClusteredNeuroVol-class","text":"mask instance class LogicalNeuroVol clusters vector clusters ids length equal number nonzero voxels mask mask label_map optional list maps cluster id cluster label, e.g. (1 -> \"FFA\", 2 -> \"PPA\") label optional character string used label volume","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ClusteredNeuroVol-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ClusteredNeuroVol Class — ClusteredNeuroVol-class","text":"ClusteredNeuroVol instance","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ClusteredNeuroVol-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ClusteredNeuroVol Class — ClusteredNeuroVol-class","text":"ClusteredNeuroVol class designed efficient representation manipulation brain images distinct, non-overlapping regions clusters. combines memory efficiency sparse representations additional structures managing cluster information. use case ClusteredNeuroVol store volumetric data clustered discrete sets voxels, associated id. example, class can used represent parcellated neuroimaging volumes.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ClusteredNeuroVol-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"ClusteredNeuroVol Class — ClusteredNeuroVol-class","text":"mask LogicalNeuroVol object representing logical mask indicating spatial domain set clusters. clusters integer vector representing cluster number voxel mask. label_map named list element represents cluster name. cluster_map environment object maps cluster id set 1D spatial indices belonging cluster.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ClusteredNeuroVol-class.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"ClusteredNeuroVol Class — ClusteredNeuroVol-class","text":"class inherits methods SparseNeuroVol class. Additional methods specific cluster operations may available.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ClusteredNeuroVol-class.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ClusteredNeuroVol Class — ClusteredNeuroVol-class","text":"ClusteredNeuroVol objects particularly useful : Representing parcellated brain images Storing results clustering algorithms applied neuroimaging data Efficient manipulation analysis region-based neuroimaging data","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ClusteredNeuroVol-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ClusteredNeuroVol Class — ClusteredNeuroVol-class","text":"","code":"# Create a simple clustered brain volume dim <- c(10L, 10L, 10L) mask_data <- array(rep(c(TRUE, FALSE), 500), dim) mask <- new(\"LogicalNeuroVol\", .Data = mask_data,             space = NeuroSpace(dim = dim, origin = c(0,0,0), spacing = c(1,1,1)))  clusters <- as.integer(runif(sum(mask_data)) * 5)+1 label_map <- list(\"Cluster1\" = 1, \"Cluster2\" = 2, \"Cluster3\" = 3,                   \"Cluster4\" = 4, \"Cluster5\" = 5)  cluster_map <- list() for (i in 1:5) {   cluster_map[[as.character(i)]] <- which(clusters == i) }  clustered_vol <- ClusteredNeuroVol(                      mask = mask,                      clusters = clusters,                      label_map = label_map)    # Create a simple space and volume space <- NeuroSpace(c(16, 16, 16), spacing = c(1, 1, 1)) vol_data <- array(rnorm(16^3), dim = c(16, 16, 16)) vol <- NeuroVol(vol_data, space)  # Create a binary mask (e.g., values > 0) mask_data <- vol_data > 0 mask_vol <- LogicalNeuroVol(mask_data, space)  # Get coordinates of masked voxels mask_idx <- which(mask_data) coords <- index_to_coord(mask_vol, mask_idx)  # Cluster the coordinates into 10 groups set.seed(123)  # for reproducibility kmeans_result <- kmeans(coords, centers = 10)  # Create the clustered volume clustered_vol <- ClusteredNeuroVol(mask_vol, kmeans_result$cluster)  # Print information about the clusters print(clustered_vol) #>  #> ClusteredNeuroVol  #> ============================================================  #>  #>  > Type:           Clustered Volume  #>  > Dimensions:     16 x 16 x 16  #>  > Spacing:        1 x 1 x 1   mm  #>  > Origin:         0 x 0 x 0   mm  #>  > Orientation:    Left-to-Right Posterior-to-Anterior Inferior-to-Superior  #>  #>  Cluster Information  #> ----------------------------------------  #>  > Total Clusters: 10  #>  > Active Voxels:  1994   (48.7% of volume)  #>  #>  Region Labels  #> ----------------------------------------  #>  >  Clus_1               [1]  #>  >  Clus_2               [2]  #>  >  Clus_3               [3]  #>  >  Clus_4               [4]  #>  >  Clus_5               [5]  #>    ... and 5 more regions #>"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ColumnReader-class.html","id":null,"dir":"Reference","previous_headings":"","what":"ColumnReader — ColumnReader-class","title":"ColumnReader — ColumnReader-class","text":"class supports reading data matrix-like storage format, file database, column-wise manner.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ColumnReader-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"ColumnReader — ColumnReader-class","text":"nrow integer representing number rows matrix-like storage. ncol integer representing number columns matrix-like storage. reader function takes set column indices input returns matrix containing requested columns storage.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ColumnReader.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Column Reader Object — ColumnReader","title":"Create Column Reader Object — ColumnReader","text":"Create new instance ColumnReader class reading column-oriented data.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ColumnReader.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Column Reader Object — ColumnReader","text":"","code":"ColumnReader(nrow, ncol, reader)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ColumnReader.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Column Reader Object — ColumnReader","text":"nrow Integer specifying number rows data ncol Integer specifying number columns data reader Function takes column indices returns matrix","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ColumnReader.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Column Reader Object — ColumnReader","text":"object class ColumnReader","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ColumnReader.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Column Reader Object — ColumnReader","text":"","code":"reader_func <- function(cols) {   matrix(rnorm(100 * length(cols)), 100, length(cols)) } col_reader <- ColumnReader(nrow = 100L, ncol = 10L, reader = reader_func)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/Compare-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Comparison Operations — Compare-methods","title":"Comparison Operations — Compare-methods","text":"Methods comparing neuroimaging objects method compares two NeuroVec objects (e1 e2) using generic comparison function. dimensions objects checked compatibility performing comparison.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/Compare-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Comparison Operations — Compare-methods","text":"","code":"# S4 method for class 'SparseNeuroVol,numeric' Compare(e1, e2)  # S4 method for class 'numeric,SparseNeuroVol' Compare(e1, e2)  # S4 method for class 'NeuroVec,NeuroVec' Compare(e1, e2)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/Compare-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Comparison Operations — Compare-methods","text":"e1 NeuroVec object compared. e2 NeuroVec object compared.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/Compare-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Comparison Operations — Compare-methods","text":"result comparison SparseNeuroVol object's data numeric value. result comparison e1 e2.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/DenseNeuroVec-class.html","id":null,"dir":"Reference","previous_headings":"","what":"DenseNeuroVec Class — DenseNeuroVec-class","title":"DenseNeuroVec Class — DenseNeuroVec-class","text":"class representing four-dimensional brain image, backed dense array. class designed neuroimaging data voxels contain non-zero values. function constructs DenseNeuroVec object, represents dense four-dimensional brain image. handles various input data formats ensures proper dimensionality.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/DenseNeuroVec-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DenseNeuroVec Class — DenseNeuroVec-class","text":"","code":"DenseNeuroVec(data, space, label = \"none\")"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/DenseNeuroVec-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DenseNeuroVec Class — DenseNeuroVec-class","text":"data image data. can : 4-dimensional array 2-dimensional matrix (either nvoxels x ntime-points         ntime-points x nvoxels) vector (reshaped match space dimensions) space NeuroSpace object defining spatial properties image. label character string providing label DenseNeuroVec object. Default empty string.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/DenseNeuroVec-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DenseNeuroVec Class — DenseNeuroVec-class","text":"concrete instance DenseNeuroVec class.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/DenseNeuroVec-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"DenseNeuroVec Class — DenseNeuroVec-class","text":"DenseNeuroVec objects store data dense array format, efficient operations require frequent access voxels. class inherits NeuroVec array classes, combining spatial information array-based storage. function performs several operations based input data type: matrix input: determines correct orientation (voxels x time time x voxels)     reshapes accordingly. necessary, adds 4th dimension space object. vector input: reshapes data match dimensions specified space object. array input: ensures dimensions match specified space object. Note label parameter currently used object creation, included potential future use consistency constructors.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/DenseNeuroVec-class.html","id":"validity","dir":"Reference","previous_headings":"","what":"Validity","title":"DenseNeuroVec Class — DenseNeuroVec-class","text":"DenseNeuroVec object considered valid : underlying data four-dimensional array.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/DenseNeuroVec-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DenseNeuroVec Class — DenseNeuroVec-class","text":"","code":"# Create a simple 4D brain image data <- array(rnorm(64*64*32*10), dim = c(64, 64, 32, 10)) space <- NeuroSpace(dim = c(64, 64, 32,10), origin = c(0, 0, 0), spacing = c(3, 3, 4)) dense_vec <- new(\"DenseNeuroVec\", .Data = data, space = space)  # Access dimensions dim(dense_vec) #> [1] 64 64 32 10  # Extract a single 3D volume first_volume <- dense_vec[[1]]   # Create a simple 4D brain image dim <- c(64, 64, 32, 10)  # 64x64x32 volume with 10 time points data <- array(rnorm(prod(dim)), dim) space <- NeuroSpace(dim, spacing = c(3, 3, 4))  # Create a DenseNeuroVec object dense_vec <- DenseNeuroVec(data = data, space = space, label = \"Example\") print(dense_vec) #>  #> DenseNeuroVec (10.01 bytes MB) #>  #> - Spatial Info --------------------------- #> | Dimensions    : 64 x 64 x 32 (10 timepoints) #> | Total Voxels  : 131,072 #> | Spacing       : 3 x 3 x 4 #>  #> - Properties --------------------------- #> | Origin        : 0 x 0 x 0 #> | Orientation   : Left-to-Right Posterior-to-Anterior Inferior-to-Superior #>  #> - Statistics --------------------------- #>     Mean +/- SD    : -0.005 +/- 0.996 #>  #> Label: Example #>   # Create from a matrix (voxels x time) mat_data <- matrix(rnorm(prod(dim)), nrow = prod(dim[1:3]), ncol = dim[4]) dense_vec_mat <- DenseNeuroVec(data = mat_data, space = space) print(dense_vec_mat) #>  #> DenseNeuroVec (10.01 bytes MB) #>  #> - Spatial Info --------------------------- #> | Dimensions    : 64 x 64 x 32 (10 timepoints) #> | Total Voxels  : 131,072 #> | Spacing       : 3 x 3 x 4 #>  #> - Properties --------------------------- #> | Origin        : 0 x 0 x 0 #> | Orientation   : Left-to-Right Posterior-to-Anterior Inferior-to-Superior #>  #> - Statistics --------------------------- #>     Mean +/- SD    : -0.001 +/- 0.997 #>  #> Label: none #>"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/DenseNeuroVol-class.html","id":null,"dir":"Reference","previous_headings":"","what":"DenseNeuroVol Class — DenseNeuroVol-class","title":"DenseNeuroVol Class — DenseNeuroVol-class","text":"Represents three-dimensional brain image backed dense array. class combines spatial properties NeuroVol data storage capabilities array. Construct DenseNeuroVol instance","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/DenseNeuroVol-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DenseNeuroVol Class — DenseNeuroVol-class","text":"","code":"DenseNeuroVol(data, space, label = \"\", indices = NULL)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/DenseNeuroVol-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DenseNeuroVol Class — DenseNeuroVol-class","text":"data three-dimensional array space instance class NeuroSpace label character string indices optional 1-d index vector","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/DenseNeuroVol-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DenseNeuroVol Class — DenseNeuroVol-class","text":"DenseNeuroVol instance","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/DenseNeuroVol-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"DenseNeuroVol Class — DenseNeuroVol-class","text":"DenseNeuroVol objects used 3D brain images voxels contain meaningful data. provide efficient access individual voxel values suitable operations require frequent random access voxel data.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/DenseNeuroVol-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DenseNeuroVol Class — DenseNeuroVol-class","text":"","code":"# Create a simple 3D brain volume vol_data <- array(rnorm(64*64*64), c(64, 64, 64)) vol_space <- NeuroSpace(dim=c(64L, 64L, 64L), origin=c(0, 0, 0), spacing=c(1, 1, 1)) brain_vol <- new(\"DenseNeuroVol\", .Data=vol_data, space=vol_space)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/FileBackedNeuroVec-class.html","id":null,"dir":"Reference","previous_headings":"","what":"FileBackedNeuroVec Class — FileBackedNeuroVec-class","title":"FileBackedNeuroVec Class — FileBackedNeuroVec-class","text":"class representing four-dimensional brain image uses -demand loading memory-mapped file access. approach enables efficient handling large-scale brain imaging data loading required portions data memory needed. FileBackedNeuroVec class represents memory-efficient vector neuroimaging data stored disk rather memory. particularly useful large datasets memory constraints concern.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/FileBackedNeuroVec-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"FileBackedNeuroVec Class — FileBackedNeuroVec-class","text":"FileBackedNeuroVec objects provide memory-efficient solution working large 4D neuroimaging datasets. utilizing memory-mapped file access, class allows users work datasets exceed available RAM, loading necessary data segments memory accessed.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/FileBackedNeuroVec-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"FileBackedNeuroVec Class — FileBackedNeuroVec-class","text":"meta instance class FileMetaInfo containing file metadata file path, format, associated information.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/FileBackedNeuroVec-class.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"FileBackedNeuroVec Class — FileBackedNeuroVec-class","text":"FileBackedNeuroVec inherits : NeuroVec: Base class 4D brain images ArrayLike4D: Interface 4D array-like operations","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/FileBackedNeuroVec-class.html","id":"memory-management","dir":"Reference","previous_headings":"","what":"Memory Management","title":"FileBackedNeuroVec Class — FileBackedNeuroVec-class","text":"Data read disk -demand, reducing memory usage compared -memory storage. trade-slightly slower access times due disk /O operations.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/FileBackedNeuroVec-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"FileBackedNeuroVec Class — FileBackedNeuroVec-class","text":"","code":"# Load example 4D image file included with package file_path <- system.file(\"extdata\", \"global_mask_v4.nii\", package = \"neuroim2\") fbvec <- FileBackedNeuroVec(file_path)  # Get dimensions of the image dim(fbvec) #> [1] 64 64 25  4  # Extract first volume vol1 <- sub_vector(fbvec, 1)  # Extract multiple volumes vols <- sub_vector(fbvec, 1:2)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/FileBackedNeuroVec.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a File-Backed Neuroimaging Vector — FileBackedNeuroVec","title":"Create a File-Backed Neuroimaging Vector — FileBackedNeuroVec","text":"Constructs FileBackedNeuroVec instance, represents file-backed neuroimaging vector object. constructor provides memory-efficient access large neuroimaging datasets keeping data disk needed.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/FileBackedNeuroVec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a File-Backed Neuroimaging Vector — FileBackedNeuroVec","text":"","code":"FileBackedNeuroVec(file_name, label = basename(file_name))"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/FileBackedNeuroVec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a File-Backed Neuroimaging Vector — FileBackedNeuroVec","text":"file_name character string specifying path neuroimaging file. Supported formats include NIFTI (.nii) ANALYZE (.hdr/.img). label Optional character string providing label vector","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/FileBackedNeuroVec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a File-Backed Neuroimaging Vector — FileBackedNeuroVec","text":"new instance class FileBackedNeuroVec.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/FileBackedNeuroVec.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a File-Backed Neuroimaging Vector — FileBackedNeuroVec","text":"Create FileBackedNeuroVec Object function performs following operations: Reads header information specified file Validates dimensionality (must 4D data) Creates NeuroSpace object appropriate metadata Initializes file-backed vector minimal memory footprint","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/FileBackedNeuroVec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a File-Backed Neuroimaging Vector — FileBackedNeuroVec","text":"","code":"# Create a file-backed vector from a NIFTI file fbvec <- FileBackedNeuroVec(system.file(\"extdata\", \"global_mask_v4.nii\", package = \"neuroim2\"))  # Access specific volumes without loading entire dataset first_vol <- sub_vector(fbvec, 1)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/FileFormat-class.html","id":null,"dir":"Reference","previous_headings":"","what":"FileFormat Class — FileFormat-class","title":"FileFormat Class — FileFormat-class","text":"class represents neuroimaging file format descriptor, containing information file format, encoding, extensions header data components.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/FileFormat-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"FileFormat Class — FileFormat-class","text":"file_format character string specifying name file format (e.g., \"NIfTI\"). header_encoding character string specifying file encoding header file (e.g., \"raw\" binary, \"gzip\" gz compressed). header_extension character string specifying file extension header file (e.g., \"nii\" NIfTI single files). data_encoding character string specifying file encoding data file. data_extension character string specifying file extension data file (e.g., \"nii\" NIfTI single files).","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/FileFormat-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"FileFormat Class — FileFormat-class","text":"","code":"# Create a FileFormat object for NIfTI format nifti_format <- new(\"FileFormat\",                     file_format = \"NIfTI\",                     header_encoding = \"raw\",                     header_extension = \"nii\",                     data_encoding = \"raw\",                     data_extension = \"nii\")"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/FileFormat-operations.html","id":null,"dir":"Reference","previous_headings":"","what":"File Format Operations for Neuroimaging Data — FileFormat-operations","title":"File Format Operations for Neuroimaging Data — FileFormat-operations","text":"collection methods handling neuroimaging file formats separate header data files (e.g., ANALYZE, NIFTI). methods provide functionality file name validation, extension handling, file path manipulation.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/FileFormat-operations.html","id":"file-format-structure","dir":"Reference","previous_headings":"","what":"File Format Structure","title":"File Format Operations for Neuroimaging Data — FileFormat-operations","text":"Neuroimaging formats often use paired files: header file (e.g., '.hdr') containing metadata data file (e.g., '.img') containing actual image data","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/FileFormat-operations.html","id":"common-operations","dir":"Reference","previous_headings":"","what":"Common Operations","title":"File Format Operations for Neuroimaging Data — FileFormat-operations","text":"Validating file names format specifications Converting header data file names Checking file existence compatibility","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/FileMetaInfo-class.html","id":null,"dir":"Reference","previous_headings":"","what":"FileMetaInfo Class — FileMetaInfo-class","title":"FileMetaInfo Class — FileMetaInfo-class","text":"class extends MetaInfo include file-specific metadata neuroimaging data files. class extends FileMetaInfo NIfTI-specific metadata. class extends FileMetaInfo AFNI-specific metadata.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/FileMetaInfo-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"FileMetaInfo Class — FileMetaInfo-class","text":"header_file character string specifying name file containing meta information. data_file character string specifying name file containing image data. descriptor FileFormat object describing image file format. endian character string specifying byte order data ('little' 'big'). data_offset numeric value indicating number bytes preceding start image data data file. bytes_per_element integer specifying number bytes per data element. intercept numeric vector constant values added image data (one per sub-image). slope numeric vector multipliers image data (one per sub-image). header list format-specific attributes. nifti_header list attributes specific NIfTI file format. afni_header list attributes specific AFNI file format.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/FileSource-class.html","id":null,"dir":"Reference","previous_headings":"","what":"FileSource Class — FileSource-class","title":"FileSource Class — FileSource-class","text":"Base class representing data source images. purpose class provide layer low level IO image loading functionality.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/FileSource-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"FileSource Class — FileSource-class","text":"meta_info object class FileMetaInfo containing meta information data source.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/IndexLookupVol-class.html","id":null,"dir":"Reference","previous_headings":"","what":"IndexLookupVol Class — IndexLookupVol-class","title":"IndexLookupVol Class — IndexLookupVol-class","text":"three-dimensional brain image class serves map 1D grid indices table values. class primarily used conjunction SparseNeuroVec class efficiently represent access sparse neuroimaging data. IndexLookupVol class provides efficient indexing coordinate lookup functionality 3D neuroimaging data. maintains mapping linear indices 3D coordinates, optimizing memory usage access speed sparse volumes. Creates IndexLookupVol object, provides efficient bidirectional mapping linear indices 3D coordinates neuroimaging volume. particularly useful working masked sparse brain volumes.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/IndexLookupVol-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"IndexLookupVol Class — IndexLookupVol-class","text":"","code":"IndexLookupVol(space, indices)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/IndexLookupVol-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"IndexLookupVol Class — IndexLookupVol-class","text":"space NeuroSpace object defining 3D space dimensions, spacing, orientation. indices integer vector containing linear indices voxels include lookup volume. 1-based indices within range space.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/IndexLookupVol-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"IndexLookupVol Class — IndexLookupVol-class","text":"object class IndexLookupVol containing: mapping linear indices sparse positions original space information subset included voxel indices","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/IndexLookupVol-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"IndexLookupVol Class — IndexLookupVol-class","text":"IndexLookupVol class extends NeuroVol provides mechanism efficient lookup mapping sparse 3D neuroimaging data. stores indices non-zero voxels corresponding mappings, allowing memory-efficient representation large, sparse brain images. Create IndexLookupVol Object","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/IndexLookupVol-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"IndexLookupVol Class — IndexLookupVol-class","text":"space NeuroSpace object representing 3D space brain image. indices integer vector containing 1D indices non-zero voxels grid. map integer vector containing mapping 1D indices table values.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/IndexLookupVol-class.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"IndexLookupVol Class — IndexLookupVol-class","text":"class inherits methods NeuroVol. Additional methods specific index lookup mapping operations may available.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/IndexLookupVol-class.html","id":"implementation-details","dir":"Reference","previous_headings":"","what":"Implementation Details","title":"IndexLookupVol Class — IndexLookupVol-class","text":"class uses integer mapping array O(1) lookups linear indices corresponding positions sparse representation.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/IndexLookupVol-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"IndexLookupVol Class — IndexLookupVol-class","text":"","code":"# Create a NeuroSpace object space <- NeuroSpace(dim = c(2L, 2L, 2L), origin = c(0, 0, 0), spacing = c(1, 1, 1))  # Create a 3D mask mask <- array(c(TRUE, FALSE, TRUE, FALSE, FALSE, TRUE, FALSE, TRUE), dim = c(2, 2, 2))  # Create indices and map for the IndexLookupVol indices <- which(mask) map <- seq_along(indices)  # Create an IndexLookupVol object ilv <- IndexLookupVol(space = space, indices = as.integer(indices))  # Access the indices print(ilv@indices) #> [1] 1 3 6 8  # Access the map print(ilv@map) #> [1] 1 0 2 0 0 3 0 4   # Create a 64x64x64 space space <- NeuroSpace(c(64, 64, 64), c(1, 1, 1), c(0, 0, 0))  # Create a lookup volume with random indices indices <- sample(1:262144, 10000)  # Select 10000 random voxels ilv <- IndexLookupVol(space, indices)  # Look up coordinates for specific indices coords <- coords(ilv, indices[1:10])"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/Kernel-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Kernel — Kernel-class","title":"Kernel — Kernel-class","text":"class representing image kernel image processing, convolution filtering operations brain images.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/Kernel-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Kernel — Kernel-class","text":"width numeric value representing width kernel voxels. width typically odd number maintain symmetry. weights numeric vector containing weights associated voxel kernel. voxels matrix containing relative voxel coordinates kernel. row represents voxel coordinate (x, y, z). coords matrix containing relative real-world coordinates kernel, corresponding voxel coordinates.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/Kernel.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Kernel object from a function of distance from kernel center — Kernel","title":"Create a Kernel object from a function of distance from kernel center — Kernel","text":"function creates Kernel object using kernel function (FUN) takes distance center kernel first argument.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/Kernel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Kernel object from a function of distance from kernel center — Kernel","text":"","code":"Kernel(kerndim, vdim, FUN = dnorm, ...)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/Kernel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Kernel object from a function of distance from kernel center — Kernel","text":"kerndim numeric vector representing dimensions voxels kernel. vdim numeric vector representing dimensions voxels real units. FUN kernel function taking first argument representing distance center kernel (default: dnorm). ... Additional parameters kernel function, FUN.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/Kernel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Kernel object from a function of distance from kernel center — Kernel","text":"Kernel object specified dimensions, voxel dimensions, kernel function.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/Kernel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Kernel object from a function of distance from kernel center — Kernel","text":"","code":"kdim <- c(3, 3, 3) vdim <- c(1, 1, 1) k <- Kernel(kerndim = kdim, vdim = vdim, FUN = dnorm, sd = 1)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/LogicalNeuroVol-class.html","id":null,"dir":"Reference","previous_headings":"","what":"LogicalNeuroVol Class — LogicalNeuroVol-class","title":"LogicalNeuroVol Class — LogicalNeuroVol-class","text":"class represents three-dimensional brain image values either TRUE FALSE. particularly useful creating managing binary masks brain images. function constructs LogicalNeuroVol instance.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/LogicalNeuroVol-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"LogicalNeuroVol Class — LogicalNeuroVol-class","text":"","code":"LogicalNeuroVol(data, space, label = \"\", indices = NULL)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/LogicalNeuroVol-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"LogicalNeuroVol Class — LogicalNeuroVol-class","text":"data three-dimensional array, 1D vector length equal prod(dim(space)), set indices elements TRUE. space instance class NeuroSpace. label character string. indices optional 1-d index vector.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/LogicalNeuroVol-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"LogicalNeuroVol Class — LogicalNeuroVol-class","text":"LogicalNeuroVol instance.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/LogicalNeuroVol-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"LogicalNeuroVol Class — LogicalNeuroVol-class","text":"LogicalNeuroVol class extends DenseNeuroVol class, inheriting spatial properties array-based storage. However, constrains values logical (TRUE FALSE), making ideal representing binary masks, regions interest (ROIs), segmentation results neuroimaging analyses.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/LogicalNeuroVol-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"LogicalNeuroVol Class — LogicalNeuroVol-class","text":".Data logical array containing binary volume data. space NeuroSpace object defining spatial properties volume.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/LogicalNeuroVol-class.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"LogicalNeuroVol Class — LogicalNeuroVol-class","text":"class inherits methods DenseNeuroVol. Additional methods specific logical operations may available.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/LogicalNeuroVol-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"LogicalNeuroVol Class — LogicalNeuroVol-class","text":"","code":"# Create a simple logical brain volume (e.g., a mask) dim <- c(64L, 64L, 64L) mask_data <- array(sample(c(TRUE, FALSE), prod(dim), replace = TRUE), dim) mask_space <- NeuroSpace(dim = dim, origin = c(0, 0, 0), spacing = c(1, 1, 1)) brain_mask <- new(\"LogicalNeuroVol\", .Data = mask_data, space = mask_space)  # Check the proportion of TRUE voxels true_proportion <- sum(brain_mask) / prod(dim(brain_mask)) print(paste(\"Proportion of TRUE voxels:\", true_proportion)) #> [1] \"Proportion of TRUE voxels: 0.500431060791016\"  # Load an example brain mask brain_mask <- read_vol(system.file(\"extdata\", \"global_mask_v4.nii\", package=\"neuroim2\"))  # Convert the brain mask to a LogicalNeuroVol logical_vol <- LogicalNeuroVol(brain_mask, space(brain_mask))"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/MappedNeuroVec-class.html","id":null,"dir":"Reference","previous_headings":"","what":"MappedNeuroVec Class — MappedNeuroVec-class","title":"MappedNeuroVec Class — MappedNeuroVec-class","text":"class representing four-dimensional brain image backed memory-mapped file. class provides efficient access large brain images without loading entire dataset memory. MappedNeuroVec class provides memory-efficient access large neuroimaging datasets memory mapping. allows processing datasets larger available RAM keeping data disk loading requested portions memory. Creates MappedNeuroVec object provides efficient, memory-mapped access large neuroimaging datasets. allows processing data larger available RAM keeping disk loading requested portions memory.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/MappedNeuroVec-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MappedNeuroVec Class — MappedNeuroVec-class","text":"","code":"MappedNeuroVec(file_name, label = basename(file_name))"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/MappedNeuroVec-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MappedNeuroVec Class — MappedNeuroVec-class","text":"file_name Character string specifying path neuroimaging file. Supported formats include NIFTI (.nii) ANALYZE (.hdr/.img). label Optional character string providing label vector","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/MappedNeuroVec-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MappedNeuroVec Class — MappedNeuroVec-class","text":"new MappedNeuroVec object providing: Memory-mapped access data Spatial temporal indexing Efficient data extraction Automatic memory management","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/MappedNeuroVec-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"MappedNeuroVec Class — MappedNeuroVec-class","text":"MappedNeuroVec objects use memory-mapped files store access large 4D brain images efficiently. approach allows rapid access specific portions data without requiring entire dataset loaded memory . Create Memory-Mapped Neuroimaging Vector function implements several key features: Zero-copy access file data Automatic memory management Support large datasets Efficient random access Proper cleanup object deletion Memory mapping particularly useful : Working large datasets portions data needed Random access required Multiple processes need share data","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/MappedNeuroVec-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"MappedNeuroVec Class — MappedNeuroVec-class","text":"filemap object class mmap representing memory-mapped file containing brain image data. offset integer representing byte offset within memory-mapped file brain image data starts.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/MappedNeuroVec-class.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"MappedNeuroVec Class — MappedNeuroVec-class","text":"class inherits methods NeuroVec implements ArrayLike4D interface. Additional methods specific memory-mapped operations may available.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/MappedNeuroVec-class.html","id":"implementation-details","dir":"Reference","previous_headings":"","what":"Implementation Details","title":"MappedNeuroVec Class — MappedNeuroVec-class","text":"class uses mmap package establish memory mapping file memory space. Key features include: Zero-copy access file data Automatic memory management Support large datasets Efficient random access","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/MappedNeuroVec-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"MappedNeuroVec Class — MappedNeuroVec-class","text":"","code":"# Create a MappedNeuroVec object (pseudo-code) file_path <- system.file(\"extdata\", \"global_mask_v4.nii\", package = \"neuroim2\") mapped_vec <- MappedNeuroVec(file_path)  # Access a subset of the data subset <- mapped_vec[,,, 1:2]   # Create mapped vector from NIFTI file mvec <- MappedNeuroVec(system.file(\"extdata\", \"global_mask_v4.nii\", package = \"neuroim2\"))  # Extract first volume vol1 <- mvec[[1]]  # Get dimensions dim(mvec) #> [1] 64 64 25  4  # Access specific timepoint timepoint <- mvec[, , , 2]"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/MappedNeuroVecSource-class.html","id":null,"dir":"Reference","previous_headings":"","what":"MappedNeuroVecSource Class — MappedNeuroVecSource-class","title":"MappedNeuroVecSource Class — MappedNeuroVecSource-class","text":"class used produce MappedNeuroVec instance. encapsulates necessary information create memory-mapped representation 4D neuroimaging dataset. Creates MappedNeuroVecSource object manages memory mapping neuroimaging file memory space. typically used internally MappedNeuroVec can created directly custom access patterns.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/MappedNeuroVecSource-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MappedNeuroVecSource Class — MappedNeuroVecSource-class","text":"","code":"MappedNeuroVecSource(file_name)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/MappedNeuroVecSource-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MappedNeuroVecSource Class — MappedNeuroVecSource-class","text":"file_name Character string specifying path neuroimaging file. Supported formats include NIFTI (.nii) ANALYZE (.hdr/.img).","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/MappedNeuroVecSource-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MappedNeuroVecSource Class — MappedNeuroVecSource-class","text":"new MappedNeuroVecSource object containing: Meta information dataset File format details Dimensional information","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/MappedNeuroVecSource-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"MappedNeuroVecSource Class — MappedNeuroVecSource-class","text":"MappedNeuroVecSource acts factory MappedNeuroVec objects. additional slots beyond parent class, specifies intent create memory-mapped representation neuroimaging data. class typically used data loading pipelines large datasets need accessed efficiently without loading entire dataset memory. Create Memory-Mapped Source Neuroimaging Data function performs several important checks: Validates file existence permissions Reads validates header information Ensures proper dimensionality (>= 3D) Verifies file format compatibility","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/MappedNeuroVecSource-class.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"MappedNeuroVecSource Class — MappedNeuroVecSource-class","text":"MappedNeuroVecSource inherits : NeuroVecSource: Base class NeuroVec source objects","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/MappedNeuroVecSource-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"MappedNeuroVecSource Class — MappedNeuroVecSource-class","text":"","code":"# Create a MappedNeuroVecSource mapped_source <- new(\"MappedNeuroVecSource\")  # \\donttest{ # Create source from NIFTI file source <- MappedNeuroVecSource(system.file(\"extdata\", \"global_mask_v4.nii\", package = \"neuroim2\"))  # Check dimensions dim(source@meta_info) #> [1] 64 64 25  4  # View header information str(source@meta_info) #> Formal class 'NIFTIMetaInfo' [package \"neuroim2\"] with 17 slots #>   ..@ nifti_header     : list() #>   ..@ header_file      : chr \"/home/runner/work/_temp/Library/neuroim2/extdata/global_mask_v4.nii\" #>   ..@ data_file        : chr \"/home/runner/work/_temp/Library/neuroim2/extdata/global_mask_v4.nii\" #>   ..@ descriptor       :Formal class 'NIFTIFormat' [package \"neuroim2\"] with 5 slots #>   .. .. ..@ file_format     : chr \"NIFTI\" #>   .. .. ..@ header_encoding : chr \"raw\" #>   .. .. ..@ header_extension: chr \"nii\" #>   .. .. ..@ data_encoding   : chr \"raw\" #>   .. .. ..@ data_extension  : chr \"nii\" #>   ..@ endian           : chr \"little\" #>   ..@ data_offset      : num 352 #>   ..@ bytes_per_element: int 4 #>   ..@ intercept        : num 0 #>   ..@ slope            : num 1 #>   ..@ header           :List of 41 #>   .. ..$ file_type     : chr \"NIfTI\" #>   .. ..$ encoding      : chr \"binary\" #>   .. ..$ version       : chr \"1\" #>   .. ..$ file_name     : chr \"/home/runner/work/_temp/Library/neuroim2/extdata/global_mask_v4.nii\" #>   .. ..$ endian        : chr \"little\" #>   .. ..$ diminfo       : int 0 #>   .. ..$ dimensions    : num [1:8] 4 64 64 25 4 1 1 1 #>   .. ..$ num_dimensions: num 4 #>   .. ..$ intent1       : num 0 #>   .. ..$ intent2       : num 0 #>   .. ..$ intent3       : num 0 #>   .. ..$ intent_code   : int 0 #>   .. ..$ datatype      : int 16 #>   .. ..$ data_storage  : chr \"FLOAT\" #>   .. ..$ bitpix        : int 32 #>   .. ..$ slice_start   : int 0 #>   .. ..$ pixdim        : num [1:8] -1 3.5 3.5 3.7 0 ... #>   .. ..$ qfac          : num -1 #>   .. ..$ vox_offset    : num 352 #>   .. ..$ scl_slope     : num 1 #>   .. ..$ scl_intercept : num 0 #>   .. ..$ slice_end     : int 0 #>   .. ..$ slice_code    : int 0 #>   .. ..$ xyzt_units    : int 2 #>   .. ..$ cal_max       : num 0 #>   .. ..$ cal_min       : num 0 #>   .. ..$ slice_duration: num 0 #>   .. ..$ toffset       : num 0 #>   .. ..$ glmax         : int 0 #>   .. ..$ glmin         : int 0 #>   .. ..$ description   : int [1:80] 0 0 0 0 0 0 0 0 0 0 ... #>   .. ..$ auxfile       : int [1:24] 0 0 0 0 0 0 0 0 0 0 ... #>   .. ..$ qform_code    : int 1 #>   .. ..$ sform_code    : int 1 #>   .. ..$ quaternion    : num [1:3] 0 1 0 #>   .. ..$ qoffset       : num [1:3] 112 -108 -46.2 #>   .. ..$ qform         : num [1:4, 1:4] -3.5 0 0 0 0 3.5 0 0 0 0 ... #>   .. ..$ sform         : num [1:4, 1:4] -3.5 0 0 0 0 3.5 0 0 0 0 ... #>   .. ..$ intent_name   : chr [1:16] \"\" \"\" \"\" \"\" ... #>   .. ..$ magic         : chr \"n+1\" #>   .. ..$ onefile       : logi TRUE #>   ..@ data_type        : chr \"FLOAT\" #>   ..@ dims             : num [1:4] 64 64 25 4 #>   ..@ spatial_axes     :Formal class 'AxisSet3D' [package \"neuroim2\"] with 4 slots #>   .. .. ..@ k   :Formal class 'NamedAxis' [package \"neuroim2\"] with 2 slots #>   .. .. .. .. ..@ axis     : chr \"Inferior-to-Superior\" #>   .. .. .. .. ..@ direction: num [1:3] 0 0 1 #>   .. .. ..@ j   :Formal class 'NamedAxis' [package \"neuroim2\"] with 2 slots #>   .. .. .. .. ..@ axis     : chr \"Posterior-to-Anterior\" #>   .. .. .. .. ..@ direction: num [1:3] 0 1 0 #>   .. .. ..@ i   :Formal class 'NamedAxis' [package \"neuroim2\"] with 2 slots #>   .. .. .. .. ..@ axis     : chr \"Right-to-Left\" #>   .. .. .. .. ..@ direction: num [1:3] -1 0 0 #>   .. .. ..@ ndim: int 3 #>   ..@ additional_axes  :Formal class 'AxisSet' [package \"neuroim2\"] with 1 slot #>   .. .. ..@ ndim: int 0 #>   ..@ spacing          : num [1:3] 3.5 3.5 3.7 #>   ..@ origin           : num [1:3] 112 -108 -46.2 #>   ..@ label            : chr \"global_mask_v4\" # }"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/MetaInfo-class.html","id":null,"dir":"Reference","previous_headings":"","what":"MetaInfo Class — MetaInfo-class","title":"MetaInfo Class — MetaInfo-class","text":"class encapsulates meta information neuroimaging data types, including spatial temporal characteristics, data type, labeling.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/MetaInfo-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"MetaInfo Class — MetaInfo-class","text":"MetaInfo class provides structured way store access essential metadata neuroimaging data. includes information data type, spatial temporal dimensions, voxel spacing, coordinate system origin.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/MetaInfo-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"MetaInfo Class — MetaInfo-class","text":"data_type character string specifying data type code (e.g., \"FLOAT\", \"INT\"). dims numeric vector representing image dimensions. spatial_axes AxisSet3D object representing image axes spatial dimensions (x, y, z). additional_axes AxisSet object representing axes dimensions beyond spatial (e.g., time, color band, direction). spacing numeric vector representing voxel dimensions real-world units. origin numeric vector representing coordinate origin. label character vector containing name(s) images data series.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/MetaInfo-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"MetaInfo Class — MetaInfo-class","text":"","code":"# Create a MetaInfo object meta_info <- new(\"MetaInfo\",                  data_type = \"FLOAT\",                  dims = c(64, 64, 32, 100),                  spatial_axes = new(\"AxisSet3D\"),                  additional_axes = new(\"AxisSet\"),                  spacing = c(3, 3, 4),                  origin = c(0, 0, 0),                  label = \"fMRI_run1\")"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/MetaInfo.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Neuroimaging Metadata Object — MetaInfo","title":"Create Neuroimaging Metadata Object — MetaInfo","text":"Creates MetaInfo object containing essential metadata neuroimaging data,   including dimensions, spacing, orientation, data type information.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/MetaInfo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Neuroimaging Metadata Object — MetaInfo","text":"","code":"MetaInfo(   Dim,   spacing,   origin = rep(0, length(spacing)),   data_type = \"FLOAT\",   label = \"\",   spatial_axes = OrientationList3D$AXIAL_LPI,   additional_axes = NullAxis )"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/MetaInfo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Neuroimaging Metadata Object — MetaInfo","text":"Dim Integer vector. Image dimensions (e.g., c(64, 64, 32) 3D). spacing Numeric vector. Voxel dimensions mm. origin Numeric vector. Coordinate origin. Default zero vector. data_type Character. Data type (e.g., \"FLOAT\", \"SHORT\"). Default \"FLOAT\". label Character. Image label(s). Default \"\". spatial_axes Object. Spatial orientation. Default OrientationList3D$AXIAL_LPI. additional_axes Object. Non-spatial axes. Default NullAxis.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/MetaInfo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Neuroimaging Metadata Object — MetaInfo","text":"MetaInfo object","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/MetaInfo.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create Neuroimaging Metadata Object — MetaInfo","text":"Create MetaInfo Object MetaInfo object fundamental : Spatial interpretation image data Data type handling conversion Memory allocation mapping File /O operations Input validation ensures: Dimensions positive integers Spacing values positive Origin coordinates finite Data type supported","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/MetaInfo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Neuroimaging Metadata Object — MetaInfo","text":"","code":"# Create metadata for 3D structural MRI meta <- MetaInfo(   Dim = c(256, 256, 180),   spacing = c(1, 1, 1),   data_type = \"FLOAT\",   label = \"T1w\" )  # Get image dimensions dim(meta) #> NULL  # Get transformation matrix trans(meta) #>      [,1] [,2] [,3] [,4] #> [1,]    1    0    0    0 #> [2,]    0    1    0    0 #> [3,]    0    0    1    0 #> [4,]    0    0    0    1"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NIFTIMetaInfo.html","id":null,"dir":"Reference","previous_headings":"","what":"Create NIFTI Format Metadata Object — NIFTIMetaInfo","title":"Create NIFTI Format Metadata Object — NIFTIMetaInfo","text":"Creates NIFTIMetaInfo object containing format-specific metadata   NIFTI format neuroimaging files.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NIFTIMetaInfo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create NIFTI Format Metadata Object — NIFTIMetaInfo","text":"","code":"NIFTIMetaInfo(descriptor, nifti_header)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NIFTIMetaInfo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create NIFTI Format Metadata Object — NIFTIMetaInfo","text":"descriptor NIFTIFormat object specifying file format details nifti_header List containing NIFTI header information","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NIFTIMetaInfo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create NIFTI Format Metadata Object — NIFTIMetaInfo","text":"NIFTIMetaInfo object","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NIFTIMetaInfo.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create NIFTI Format Metadata Object — NIFTIMetaInfo","text":"Create NIFTIMetaInfo Object NIFTIMetaInfo object extends MetaInfo NIFTI-specific features: NIFTI header fields (qform, sform matrices) Data scaling (slope, intercept) File organization (separate vs. single file) Orientation information Validation ensures: Valid NIFTI format Consistent dimensions Valid transformation matrices Proper data scaling","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NIFTIMetaInfo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create NIFTI Format Metadata Object — NIFTIMetaInfo","text":"","code":"# Read NIFTI header header <- read_header(system.file(\"extdata\", \"global_mask_v4.nii\", package=\"neuroim2\"))  # Create format descriptor fmt <- new(\"NIFTIFormat\",            file_format = \"NIFTI\",            header_encoding = \"raw\",            header_extension = \"nii\",            data_encoding = \"raw\",            data_extension = \"nii\")  # Create metadata meta <- NIFTIMetaInfo(fmt, header@header)  # Check dimensions dim(meta) #> [1] 64 64 25  4"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NamedAxis-class.html","id":null,"dir":"Reference","previous_headings":"","what":"NamedAxis — NamedAxis-class","title":"NamedAxis — NamedAxis-class","text":"class represents axis name attribute","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NamedAxis-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"NamedAxis — NamedAxis-class","text":"axis name axis direction axis (-1,+1)","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroBucket-class.html","id":null,"dir":"Reference","previous_headings":"","what":"NeuroBucket — NeuroBucket-class","title":"NeuroBucket — NeuroBucket-class","text":"four-dimensional image consists sequence labeled image volumes backed list","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroBucket-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"NeuroBucket — NeuroBucket-class","text":"labels names sub-volumes contained bucket data list NeuroVol instances names corresponding volume labels","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroHyperVec-class.html","id":null,"dir":"Reference","previous_headings":"","what":"NeuroHyperVec Class — NeuroHyperVec-class","title":"NeuroHyperVec Class — NeuroHyperVec-class","text":"class representing five-dimensional brain image, first three dimensions spatial, fourth dimension typically time trials, fifth dimension represents features within trial. NeuroHyperVec class provides efficient container five-dimensional neuroimaging data spatial dimensions sparse. particularly suited analyses involving multiple features per trial/timepoint, basis functions, spectral components, multi-modal measurements.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroHyperVec-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NeuroHyperVec Class — NeuroHyperVec-class","text":"","code":"# S4 method for class 'NeuroHyperVec,ANY,ANY,ANY' x[i, j, k, l, m, ..., drop = TRUE]"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroHyperVec-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"NeuroHyperVec Class — NeuroHyperVec-class","text":"x NeuroHyperVec object , j, k, l, m Indices dimension ... Additional arguments (used) drop Whether drop dimensions length 1","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroHyperVec-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"NeuroHyperVec Class — NeuroHyperVec-class","text":"Five-Dimensional Sparse Neuroimaging Data Container class organizes data 5D structure: Dimensions 1-3: Spatial coordinates (x, y, z) Dimension 4: Trials timepoints Dimension 5: Features measurements Data stored internally three-dimensional array efficiency: Dimensions 1: Features (dimension 5) Dimensions 2: Trials (dimension 4) Dimensions 3: Voxels (flattened spatial) Key features: Memory-efficient sparse storage spatial dimensions Fast access feature vectors time series Flexible indexing across dimensions Maintains spatial relationships metadata","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroHyperVec-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"NeuroHyperVec Class — NeuroHyperVec-class","text":"mask object class LogicalNeuroVol defining sparse spatial domain brain image. data 3D array dimensions [features x trials x voxels] containing neuroimaging data. space NeuroSpace object representing dimensions voxel spacing neuroimaging data. lookup_map integer vector O(1) spatial index lookups. mask LogicalNeuroVol object defining spatial mask. data three-dimensional array dimensions [features x trials x voxels] containing data. space NeuroSpace object defining 5D space. lookup_map integer vector O(1) spatial index lookups.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroHyperVec-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"NeuroHyperVec Class — NeuroHyperVec-class","text":"","code":"# Create a simple 5D dataset (10x10x10 spatial, 5 trials, 3 features) dims <- c(10, 10, 10) space <- NeuroSpace(c(dims, 5, 3))  # Create a sparse mask (20% of voxels) mask_data <- array(runif(prod(dims)) < 0.2, dims) mask <- LogicalNeuroVol(mask_data, NeuroSpace(dims))  # Generate random data for active voxels n_voxels <- sum(mask_data) data <- array(rnorm(3 * 5 * n_voxels), dim = c(3, 5, n_voxels))  # [features x trials x voxels]  # Create NeuroHyperVec object hvec <- NeuroHyperVec(data, space, mask)  # Access operations # Get data for specific voxel across all trials/features series(hvec, 5, 5, 5) #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    0 #> [2,]    0    0    0    0    0 #> [3,]    0    0    0    0    0  # Extract a 3D volume for specific trial and feature hvec[,,,2,1] #> , , 1 #>  #>              [,1]       [,2]      [,3]       [,4]       [,5]        [,6] #>  [1,]  0.00000000  0.0000000 0.0000000  0.0000000  0.0000000  0.00000000 #>  [2,]  0.00000000  1.0404999 0.0000000  0.0000000  0.0000000  0.01325173 #>  [3,] -0.43979877 -0.8051761 0.0000000  0.0000000 -0.1987408 -0.48725179 #>  [4,]  0.00000000  0.0000000 0.0000000  0.0000000  0.0000000  0.89532866 #>  [5,]  0.00000000 -1.3777868 0.0000000 -0.2161112  0.0000000  0.00000000 #>  [6,]  0.00000000  0.0000000 0.0000000  0.0000000  0.0000000  0.00000000 #>  [7,] -0.05130566  0.0000000 0.7941954  0.0000000  0.0000000  0.00000000 #>  [8,]  0.00000000  0.3765108 0.0000000  0.7848214  0.0000000  0.00000000 #>  [9,]  0.00000000  0.0000000 0.0000000  0.0000000 -1.2441360  0.00000000 #> [10,]  0.00000000  0.0000000 0.0000000  0.0000000  0.0000000  0.00000000 #>            [,7]       [,8]       [,9]     [,10] #>  [1,] 0.0000000  0.0000000  0.0000000 0.0000000 #>  [2,] 0.0000000  0.0000000  0.0000000 0.0000000 #>  [3,] 0.0000000  0.0000000  0.5128688 0.0000000 #>  [4,] 0.0000000  0.9320505  0.0000000 0.0000000 #>  [5,] 0.0000000  0.0000000  0.0000000 0.0000000 #>  [6,] 0.0000000 -0.2551572  0.0000000 0.0000000 #>  [7,] 0.0000000 -0.7349525  0.0000000 0.0000000 #>  [8,] 0.0000000  0.0000000  0.0000000 0.0000000 #>  [9,] 0.0000000  0.0000000 -1.3089513 0.0000000 #> [10,] 0.4598022  0.0000000  0.0000000 0.8306207 #>  #> , , 2 #>  #>             [,1]       [,2]     [,3]       [,4]       [,5]       [,6] #>  [1,]  0.0000000  0.0000000 0.000000  0.6805044 -0.9324005  0.0000000 #>  [2,] -0.4663474  0.0000000 0.000000  0.0000000 -1.2635755 -0.7434976 #>  [3,]  0.0000000  0.0000000 0.000000 -0.9032888  0.0000000  0.0000000 #>  [4,]  0.0000000  0.0000000 0.000000  1.3668869  0.0000000  0.0000000 #>  [5,]  0.0000000  0.0000000 0.000000  0.0000000  0.0000000  0.0000000 #>  [6,]  0.0000000  0.0000000 0.000000  0.0000000 -0.9121381  0.0000000 #>  [7,]  0.0000000  0.0000000 1.259754  0.0000000  0.0000000  0.0000000 #>  [8,]  0.0000000  0.0000000 0.000000  0.0000000  0.0000000  0.0000000 #>  [9,]  0.0000000  0.0000000 0.000000  0.0000000  0.0000000  0.0000000 #> [10,]  0.0000000 -0.3176069 0.000000  0.0000000  0.0000000  0.0000000 #>             [,7]      [,8]        [,9]      [,10] #>  [1,]  0.0000000 0.0000000  0.00000000  0.0000000 #>  [2,]  0.0000000 0.0000000 -1.29138195  0.0000000 #>  [3,] -0.4720966 0.0000000  0.00000000  0.0000000 #>  [4,]  0.0000000 0.9536053  0.00000000  0.0000000 #>  [5,]  0.0000000 0.0000000  0.00000000  1.1720330 #>  [6,]  0.0000000 0.0000000  0.00000000  0.0000000 #>  [7,]  0.0000000 0.0000000 -0.05976167  0.0000000 #>  [8,]  0.1344962 0.0000000  0.00000000  0.0000000 #>  [9,]  0.0000000 0.0000000  0.00000000  0.0000000 #> [10,]  0.0000000 0.0000000  0.00000000 -0.8664894 #>  #> , , 3 #>  #>       [,1]     [,2]       [,3]       [,4]      [,5]       [,6]       [,7] #>  [1,]    0 1.514937  0.0000000  0.0000000 0.0000000 -0.5965181  0.0000000 #>  [2,]    0 0.000000  0.0000000  1.3640070 0.0000000  0.0000000  0.0000000 #>  [3,]    0 0.000000  0.0000000 -0.6870889 0.0000000  0.0000000  0.0000000 #>  [4,]    0 0.000000 -0.1728739  0.0000000 0.0000000  0.0000000  0.0000000 #>  [5,]    0 0.000000  0.0000000  0.0000000 0.0000000  0.4520542  0.0000000 #>  [6,]    0 0.000000  0.0000000  0.0000000 0.0000000  0.0000000  0.0000000 #>  [7,]    0 0.000000  0.0000000  0.0000000 0.1032508  0.0000000 -0.3305394 #>  [8,]    0 0.000000  0.0000000  0.0000000 0.0000000 -2.1435004  0.0000000 #>  [9,]    0 1.707345  0.0000000  0.0000000 0.0000000  0.0000000  0.2597764 #> [10,]    0 0.000000  0.0000000  0.0000000 0.0000000 -0.4552385  0.0000000 #>             [,8] [,9]     [,10] #>  [1,]  0.0000000    0 0.8931473 #>  [2,]  0.0000000    0 0.0000000 #>  [3,]  0.0000000    0 0.0000000 #>  [4,]  0.2402700    0 0.0000000 #>  [5,] -0.2311434    0 0.0000000 #>  [6,]  0.0000000    0 0.0000000 #>  [7,]  0.0000000    0 0.0000000 #>  [8,]  0.0000000    0 0.0000000 #>  [9,]  0.0000000    0 0.0000000 #> [10,]  0.0000000    0 0.0000000 #>  #> , , 4 #>  #>             [,1]      [,2]      [,3]       [,4] [,5]       [,6]      [,7] #>  [1,] -0.6674656  0.000000  0.000000 0.00000000    0  0.0000000  0.000000 #>  [2,]  0.0000000  0.000000 -0.291054 0.00000000    0  0.0000000 -1.121393 #>  [3,]  0.0000000  0.000000  0.000000 0.65784975    0  0.0000000  0.000000 #>  [4,]  0.0000000  0.000000  0.000000 0.00000000    0  0.0000000  0.000000 #>  [5,]  0.0000000  0.000000  0.000000 0.00000000    0 -1.0637954  0.000000 #>  [6,]  0.4706340  0.000000  0.000000 0.00000000    0  0.0000000  0.000000 #>  [7,]  0.0000000  0.000000  0.000000 0.00000000    0  0.0000000  0.000000 #>  [8,]  0.0000000  0.000000  0.000000 0.00000000    0  0.0000000  0.000000 #>  [9,]  0.0000000 -1.229384  0.000000 0.05777532    0  0.0000000  0.000000 #> [10,]  0.0000000  0.000000  0.000000 0.54955257    0 -0.8158955  0.000000 #>            [,8]       [,9]      [,10] #>  [1,]  0.000000  0.0000000 -0.8667013 #>  [2,]  0.000000  0.0000000  0.0000000 #>  [3,]  0.000000  0.0000000  0.0000000 #>  [4,]  0.000000  0.0000000  0.0000000 #>  [5,] -0.698654  0.0000000 -0.6551059 #>  [6,]  0.000000 -2.4921894  0.0000000 #>  [7,]  0.000000 -0.4061575 -1.2311501 #>  [8,]  0.000000  0.0000000  0.0000000 #>  [9,]  0.000000  0.0000000  0.0000000 #> [10,]  0.000000  0.0000000  0.0000000 #>  #> , , 5 #>  #>              [,1]       [,2]        [,3]      [,4]       [,5]        [,6] #>  [1,] -0.08861383  0.0000000  0.00000000 -0.364904  0.0000000 -0.25624884 #>  [2,]  0.00000000 -0.1037142 -0.23449229  0.000000 -1.6441044 -0.24142928 #>  [3,]  0.00000000 -1.0739085  0.00000000  0.000000  0.0000000  0.00000000 #>  [4,]  1.06805664  0.0000000  0.00000000  0.000000 -1.1106262  0.00000000 #>  [5,]  0.84077875  0.0000000  0.00000000  0.000000  0.0000000  0.00000000 #>  [6,]  0.17431688  0.0000000  0.76329670  0.000000  0.0000000 -1.17040117 #>  [7,]  0.00000000  0.0000000 -0.06401328  0.000000  0.0000000  1.78956557 #>  [8,]  0.00000000  0.0000000  0.00000000  0.000000  0.0000000  0.00000000 #>  [9,]  0.00000000  0.0000000  0.00000000  0.000000 -0.8548826  0.09829919 #> [10,]  0.00000000  0.0000000  0.00000000  0.000000  0.0000000  0.00000000 #>             [,7]      [,8]       [,9]     [,10] #>  [1,]  0.0000000 1.7819000 -0.7904945  0.000000 #>  [2,] -0.6513149 0.4360502  0.0000000  0.000000 #>  [3,]  0.0000000 0.0000000  0.0000000  0.000000 #>  [4,]  0.0000000 0.0000000 -0.4564257 -0.840887 #>  [5,]  2.6080344 0.0000000  0.0000000  0.000000 #>  [6,]  0.0000000 0.0000000  0.0000000  0.000000 #>  [7,]  0.0000000 0.0000000  0.0000000  2.129556 #>  [8,]  0.0000000 0.0000000  0.0000000  0.000000 #>  [9,]  0.0000000 0.0000000  0.0000000  0.000000 #> [10,]  0.0000000 0.0000000  0.0000000  0.000000 #>  #> , , 6 #>  #>       [,1]     [,2]      [,3]       [,4] [,5]       [,6]       [,7]     [,8] #>  [1,]    0 0.000000  0.000000  0.0000000    0  0.0000000  0.0000000 1.669816 #>  [2,]    0 0.000000  0.000000  0.0000000    0  0.0000000  2.0813972 2.177550 #>  [3,]    0 0.000000  0.000000  0.4537497    0 -0.3039783  0.0000000 0.000000 #>  [4,]    0 1.336522 -1.410724  0.0000000    0  0.0000000  0.0000000 0.000000 #>  [5,]    0 0.000000  0.000000  0.0000000    0 -1.7253602  0.0000000 0.000000 #>  [6,]    0 0.000000  0.000000 -1.1127899    0  0.0000000  1.0402502 0.000000 #>  [7,]    0 0.000000  0.000000  0.0000000    0  0.0000000  0.0000000 0.000000 #>  [8,]    0 0.000000  0.000000  0.0000000    0  0.0000000  0.0000000 0.000000 #>  [9,]    0 0.000000  0.000000 -0.6596931    0  0.0000000 -0.3449057 0.000000 #> [10,]    0 0.000000  0.000000  0.0000000    0 -0.4923074  0.0000000 0.000000 #>             [,9]     [,10] #>  [1,]  0.0000000 0.0000000 #>  [2,]  0.2506986 0.0000000 #>  [3,]  0.0000000 0.0000000 #>  [4,]  0.0000000 0.7615471 #>  [5,]  0.0000000 0.0000000 #>  [6,] -0.7585719 0.0000000 #>  [7,]  0.0000000 0.0000000 #>  [8,]  0.0000000 0.0000000 #>  [9,]  0.0000000 0.0000000 #> [10,] -0.7283967 0.0000000 #>  #> , , 7 #>  #>             [,1]      [,2]       [,3]     [,4]       [,5]        [,6] #>  [1,]  0.0000000  1.308012  0.1337980 0.000000 -0.2724824  0.00000000 #>  [2,] -0.3858064 -2.057172  0.0000000 0.000000  0.0000000  0.00000000 #>  [3,]  0.0000000  0.000000  0.0000000 0.321356  0.0000000  0.02616624 #>  [4,]  0.0000000  0.000000  0.0000000 0.000000  0.0000000  0.00000000 #>  [5,]  0.0000000  0.000000  0.0000000 0.000000  0.2526463  0.00000000 #>  [6,]  0.0000000  0.000000  0.0000000 0.000000  0.0000000 -0.02010863 #>  [7,]  0.1526855  0.000000 -0.6398130 0.000000  0.0000000  0.00000000 #>  [8,]  0.0000000  0.000000 -0.1355788 0.000000  0.0000000  0.00000000 #>  [9,] -1.1840398  0.000000  0.0000000 0.000000  1.3545779  0.00000000 #> [10,] -1.3959004  0.000000  0.0000000 0.000000 -0.1126705  0.00000000 #>             [,7]       [,8] [,9]     [,10] #>  [1,]  0.0000000  0.0000000    0 0.0000000 #>  [2,] -0.1985515  0.0000000    0 0.0000000 #>  [3,]  0.0000000 -0.3815563    0 0.0000000 #>  [4,]  0.0000000  0.0000000    0 0.0000000 #>  [5,]  0.4683365  0.0000000    0 0.0000000 #>  [6,]  0.0000000  0.0000000    0 0.0000000 #>  [7,]  0.0000000  0.0000000    0 0.0000000 #>  [8,]  0.5813904  0.0000000    0 0.0000000 #>  [9,]  0.0000000 -2.3212255    0 0.4848574 #> [10,]  0.0000000  0.0000000    0 0.0000000 #>  #> , , 8 #>  #>              [,1]       [,2]        [,3]      [,4]       [,5]       [,6] #>  [1,]  0.00000000  0.0000000  0.17863233  0.000000  0.0000000  0.0000000 #>  [2,] -0.03408942  0.0000000  0.00000000  0.000000  0.0000000  0.0000000 #>  [3,]  0.00000000  0.7940213 -0.64883596  0.000000  1.4565120 -0.4409788 #>  [4,]  0.00000000  0.0000000  0.00000000  0.000000  0.0000000  0.0000000 #>  [5,] -0.72087320  0.0000000  0.00000000  0.000000  0.0000000  0.0000000 #>  [6,]  0.00000000  0.0000000  0.68971963 -1.386156  0.0000000 -0.1242290 #>  [7,]  0.00000000  0.0000000  0.00000000  0.000000  0.0000000 -0.7672668 #>  [8,]  0.00000000  0.0000000  0.00000000  0.000000  0.0000000  0.0000000 #>  [9,]  0.00000000  0.0000000  0.00000000  0.000000 -0.1987678  0.0000000 #> [10,]  0.00000000 -1.1355436  0.04084884  0.000000  0.0000000  0.0000000 #>              [,7]       [,8]       [,9]      [,10] #>  [1,]  0.00000000  0.0000000  0.0000000  0.0000000 #>  [2,]  0.01342104  0.0000000  0.0000000  0.0000000 #>  [3,]  0.00000000  0.0000000  0.0000000 -0.2741878 #>  [4,]  0.00000000  0.0000000 -0.7256544  0.0000000 #>  [5,]  0.00000000  0.0000000  0.0000000  0.0000000 #>  [6,]  0.00000000  0.8460959  0.0000000  0.0000000 #>  [7,]  1.92134489  0.0000000  0.0000000  0.0000000 #>  [8,]  0.64996292 -0.6508212 -0.8920984  0.0000000 #>  [9,] -1.77673619  0.0000000  0.0000000  0.0000000 #> [10,]  0.00000000  0.0000000  0.0000000  0.0000000 #>  #> , , 9 #>  #>             [,1]       [,2]      [,3]      [,4]       [,5]       [,6]      [,7] #>  [1,] -0.3552321  0.0000000 0.0000000 0.0000000  0.0000000  0.0000000 1.0525874 #>  [2,]  0.0000000  0.0000000 0.0000000 0.0000000  0.0000000  0.0000000 0.0000000 #>  [3,]  0.0000000  0.0000000 0.0000000 0.0000000  0.0000000  0.0000000 0.0000000 #>  [4,]  0.0000000  0.0000000 0.0000000 0.0000000  0.0000000  0.0000000 0.0000000 #>  [5,]  0.8124608  1.4614600 0.0000000 0.0000000  0.0000000  0.0000000 0.0000000 #>  [6,]  0.0000000 -1.0933854 0.0000000 0.0000000 -0.7483808  0.0000000 0.0000000 #>  [7,]  0.0000000  0.4646127 0.0000000 0.2318331  0.0000000  0.0000000 0.0000000 #>  [8,]  0.0000000  0.0000000 0.4656822 0.0000000 -2.3041337  0.0000000 0.0000000 #>  [9,]  0.0000000  0.0000000 0.0000000 0.0000000 -0.4509994  0.5737143 0.8619809 #> [10,]  0.0000000  0.0000000 0.0000000 0.0000000  0.0000000 -0.2378712 0.0000000 #>             [,8]        [,9]      [,10] #>  [1,]  0.0000000 -0.64434413  0.0000000 #>  [2,]  0.0000000  0.00000000  0.0000000 #>  [3,]  0.0000000  0.05292059  0.0000000 #>  [4,]  0.0000000 -2.00773040  0.0000000 #>  [5,]  0.0000000  0.00000000 -0.3271793 #>  [6,]  0.0000000  0.00000000  0.0000000 #>  [7,] -1.8281137  0.00000000  0.0000000 #>  [8,] -0.4662601  0.00000000  0.0000000 #>  [9,]  0.0000000  0.00000000  0.0000000 #> [10,]  0.0000000 -1.07414617 -0.3788847 #>  #> , , 10 #>  #>           [,1]       [,2]      [,3]       [,4]      [,5]     [,6]       [,7] #>  [1,] 1.006574  0.0000000  0.000000 -0.8098863 0.1783268  0.00000  0.0000000 #>  [2,] 0.000000  0.0000000  0.000000  0.0000000 0.0000000  0.00000  0.0000000 #>  [3,] 0.000000  0.0000000  0.000000  0.0000000 0.0000000  0.00000  0.0000000 #>  [4,] 0.000000  0.0000000  0.000000  0.0000000 0.0000000  0.00000  0.0000000 #>  [5,] 0.000000  0.0000000  0.000000  0.0000000 0.0000000  0.00000  0.0000000 #>  [6,] 0.000000  0.0000000  0.000000  0.0000000 0.0000000  0.00000  0.0000000 #>  [7,] 0.000000  0.0000000  0.000000 -1.3424599 0.0000000  0.00000  0.0000000 #>  [8,] 0.000000  0.0000000  0.000000 -0.4125947 0.0000000  0.00000  1.6801291 #>  [9,] 0.000000  0.0000000  0.000000  1.2021519 0.0000000 -1.02118  0.0000000 #> [10,] 1.059448 -0.9747293 -1.944061  0.0000000 0.0000000  0.00000 -0.4961598 #>             [,8]       [,9]      [,10] #>  [1,]  0.0000000  0.0000000 0.00000000 #>  [2,]  0.0000000  0.0000000 0.00000000 #>  [3,]  0.0000000  0.0000000 0.07134881 #>  [4,]  0.0000000  0.0000000 0.00000000 #>  [5,]  0.0000000  1.2804792 0.00000000 #>  [6,]  0.0000000  0.6679445 0.00000000 #>  [7,] -0.6013051 -0.3746087 0.00000000 #>  [8,]  0.0000000  0.0000000 0.00000000 #>  [9,]  0.0000000 -2.5127248 0.00000000 #> [10,]  0.0000000  0.0000000 0.91343246 #>"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroHyperVec.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor for NeuroHyperVec class — NeuroHyperVec","title":"Constructor for NeuroHyperVec class — NeuroHyperVec","text":"Constructor NeuroHyperVec class","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroHyperVec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for NeuroHyperVec class — NeuroHyperVec","text":"","code":"NeuroHyperVec(data, space, mask)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroHyperVec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for NeuroHyperVec class — NeuroHyperVec","text":"data matrix three-dimensional array containing data. space NeuroSpace object defining spatial dimensions. mask mask volume (array, vector, LogicalNeuroVol).","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroHyperVec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor for NeuroHyperVec class — NeuroHyperVec","text":"new NeuroHyperVec object.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroHyperVec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Constructor for NeuroHyperVec class — NeuroHyperVec","text":"","code":"# Create a 5D space (10x10x10 spatial, 2 trials, 2 features) space <- NeuroSpace(c(10,10,10,2,2))  # Create a mask for the spatial dimensions space3d <- NeuroSpace(c(10,10,10)) mask_data <- array(TRUE, dim=c(10,10,10))  # All voxels active mask <- LogicalNeuroVol(mask_data, space3d)  # Create data in the format expected by NeuroHyperVec: # 3D array with dimensions [features x trials x voxels] n_features <- 2 n_trials <- 2 n_voxels <- sum(mask_data)  # 1000 voxels data_array <- array(rnorm(n_features * n_trials * n_voxels),                    dim = c(n_features, n_trials, n_voxels))  # Create the NeuroHyperVec object hvec <- NeuroHyperVec(data_array, space, mask)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroObj-class.html","id":null,"dir":"Reference","previous_headings":"","what":"NeuroObj Class — NeuroObj-class","title":"NeuroObj Class — NeuroObj-class","text":"Base class neuroimaging data objects Cartesian spatial representation. class provides foundation specific neuroimaging data structures.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroObj-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"NeuroObj Class — NeuroObj-class","text":"space object class NeuroSpace representing geometry image object.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroSlice-class.html","id":null,"dir":"Reference","previous_headings":"","what":"NeuroSlice Class — NeuroSlice-class","title":"NeuroSlice Class — NeuroSlice-class","text":"Represents two-dimensional brain image slice. class extends array class data storage NeuroObj class spatial information.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroSlice-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"NeuroSlice Class — NeuroSlice-class","text":"NeuroSlice objects typically used represent individual slices 3D brain volumes 2D projections 3D data. inherit spatial properties NeuroObj data storage capabilities array.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroSlice-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"NeuroSlice Class — NeuroSlice-class","text":"","code":"# Create a simple 2D brain slice slice_data <- matrix(rnorm(64*64), 64, 64) slice_space <- NeuroSpace(dim=c(64L, 64L), origin=c(0, 0), spacing=c(1, 1)) brain_slice <- new(\"NeuroSlice\", .Data=slice_data, space=slice_space)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroSlice.html","id":null,"dir":"Reference","previous_headings":"","what":"NeuroSlice: 2D Neuroimaging Data Container — NeuroSlice","title":"NeuroSlice: 2D Neuroimaging Data Container — NeuroSlice","text":"Creates NeuroSlice object representing two-dimensional slice neuroimaging data associated spatial information. class particularly useful working individual slices volumetric neuroimaging data visualizing 2D cross-sections.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroSlice.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NeuroSlice: 2D Neuroimaging Data Container — NeuroSlice","text":"","code":"NeuroSlice(data, space, indices = NULL)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroSlice.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"NeuroSlice: 2D Neuroimaging Data Container — NeuroSlice","text":"data vector matrix containing slice data values. space object class NeuroSpace defining spatial properties (dimensions, spacing, origin) slice. indices Optional integer vector. data provided 1D vector, indices specifies linear indices data values placed 2D slice. Useful creating sparse slices. Default NULL.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroSlice.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"NeuroSlice: 2D Neuroimaging Data Container — NeuroSlice","text":"new object class NeuroSlice.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroSlice.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"NeuroSlice: 2D Neuroimaging Data Container — NeuroSlice","text":"Two-Dimensional Neuroimaging Data Slice","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroSlice.html","id":"input-validation","dir":"Reference","previous_headings":"","what":"Input Validation","title":"NeuroSlice: 2D Neuroimaging Data Container — NeuroSlice","text":"function performs several validation checks: Verifies space 2-dimensional Ensures data dimensions compatible space Validates indices provided sparse initialization","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroSlice.html","id":"data-handling","dir":"Reference","previous_headings":"","what":"Data Handling","title":"NeuroSlice: 2D Neuroimaging Data Container — NeuroSlice","text":"function supports two initialization modes: Dense mode (indices = NULL): Data reshaped necessary match space dimensions Dimensions must match exactly reshaping Sparse mode (indices provided): Creates zero-initialized matrix matching space dimensions Places data values specified indices","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroSlice.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"NeuroSlice: 2D Neuroimaging Data Container — NeuroSlice","text":"","code":"# Create a 64x64 slice space slice_space <- NeuroSpace(c(64, 64), spacing = c(2, 2))  # Example 1: Dense slice from matrix slice_data <- matrix(rnorm(64*64), 64, 64) dense_slice <- NeuroSlice(slice_data, slice_space)  # Example 2: Dense slice from vector vec_data <- rnorm(64*64) vec_slice <- NeuroSlice(vec_data, slice_space)  # Example 3: Sparse slice with specific values n_points <- 100 sparse_data <- rnorm(n_points) sparse_indices <- sample(1:(64*64), n_points) sparse_slice <- NeuroSlice(sparse_data, slice_space, indices = sparse_indices)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroSpace-class.html","id":null,"dir":"Reference","previous_headings":"","what":"NeuroSpace Class — NeuroSpace-class","title":"NeuroSpace Class — NeuroSpace-class","text":"NeuroSpace class represents geometric properties brain image, including dimensions, origin, spacing, axes, coordinate transformations. provides comprehensive framework handling spatial information neuroimaging data analysis.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroSpace-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"NeuroSpace Class — NeuroSpace-class","text":"dim integer vector representing grid dimensions image. origin numeric vector representing coordinates spatial origin. spacing numeric vector representing dimensions (mm) grid units (voxels). axes named AxisSet object representing set spatial axes untransformed native grid space. trans matrix representing affine transformation converts grid coordinates real-world coordinates. inverse matrix representing inverse transformation converts real-world coordinates grid coordinates.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroSpace-class.html","id":"validity","dir":"Reference","previous_headings":"","what":"Validity","title":"NeuroSpace Class — NeuroSpace-class","text":"NeuroSpace object considered valid : length dim slot equal lengths spacing, origin, number axes axes slots. dim slot contains non-negative values.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroSpace-class.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"NeuroSpace Class — NeuroSpace-class","text":"following methods available NeuroSpace objects: dim: Get dimensions space. origin: Get set origin space. spacing: Get set spacing space. axes: Get axes space. trans: Apply affine transformation coordinates.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroSpace-class.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NeuroSpace Class — NeuroSpace-class","text":"NeuroSpace class fundamental representing manipulating spatial properties neuroimaging data. used extensively throughout package operations require spatial information, image registration, resampling, coordinate transformations.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroSpace-class.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"NeuroSpace Class — NeuroSpace-class","text":"information spatial transformations neuroimaging: Brett, M., Johnsrude, . S., & Owen, . M. (2002). problem functional localization human brain. Nature Reviews Neuroscience, 3(3), 243-249.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroSpace-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"NeuroSpace Class — NeuroSpace-class","text":"","code":"# Create a NeuroSpace object space <- NeuroSpace(dim = c(64L, 64L, 64L),                     origin = c(0, 0, 0),                     spacing = c(1, 1, 1))  # Get the dimensions dim(space) #> [1] 64 64 64"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroSpace.html","id":null,"dir":"Reference","previous_headings":"","what":"NeuroSpace: Spatial Reference System for Neuroimaging Data — NeuroSpace","title":"NeuroSpace: Spatial Reference System for Neuroimaging Data — NeuroSpace","text":"NeuroSpace class defines spatial properties coordinate system neuroimaging data. encapsulates information needed map voxel indices real-world coordinates, including dimensions, voxel spacing, origin, axis orientation, coordinate transformations.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroSpace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NeuroSpace: Spatial Reference System for Neuroimaging Data — NeuroSpace","text":"","code":"NeuroSpace(dim, spacing = NULL, origin = NULL, axes = NULL, trans = NULL)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroSpace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"NeuroSpace: Spatial Reference System for Neuroimaging Data — NeuroSpace","text":"dim integer vector specifying dimensions image grid. Must positive. spacing numeric vector specifying physical size voxel (typically millimeters). Must positive. NULL, defaults ones. origin numeric vector specifying real-world coordinates first voxel. NULL, defaults zeros. axes AxisSet object defining orientation ordering coordinate axes. NULL, defaults standard neurological convention (Left-Posterior-Inferior 3D). trans transformation matrix mapping voxel indices world coordinates. NULL, constructed spacing origin.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroSpace.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"NeuroSpace: Spatial Reference System for Neuroimaging Data — NeuroSpace","text":"new NeuroSpace object","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroSpace.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"NeuroSpace: Spatial Reference System for Neuroimaging Data — NeuroSpace","text":"Spatial Reference System Neuroimaging Data","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroSpace.html","id":"coordinate-systems","dir":"Reference","previous_headings":"","what":"Coordinate Systems","title":"NeuroSpace: Spatial Reference System for Neuroimaging Data — NeuroSpace","text":"NeuroSpace manages two coordinate systems: Voxel coordinates: Zero-based indices image grid World coordinates: Real-world coordinates (typically millimeters) transformation systems defined : Voxel spacing (physical size voxels) Origin (world coordinates first voxel) Axis orientation (image axes map anatomical directions)","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroSpace.html","id":"validation","dir":"Reference","previous_headings":"","what":"Validation","title":"NeuroSpace: Spatial Reference System for Neuroimaging Data — NeuroSpace","text":"constructor performs extensive validation: dimensions must positive integers spacing values must positive Origin spacing must matching lengths Transformation matrix must invertible","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroSpace.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"NeuroSpace: Spatial Reference System for Neuroimaging Data — NeuroSpace","text":"details neuroimaging coordinate systems: Brett, M., Johnsrude, . S., & Owen, . M. (2002).     problem functional localization human brain.     Nature Reviews Neuroscience, 3(3), 243-249. Evans, . C., et al. (1993). 3D statistical neuroanatomical models     305 MRI volumes. Nuclear Science Symposium Medical Imaging Conference.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroSpace.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"NeuroSpace: Spatial Reference System for Neuroimaging Data — NeuroSpace","text":"","code":"# Create a standard 3D space (64x64x40 voxels, 2mm isotropic) space_3d <- NeuroSpace(   dim = c(64L, 64L, 40L),   spacing = c(2, 2, 2),   origin = c(-90, -126, -72) )  # Check properties dim(space_3d)           # Image dimensions #> [1] 64 64 40 spacing(space_3d)       # Voxel sizes #> [1] 2 2 2 origin(space_3d)        # World-space origin #> [1]  -90 -126  -72  # Create a 2D slice space space_2d <- NeuroSpace(   dim = c(128L, 128L),   spacing = c(1.5, 1.5),   origin = c(-96, -96) )  # Convert between coordinate systems world_coords <- c(0, 0, 0) vox_idx <- coord_to_index(space_3d, world_coords) back_to_world <- index_to_coord(space_3d, vox_idx)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroVec-class.html","id":null,"dir":"Reference","previous_headings":"","what":"NeuroVec Class — NeuroVec-class","title":"NeuroVec Class — NeuroVec-class","text":"S4 class represents four-dimensional brain image, used store process time series neuroimaging data fMRI 4D functional connectivity maps. class extends basic functionality NeuroObj. NeuroVec class represents vectorized form neuroimaging data, supporting -memory file-backed data modes. provides efficient data storage access methods integrates spatial reference system provided NeuroSpace.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroVec-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NeuroVec Class — NeuroVec-class","text":"","code":"NeuroVec(data, space = NULL, mask = NULL, label = \"\")"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroVec-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"NeuroVec Class — NeuroVec-class","text":"data image data. can : matrix (voxels x time points) 4D array list NeuroVol objects list NeuroVol objects provided, geometric space (NeuroSpace) inferred constituent volumes, must identical. space optional NeuroSpace object defining spatial properties image. required data list NeuroVol objects. mask optional logical array specifying voxels include. provided, SparseNeuroVec object created. label character string providing label NeuroVec object. Default empty string.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroVec-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"NeuroVec Class — NeuroVec-class","text":"concrete instance NeuroVec class: mask provided: SparseNeuroVec object Otherwise: DenseNeuroVec object","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroVec-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"NeuroVec Class — NeuroVec-class","text":"NeuroVec objects designed handle 4D neuroimaging data, first three dimensions represent spatial coordinates, fourth dimension typically represents time another series dimension. structure particularly useful storing analyzing functional MRI data, time series brain states, multiple 3D volumes single object. function performs several operations: data list NeuroVol objects, combines single 4D array. checks dimensions data match provided space. Depending whether mask provided, creates either DenseNeuroVec     SparseNeuroVec object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroVec-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"NeuroVec Class — NeuroVec-class","text":"space NeuroSpace object defining spatial properties image. label character string providing label NeuroVec object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroVec-class.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"NeuroVec Class — NeuroVec-class","text":"Methods specific NeuroVec objects may include operations time series analysis, 4D data manipulation, extraction 3D volumes time courses.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroVec-class.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NeuroVec Class — NeuroVec-class","text":"create NeuroVec object, use constructor function NeuroVec(). function handle appropriate initialization 4D data structure associated spatial information.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroVec-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"NeuroVec Class — NeuroVec-class","text":"","code":"# Load an example 4D brain image example_4d_image <- read_vec(system.file(\"extdata\", \"global_mask_v4.nii\", package = \"neuroim2\"))  # Create a NeuroVec object neuro_vec <- NeuroVec(data = array(rnorm(64*64*32*10), dim = c(64, 64, 32, 10)),                       space = NeuroSpace(dim = c(64, 64, 32,10),                       origin = c(0, 0, 0),                       spacing = c(3, 3, 4)))   dim(neuro_vec) #> [1] 64 64 32 10  # Extract a single 3D volume (e.g., the first time point) first_volume <- neuro_vec[[1]]   # Load an example 4D brain image example_file <- system.file(\"extdata\", \"global_mask_v4.nii\", package = \"neuroim2\") example_4d_image <- read_vec(example_file)  # Create a DenseNeuroVec object dense_vec <- NeuroVec(data = example_4d_image@.Data,                       space = space(example_4d_image)) print(dense_vec) #>  #> DenseNeuroVec (3.13 bytes MB) #>  #> - Spatial Info --------------------------- #> | Dimensions    : 64 x 64 x 25 (4 timepoints) #> | Total Voxels  : 102,400 #> | Spacing       : 3.5 x 3.5 x 3.7 #>  #> - Properties --------------------------- #> | Origin        : 112 x -108 x -46.2 #> | Orientation   : Right-to-Left Posterior-to-Anterior Inferior-to-Superior #>  #> - Statistics --------------------------- #>     Mean +/- SD    : 0.288 +/- 0.453 #>   # Create a SparseNeuroVec object with a mask mask <- array(runif(prod(dim(example_4d_image)[1:3])) > 0.5,               dim = dim(example_4d_image)[1:3]) sparse_vec <- NeuroVec(data = example_4d_image@.Data,                        space = space(example_4d_image),                        mask = mask) print(sparse_vec) #>  #> SparseNeuroVec  #>  #> += Spatial Info --------------------------- #> | Dimensions    : 64 x 64 x 25 #> | Time Points   : 4 #> | Spacing       : 3.5 x 3.5 x 3.7 #> | Origin        : 112 x -108 x -46.2 #>  #> +- Sparse Info  ---------------------------- #> | Cardinality   : 51134 #>  #> += Memory Usage -------------------------- #>   Size          : 2.56 MB #>"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroVecSeq-class.html","id":null,"dir":"Reference","previous_headings":"","what":"NeuroVecSeq Class — NeuroVecSeq-class","title":"NeuroVecSeq Class — NeuroVecSeq-class","text":"concatenated sequence NeuroVec instances.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroVecSeq-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"NeuroVecSeq Class — NeuroVecSeq-class","text":"vecs sequences NeuroVec instances lens number volumes NeuroVec sequence","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroVecSeq-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Element from NeuroVecSeq — [[,NeuroVecSeq,numeric-method","title":"Extract Element from NeuroVecSeq — [[,NeuroVecSeq,numeric-method","text":"Extracts single volume NeuroVecSeq object specified time point.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroVecSeq-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Element from NeuroVecSeq — [[,NeuroVecSeq,numeric-method","text":"","code":"# S4 method for class 'NeuroVecSeq,numeric' x[[i]]"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroVecSeq-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Element from NeuroVecSeq — [[,NeuroVecSeq,numeric-method","text":"x NeuroVecSeq object Numeric index specifying time point extract","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroVecSeq-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Element from NeuroVecSeq — [[,NeuroVecSeq,numeric-method","text":"NeuroVol object representing extracted volume","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroVecSeq.html","id":null,"dir":"Reference","previous_headings":"","what":"NeuroVecSeq: A Container for Sequential NeuroVec Objects — NeuroVecSeq","title":"NeuroVecSeq: A Container for Sequential NeuroVec Objects — NeuroVecSeq","text":"NeuroVecSeq class provides container managing sequence NeuroVec objects, particularly useful handling time series multi-session neuroimaging data segment may different lengths. Constructs NeuroVecSeq object represent variable-length sequence NeuroVec objects. particularly useful managing time series data different segments may different lengths.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroVecSeq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NeuroVecSeq: A Container for Sequential NeuroVec Objects — NeuroVecSeq","text":"","code":"NeuroVecSeq(...)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroVecSeq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"NeuroVecSeq: A Container for Sequential NeuroVec Objects — NeuroVecSeq","text":"... One instances type NeuroVec.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroVecSeq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"NeuroVecSeq: A Container for Sequential NeuroVec Objects — NeuroVecSeq","text":"NeuroVecSeq object containing: provided NeuroVec objects Associated space information Length information vector","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroVecSeq.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"NeuroVecSeq: A Container for Sequential NeuroVec Objects — NeuroVecSeq","text":"NeuroVecSeq objects store: list NeuroVec objects, potentially different time dimensions lengths constituent NeuroVec combined NeuroSpace object representing total space class provides methods : Accessing individual time points across vectors Extracting subsequences Computing statistics across sequence Linear access underlying data function performs several validations: Ensures inputs NeuroVec objects Verifies spatial compatibility Combines spatial information appropriately","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroVecSeq.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"NeuroVecSeq: A Container for Sequential NeuroVec Objects — NeuroVecSeq","text":"[[ Extract single volume specified time point length Get total number time points sub_vector Extract subsequence volumes linear_access Access data linearly across vectors","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroVecSeq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"NeuroVecSeq: A Container for Sequential NeuroVec Objects — NeuroVecSeq","text":"","code":"# Create some example NeuroVec objects v1 <- NeuroVec(array(0, c(5, 5, 5, 2)),                space = NeuroSpace(dim = c(5, 5, 5, 2))) v2 <- NeuroVec(array(1, c(5, 5, 5, 4)),                space = NeuroSpace(dim = c(5, 5, 5, 4))) v3 <- NeuroVec(array(2, c(5, 5, 5, 6)),                space = NeuroSpace(dim = c(5, 5, 5, 6)))  # Combine them into a sequence vs <- NeuroVecSeq(v1, v2, v3)  # Access properties length(vs)  # Total time points #> [1] 12 vs[[5]]     # Get the 5th volume #>  #>  === NeuroVol Object ===  #>  #> * Basic Information  #>   Type:      DenseNeuroVol #>   Dimensions: 5 x 5 x 5 (7.6 Kb) #>   Total Voxels: 125 #>  #> * Data Properties #>   Value Range: [1.00, 1.00] #>  #> * Spatial Properties #>   Spacing: 1.00 x 1.00 x 1.00 mm #>   Origin:  0.0, 0.0, 0.0 mm #>   Axes:    Left-to-Right x Posterior-to-Anterior x Inferior-to-Superior #>  #> ====================================== #>  #>  Access Methods:  #>   .  Get Slice:   slice(object, zlevel=10)  #>   .  Get Value:   object[i, j, k]  #>   .  Plot:       plot(object)  # shows multiple slices  #>   # Extract a subsequence sub_seq <- sub_vector(vs, 1:5)   # Create sample vectors v1 <- NeuroVec(array(0, c(5, 5, 5, 2)),                space = NeuroSpace(dim = c(5, 5, 5, 2))) v2 <- NeuroVec(array(0, c(5, 5, 5, 4)),                space = NeuroSpace(dim = c(5, 5, 5, 4)))  # Combine into sequence vs <- NeuroVecSeq(v1, v2) print(vs) #>  #> NeuroVecSeq (2 vectors) #>  #> += Sequence Info --------------------------- #> | Length        : 2 #> | Total Time    : 6 points #>  #> += Spatial Info --------------------------- #> | Dimensions    : 5 x 5 x 5 #> | Spacing       : 1 x 1 x 1 #> | Origin        : 0 x 0 x 0 #> | Orientation   : Left-to-Right Posterior-to-Anterior Inferior-to-Superior #>  #> += Vector Details -------------------------- #>   1. DenseNeuroVec (2 timepoints) #>   2. DenseNeuroVec (4 timepoints) #>"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroVecSource-class.html","id":null,"dir":"Reference","previous_headings":"","what":"NeuroVecSource Class — NeuroVecSource-class","title":"NeuroVecSource Class — NeuroVecSource-class","text":"class used produce NeuroVec instance.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroVecSource-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"NeuroVecSource Class — NeuroVecSource-class","text":"indices integer vector representing indices volumes loaded.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroVecSource.html","id":null,"dir":"Reference","previous_headings":"","what":"NeuroVecSource — NeuroVecSource","title":"NeuroVecSource — NeuroVecSource","text":"function constructs NeuroVecSource object, represents source four-dimensional brain image.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroVecSource.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NeuroVecSource — NeuroVecSource","text":"","code":"NeuroVecSource(file_name, indices = NULL, mask = NULL)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroVecSource.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"NeuroVecSource — NeuroVecSource","text":"file_name name 4-dimensional image file. indices optional integer vector specifying subset volume indices load. provided, volumes loaded. mask optional logical array NeuroVol object defining subset voxels load. provided, SparseNeuroVecSource object created.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroVecSource.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"NeuroVecSource — NeuroVecSource","text":"instance NeuroVecSource class.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroVecSource.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"NeuroVecSource — NeuroVecSource","text":"mask supplied, LogicalNeuroVol NeuroVol instance. latter, mask defined nonzero elements volume.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroVol-class.html","id":null,"dir":"Reference","previous_headings":"","what":"NeuroVol Class — NeuroVol-class","title":"NeuroVol Class — NeuroVol-class","text":"Base class representing 3D volumetric neuroimaging data. class extends NeuroObj provide foundation various types 3D brain images.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroVol-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"NeuroVol Class — NeuroVol-class","text":"NeuroVol serves abstract base class specific 3D neuroimaging data structures. inherits spatial properties NeuroObj specify particular data storage method.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroVol.html","id":null,"dir":"Reference","previous_headings":"","what":"NeuroVol: 3D Neuroimaging Volume Class — NeuroVol","title":"NeuroVol: 3D Neuroimaging Volume Class — NeuroVol","text":"NeuroVol class encapsulates 3D volumetric neuroimaging data. provides methods accessing slices, performing spatial transformations, integrating spatial reference provided NeuroSpace.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroVol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NeuroVol: 3D Neuroimaging Volume Class — NeuroVol","text":"","code":"NeuroVol(data, space, label = \"\", indices = NULL)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroVol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"NeuroVol: 3D Neuroimaging Volume Class — NeuroVol","text":"data 3D array containing volumetric data. space object class NeuroSpace defining spatial properties. label character string providing label volume (default: \"\"). indices optional vector indices sparse representation (default: NULL).","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroVol.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"NeuroVol: 3D Neuroimaging Volume Class — NeuroVol","text":"NeuroVol object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroVol.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"NeuroVol: 3D Neuroimaging Volume Class — NeuroVol","text":"","code":"bspace <- NeuroSpace(c(64,64,64), spacing=c(1,1,1)) dat <- array(rnorm(64*64*64), c(64,64,64)) bvol <- NeuroVol(dat,bspace, label=\"test\")"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroVolSource-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor for NeuroVolSource — NeuroVolSource","title":"Constructor for NeuroVolSource — NeuroVolSource","text":"Constructor NeuroVolSource","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroVolSource-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for NeuroVolSource — NeuroVolSource","text":"","code":"NeuroVolSource(input, index = 1)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroVolSource-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for NeuroVolSource — NeuroVolSource","text":"input input file name index image subvolume index","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroVolSource-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor for NeuroVolSource — NeuroVolSource","text":"new instance type NeuroVolSource","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/None.html","id":null,"dir":"Reference","previous_headings":"","what":"Pre-defined null axis — None","title":"Pre-defined null axis — None","text":"Pre-defined null axis","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/None.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pre-defined null axis — None","text":"","code":"None"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/None.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Pre-defined null axis — None","text":"object class NamedAxis length 1.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NullAxis.html","id":null,"dir":"Reference","previous_headings":"","what":"Pre-defined null axis set — NullAxis","title":"Pre-defined null axis set — NullAxis","text":"Pre-defined null axis set","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NullAxis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pre-defined null axis set — NullAxis","text":"","code":"NullAxis"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NullAxis.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Pre-defined null axis set — NullAxis","text":"object class AxisSet length 1.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/OrientationList2D.html","id":null,"dir":"Reference","previous_headings":"","what":"Pre-defined 2D orientation configurations — OrientationList2D","title":"Pre-defined 2D orientation configurations — OrientationList2D","text":"list standard 2D anatomical orientations used neuroimaging. orientation defines pair anatomical axes.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/OrientationList2D.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pre-defined 2D orientation configurations — OrientationList2D","text":"","code":"OrientationList2D"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/OrientationList2D.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Pre-defined 2D orientation configurations — OrientationList2D","text":"object class list length 24.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/OrientationList3D.html","id":null,"dir":"Reference","previous_headings":"","what":"Pre-defined 3D orientation configurations — OrientationList3D","title":"Pre-defined 3D orientation configurations — OrientationList3D","text":"list standard 3D anatomical orientations used neuroimaging. orientation defines triplet anatomical axes.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/OrientationList3D.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pre-defined 3D orientation configurations — OrientationList3D","text":"","code":"OrientationList3D"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/OrientationList3D.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Pre-defined 3D orientation configurations — OrientationList3D","text":"object class list length 48.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ROI-class.html","id":null,"dir":"Reference","previous_headings":"","what":"ROI — ROI-class","title":"ROI — ROI-class","text":"Base marker class region interest (ROI)","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ROICoords-class.html","id":null,"dir":"Reference","previous_headings":"","what":"ROICoords — ROICoords-class","title":"ROICoords — ROICoords-class","text":"class representing region interest (ROI) brain image, defined set coordinates. class stores geometric space image coordinates voxels within ROI.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ROICoords-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"ROICoords — ROICoords-class","text":"space instance class NeuroSpace representing geometric space image data. coords matrix containing coordinates voxels within ROI. row represents coordinate , e.g. (,   j,  k).","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ROICoords.html","id":null,"dir":"Reference","previous_headings":"","what":"Create ROI Coordinates Object — ROICoords","title":"Create ROI Coordinates Object — ROICoords","text":"Creates ROICoords object matrix coordinates representing points 3D space.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ROICoords.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create ROI Coordinates Object — ROICoords","text":"","code":"ROICoords(coords)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ROICoords.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create ROI Coordinates Object — ROICoords","text":"coords matrix 3 columns representing (x, y, z) coordinates","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ROICoords.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create ROI Coordinates Object — ROICoords","text":"ROICoords object","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ROICoords.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create ROI Coordinates Object — ROICoords","text":"ROI Coordinates","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ROICoords.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create ROI Coordinates Object — ROICoords","text":"","code":"coords <- matrix(c(1,2,3, 4,5,6), ncol=3, byrow=TRUE) roi_coords <- ROICoords(coords)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ROIVec-class.html","id":null,"dir":"Reference","previous_headings":"","what":"ROIVec — ROIVec-class","title":"ROIVec — ROIVec-class","text":"class representing vector-valued volumetric region interest (ROI) brain image.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ROIVec-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"ROIVec — ROIVec-class","text":"coords matrix containing 3D coordinates voxels within ROI. row represents voxel coordinate (x, y, z). .Data matrix containing data values associated voxel ROI. row corresponds unique vector value, number rows match number rows coords matrix.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ROIVec-class.html","id":"validity","dir":"Reference","previous_headings":"","what":"Validity","title":"ROIVec — ROIVec-class","text":"object class ROIVec considered valid : - coords slot matrix 3 columns. - .Data slot matrix. - number rows .Data matrix equal number rows coords matrix.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ROIVec.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an instance of class ROIVec — ROIVec","title":"Create an instance of class ROIVec — ROIVec","text":"function constructs instance ROIVec class, represents region interest (ROI) 4D volume. class stores NeuroSpace object, voxel coordinates, data values ROI.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ROIVec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an instance of class ROIVec — ROIVec","text":"","code":"ROIVec(vspace, coords, data = rep(nrow(coords), 1))"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ROIVec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an instance of class ROIVec — ROIVec","text":"vspace instance class NeuroSpace four dimensions, represents dimensions, voxel spacing, time points 4D volume. coords 3-column matrix voxel coordinates region interest. data matrix data values associated region interest, row representing voxel column representing time point. default, matrix number rows equal number rows `coords` matrix single column filled ones.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ROIVec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an instance of class ROIVec — ROIVec","text":"instance class ROIVec, containing NeuroSpace object,   voxel coordinates, data values region interest.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ROIVec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an instance of class ROIVec — ROIVec","text":"","code":"# Create a NeuroSpace object vspace <- NeuroSpace(dim = c(5, 5, 5, 10), spacing = c(1, 1, 1))  # Define voxel coordinates for the ROI coords <- matrix(c(1, 2, 3, 2, 2, 2, 3, 3, 3), ncol = 3)  # Create a data matrix for the ROI data <- matrix(rnorm(30), nrow = 10, ncol = 3)  # Create a ROIVec object roi_vec <- ROIVec(vspace, coords, data)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ROIVecWindow-class.html","id":null,"dir":"Reference","previous_headings":"","what":"ROIVecWindow — ROIVecWindow-class","title":"ROIVecWindow — ROIVecWindow-class","text":"class representing spatially windowed, vector-valued volumetric region interest (ROI) brain image.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ROIVecWindow-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"ROIVecWindow — ROIVecWindow-class","text":"coords matrix containing 3D coordinates voxels within ROI. row represents voxel coordinate (x, y, z). .Data matrix containing data values associated voxel ROI. row corresponds unique vector value, number rows match number rows coords matrix. parent_index integer representing 1D index center voxel parent space. center_index integer representing location coordinate matrix center voxel window.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ROIVecWindow-class.html","id":"validity","dir":"Reference","previous_headings":"","what":"Validity","title":"ROIVecWindow — ROIVecWindow-class","text":"object class ROIVecWindow considered valid : - coords slot matrix 3 columns. - .Data slot matrix. - number rows .Data matrix equal number rows coords matrix.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ROIVol-class.html","id":null,"dir":"Reference","previous_headings":"","what":"ROIVol — ROIVol-class","title":"ROIVol — ROIVol-class","text":"class representing volumetric region interest (ROI) brain image, defined set coordinates associated data values.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ROIVol-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"ROIVol — ROIVol-class","text":"coords matrix containing 3D coordinates voxels within ROI. row represents voxel coordinate (x, y, z). .Data numeric vector containing data values associated voxel ROI. length vector match number rows coords matrix.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ROIVol-class.html","id":"validity","dir":"Reference","previous_headings":"","what":"Validity","title":"ROIVol — ROIVol-class","text":"object class ROIVol considered valid : - coords slot matrix 3 columns. - .Data slot numeric vector. - length .Data vector equal number rows coords matrix.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ROIVol.html","id":null,"dir":"Reference","previous_headings":"","what":"Create ROI Volume Object — ROIVol","title":"Create ROI Volume Object — ROIVol","text":"Creates ROIVol object representing set values specific 3D coordinates within spatial reference system.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ROIVol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create ROI Volume Object — ROIVol","text":"","code":"ROIVol(space, coords, data)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ROIVol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create ROI Volume Object — ROIVol","text":"space NeuroSpace object defining spatial reference coords matrix 3 columns representing (x,y,z) coordinates data numeric vector values corresponding coordinate","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ROIVol.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create ROI Volume Object — ROIVol","text":"ROIVol object","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ROIVol.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create ROI Volume Object — ROIVol","text":"ROI Volume","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ROIVol.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create ROI Volume Object — ROIVol","text":"","code":"space <- NeuroSpace(c(64,64,64)) coords <- matrix(c(1,2,3, 4,5,6), ncol=3, byrow=TRUE) data <- c(1.5, 2.5) roi_vol <- ROIVol(space, coords, data)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ROIVolWindow-class.html","id":null,"dir":"Reference","previous_headings":"","what":"ROIVolWindow — ROIVolWindow-class","title":"ROIVolWindow — ROIVolWindow-class","text":"class representing spatially windowed volumetric region interest (ROI) brain image, derived larger parent ROI.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ROIVolWindow-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"ROIVolWindow — ROIVolWindow-class","text":"parent_index integer representing 1D index center voxel parent space. center_index integer representing location coordinate matrix center voxel window. coords matrix containing 3D coordinates voxels within ROI. row represents voxel coordinate (x, y, z). .Data numeric vector containing data values associated voxel ROI. length vector match number rows coords matrix.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ROIVolWindow-class.html","id":"validity","dir":"Reference","previous_headings":"","what":"Validity","title":"ROIVolWindow — ROIVolWindow-class","text":"object class ROIVolWindow considered valid : - coords slot matrix 3 columns. - .Data slot numeric vector. - length .Data vector equal number rows coords matrix.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/SparseNeuroVec-class.html","id":null,"dir":"Reference","previous_headings":"","what":"SparseNeuroVec Class — SparseNeuroVec-class","title":"SparseNeuroVec Class — SparseNeuroVec-class","text":"class representing sparse four-dimensional brain image, optimized efficient storage access large, sparse neuroimaging data. Constructs SparseNeuroVec object efficient representation manipulation sparse neuroimaging data many zero missing values.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/SparseNeuroVec-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SparseNeuroVec Class — SparseNeuroVec-class","text":"","code":"SparseNeuroVec(data, space, mask, label = \"\")"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/SparseNeuroVec-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SparseNeuroVec Class — SparseNeuroVec-class","text":"data matrix 4-D array containing neuroimaging data. dimensions data consistent dimensions provided NeuroSpace object mask. space NeuroSpace object representing dimensions voxel spacing neuroimaging data. mask 3D array, 1D vector type logical, instance type LogicalNeuroVol, specifies locations non-zero values data. label Optional character string providing label vector","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/SparseNeuroVec-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"SparseNeuroVec Class — SparseNeuroVec-class","text":"SparseNeuroVec object, containing sparse neuroimaging data, mask, associated NeuroSpace information.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/SparseNeuroVec-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"SparseNeuroVec Class — SparseNeuroVec-class","text":"SparseNeuroVec objects store data compressed format, non-zero values retained. approach significantly reduces memory usage sparse brain images. class leverages mask mapping parent class AbstractSparseNeuroVec efficiently manage spatial structure data.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/SparseNeuroVec-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"SparseNeuroVec Class — SparseNeuroVec-class","text":"data matrix column represents non-zero vector spanning fourth dimension (e.g., time series voxel). Rows correspond voxels sparse domain defined mask.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/SparseNeuroVec-class.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"SparseNeuroVec Class — SparseNeuroVec-class","text":"SparseNeuroVec inherits : NeuroVec: Base class 4D brain images AbstractSparseNeuroVec: Provides sparse representation framework ArrayLike4D: Interface 4D array-like operations","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/SparseNeuroVec-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SparseNeuroVec Class — SparseNeuroVec-class","text":"","code":"# Create a sparse 4D brain image mask <- LogicalNeuroVol(array(runif(64*64*32) > 0.7, c(64,64,32)), NeuroSpace(c(64,64,32))) data <- matrix(rnorm(sum(mask) * 100), nrow=sum(mask), ncol=100) sparse_vec <- SparseNeuroVec(data=data, mask=mask, space=NeuroSpace(dim=c(64,64,32,100)))  # Access a subset of the data subset <- sparse_vec[,,, 1:10]   bspace <- NeuroSpace(c(10,10,10,100), c(1,1,1)) mask <- array(rnorm(10*10*10) > .5, c(10,10,10)) mat <- matrix(rnorm(sum(mask)), 100, sum(mask)) svec <- SparseNeuroVec(mat, bspace, mask) length(indices(svec)) == sum(mask) #> [1] TRUE"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/SparseNeuroVec-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"[[ — [[,SparseNeuroVec,numeric-method","title":"[[ — [[,SparseNeuroVec,numeric-method","text":"[[","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/SparseNeuroVec-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[[ — [[,SparseNeuroVec,numeric-method","text":"","code":"# S4 method for class 'SparseNeuroVec,numeric' x[[i]]"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/SparseNeuroVec-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[[ — [[,SparseNeuroVec,numeric-method","text":"x object volume index","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/SparseNeuroVec-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"[[ — [[,SparseNeuroVec,numeric-method","text":"SparseNeuroVol object","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/SparseNeuroVecSource-class.html","id":null,"dir":"Reference","previous_headings":"","what":"SparseNeuroVecSource Class — SparseNeuroVecSource-class","title":"SparseNeuroVecSource Class — SparseNeuroVecSource-class","text":"class used produce SparseNeuroVec instance. encapsulates necessary information create sparse representation 4D neuroimaging dataset.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/SparseNeuroVecSource-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"SparseNeuroVecSource Class — SparseNeuroVecSource-class","text":"SparseNeuroVecSource acts factory SparseNeuroVec objects. holds spatial mask determines voxels included sparse representation. class typically used data loading preprocessing pipelines sparse structure data known determined full dataset loaded.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/SparseNeuroVecSource-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"SparseNeuroVecSource Class — SparseNeuroVecSource-class","text":"mask object class LogicalNeuroVol representing subset voxels stored memory. mask defines sparse structure resulting SparseNeuroVec.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/SparseNeuroVecSource-class.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"SparseNeuroVecSource Class — SparseNeuroVecSource-class","text":"SparseNeuroVecSource inherits : NeuroVecSource: Base class NeuroVec source objects","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/SparseNeuroVecSource-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SparseNeuroVecSource Class — SparseNeuroVecSource-class","text":"","code":"# Create a simple mask mask_data <- array(runif(64*64*32) > 0.7, dim = c(64, 64, 32)) mask <- LogicalNeuroVol(mask_data, space = NeuroSpace(dim = c(64, 64, 32)))  # Create a SparseNeuroVecSource sparse_source <- new(\"SparseNeuroVecSource\", mask = mask)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/SparseNeuroVol-array.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert SparseNeuroVol to array — SparseNeuroVol,array","title":"Convert SparseNeuroVol to array — SparseNeuroVol,array","text":"function converts SparseNeuroVol object array object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/SparseNeuroVol-array.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert SparseNeuroVol to array — SparseNeuroVol,array","text":"SparseNeuroVol object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/SparseNeuroVol-array.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert SparseNeuroVol to array — SparseNeuroVol,array","text":"array object resulting conversion.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/SparseNeuroVol-class.html","id":null,"dir":"Reference","previous_headings":"","what":"SparseNeuroVol Class — SparseNeuroVol-class","title":"SparseNeuroVol Class — SparseNeuroVol-class","text":"class represents three-dimensional brain image using sparse data representation. particularly useful large brain images high proportion zero missing values, offering efficient storage processing. Construct SparseNeuroVol instance","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/SparseNeuroVol-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SparseNeuroVol Class — SparseNeuroVol-class","text":"","code":"SparseNeuroVol(data, space, indices = NULL, label = \"\")"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/SparseNeuroVol-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SparseNeuroVol Class — SparseNeuroVol-class","text":"data numeric vector ROIVol space instance class NeuroSpace indices index vector indicating 1-d coordinates data values label character string","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/SparseNeuroVol-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"SparseNeuroVol Class — SparseNeuroVol-class","text":"SparseNeuroVol instance","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/SparseNeuroVol-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"SparseNeuroVol Class — SparseNeuroVol-class","text":"SparseNeuroVol class extends NeuroVol class implements ArrayLike3D interface. uses sparseVector Matrix package store image data, allows memory-efficient representation sparse 3D neuroimaging data. Image data backed Matrix::sparseVector.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/SparseNeuroVol-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"SparseNeuroVol Class — SparseNeuroVol-class","text":"data sparseVector object Matrix package, storing image volume data sparse format.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/SparseNeuroVol-class.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"SparseNeuroVol Class — SparseNeuroVol-class","text":"Bates, D., & Maechler, M. (2019). Matrix: Sparse Dense Matrix Classes Methods. R package version 1.2-18. https://CRAN.R-project.org/package=Matrix","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/SparseNeuroVol-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SparseNeuroVol Class — SparseNeuroVol-class","text":"","code":"# Create a sparse 3D brain image dim <- c(64L, 64L, 64L) space <- NeuroSpace(dim = dim, origin = c(0, 0, 0), spacing = c(1, 1, 1)) sparse_data <- Matrix::sparseVector(x = c(1, 2, 3),                                     i = c(100, 1000, 10000),                                     length = prod(dim)) sparse_vol <- new(\"SparseNeuroVol\", space = space, data = sparse_data) sparse_vol[1000] == 1 #> sparse vector (nnz/length = 0/1) of class \"lsparseVector\" #> [1] .  data <- 1:10 indices <- seq(1,1000, length.out=10) bspace <- NeuroSpace(c(64,64,64), spacing=c(1,1,1)) sparsevol <- SparseNeuroVol(data,bspace,indices=indices) densevol <- NeuroVol(data,bspace,indices=indices) sum(sparsevol) == sum(densevol) #> [1] TRUE"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/SparseNeuroVol-numeric.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert SparseNeuroVol to numeric — SparseNeuroVol,numeric","title":"Convert SparseNeuroVol to numeric — SparseNeuroVol,numeric","text":"function converts SparseNeuroVol object numeric object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/SparseNeuroVol-numeric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert SparseNeuroVol to numeric — SparseNeuroVol,numeric","text":"SparseNeuroVol object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/SparseNeuroVol-numeric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert SparseNeuroVol to numeric — SparseNeuroVol,numeric","text":"numeric object resulting conversion.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/Summary-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary method for Neuroimaging objects — Summary,SparseNeuroVec-method","title":"Summary method for Neuroimaging objects — Summary,SparseNeuroVec-method","text":"Summary method Neuroimaging objects","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/Summary-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary method for Neuroimaging objects — Summary,SparseNeuroVec-method","text":"","code":"# S4 method for class 'SparseNeuroVec' Summary(x, ..., na.rm = FALSE)  # S4 method for class 'SparseNeuroVol' Summary(x, ..., na.rm = FALSE)  # S4 method for class 'DenseNeuroVol' Summary(x, ..., na.rm = FALSE)  # S4 method for class 'DenseNeuroVol' Summary(x, ..., na.rm = FALSE)  # S4 method for class 'DenseNeuroVol' Summary(x, ..., na.rm = FALSE)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/Summary-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary method for Neuroimaging objects — Summary,SparseNeuroVec-method","text":"x SparseNeuroVec object ... Additional arguments passed methods na.rm Logical indicating whether remove NA values computation","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/Summary-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary method for Neuroimaging objects — Summary,SparseNeuroVec-method","text":"summary SparseNeuroVec object","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/TIME.html","id":null,"dir":"Reference","previous_headings":"","what":"Time axis — TIME","title":"Time axis — TIME","text":"Represents temporal dimension neuroimaging data","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/TIME.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Time axis — TIME","text":"","code":"TIME"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/TIME.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Time axis — TIME","text":"object class NamedAxis length 1.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/TimeAxis.html","id":null,"dir":"Reference","previous_headings":"","what":"Time axis set — TimeAxis","title":"Time axis set — TimeAxis","text":"one-dimensional axis set representing time","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/TimeAxis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Time axis set — TimeAxis","text":"","code":"TimeAxis"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/TimeAxis.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Time axis set — TimeAxis","text":"object class AxisSet1D length 1.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/add_dim-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a Dimension to an Object — add_dim","title":"Add a Dimension to an Object — add_dim","text":"function adds new dimension given object, matrix array.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/add_dim-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a Dimension to an Object — add_dim","text":"","code":"add_dim(x, n)  # S4 method for class 'NeuroSpace,numeric' add_dim(x, n)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/add_dim-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a Dimension to an Object — add_dim","text":"x NeuroSpace object n Numeric value specifying size new dimension","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/add_dim-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a Dimension to an Object — add_dim","text":"object class x new dimension added.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/add_dim-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a Dimension to an Object — add_dim","text":"","code":"# Create a NeuroSpace object x <- NeuroSpace(c(10, 10, 10), c(1, 1, 1))  # Add a new dimension with size 10 x1 <- add_dim(x, 10)  # Check the new dimension ndim(x1) == 4 #> [1] TRUE dim(x1)[4] == 10 #> [1] TRUE"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/anatomical_axes.html","id":null,"dir":"Reference","previous_headings":"","what":"Pre-defined anatomical axes — anatomical_axes","title":"Pre-defined anatomical axes — anatomical_axes","text":"constants define standard anatomical axes used neuroimaging. axis defined direction vector 3D space.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/anatomical_axes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pre-defined anatomical axes — anatomical_axes","text":"","code":"LEFT_RIGHT  RIGHT_LEFT  ANT_POST  POST_ANT  INF_SUP  SUP_INF"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/anatomical_axes.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Pre-defined anatomical axes — anatomical_axes","text":"object class NamedAxis length 1. object class NamedAxis length 1. object class NamedAxis length 1. object class NamedAxis length 1. object class NamedAxis length 1. object class NamedAxis length 1.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/annotate_orientation.html","id":null,"dir":"Reference","previous_headings":"","what":"Add L/R and A/P/S/I annotations (optional) — annotate_orientation","title":"Add L/R and A/P/S/I annotations (optional) — annotate_orientation","text":"Add L/R /P/S/annotations (optional)","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/annotate_orientation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add L/R and A/P/S/I annotations (optional) — annotate_orientation","text":"","code":"annotate_orientation(   plane = c(\"axial\", \"coronal\", \"sagittal\"),   dims,   gp = grid::gpar(col = \"white\", cex = 0.9, fontface = \"bold\") )"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/annotate_orientation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add L/R and A/P/S/I annotations (optional) — annotate_orientation","text":"plane \"axial\", \"coronal\", \"sagittal\" dims c(nrow, ncol) slice matrix gp grid::gpar style","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/annotate_orientation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add L/R and A/P/S/I annotations (optional) — annotate_orientation","text":"ggplot2 layer annotation_custom grobs","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as-ClusteredNeuroVol-DenseNeuroVol.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert ClusteredNeuroVol to DenseNeuroVol — as-ClusteredNeuroVol-DenseNeuroVol","title":"Convert ClusteredNeuroVol to DenseNeuroVol — as-ClusteredNeuroVol-DenseNeuroVol","text":"method converts ClusteredNeuroVol equivalent DenseNeuroVol object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as-ClusteredNeuroVol-DenseNeuroVol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert ClusteredNeuroVol to DenseNeuroVol — as-ClusteredNeuroVol-DenseNeuroVol","text":"ClusteredNeuroVol object converted","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as-ClusteredNeuroVol-DenseNeuroVol.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert ClusteredNeuroVol to DenseNeuroVol — as-ClusteredNeuroVol-DenseNeuroVol","text":"DenseNeuroVol object","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as-ClusteredNeuroVol-DenseNeuroVol.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert ClusteredNeuroVol to DenseNeuroVol — as-ClusteredNeuroVol-DenseNeuroVol","text":"Convert ClusteredNeuroVol Object DenseNeuroVol Object","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as-ClusteredNeuroVol-DenseNeuroVol.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert ClusteredNeuroVol to DenseNeuroVol — as-ClusteredNeuroVol-DenseNeuroVol","text":"","code":"# Create a clustered volume mask <- read_vol(system.file(\"extdata\", \"global_mask_v4.nii\", package=\"neuroim2\")) clusters <- rep(1:5, length.out=sum(mask)) cvol <- ClusteredNeuroVol(mask, clusters)  # Convert to DenseNeuroVol dvol <- as(cvol, \"DenseNeuroVol\")"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as-DenseNeuroVol-array.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert DenseNeuroVol to array — as,DenseNeuroVol,array","title":"Convert DenseNeuroVol to array — as,DenseNeuroVol,array","text":"function converts DenseNeuroVol object array.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as-DenseNeuroVol-array.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert DenseNeuroVol to array — as,DenseNeuroVol,array","text":"DenseNeuroVol object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as-DenseNeuroVol-array.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert DenseNeuroVol to array — as,DenseNeuroVol,array","text":"array resulting conversion.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.dense-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce SparseNeuroVol to DenseNeuroVol — as.dense,ClusteredNeuroVol-method","title":"Coerce SparseNeuroVol to DenseNeuroVol — as.dense,ClusteredNeuroVol-method","text":"Convert sparse volumetric image dense representation spatial geometry. Non-zero values stored sparse vector placed corresponding linear indices dense array; voxels 0. function provides method coerce object class ROIVol DenseNeuroVol using .dense method.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.dense-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce SparseNeuroVol to DenseNeuroVol — as.dense,ClusteredNeuroVol-method","text":"","code":"# S4 method for class 'ClusteredNeuroVol' as.dense(x)  # S4 method for class 'SparseNeuroVol' as.dense(x)  # S4 method for class 'ROIVol' as.dense(x)  # S4 method for class 'SparseNeuroVec' as.dense(x)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.dense-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce SparseNeuroVol to DenseNeuroVol — as.dense,ClusteredNeuroVol-method","text":"x object class ROIVol coerced DenseNeuroVol.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.dense-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce SparseNeuroVol to DenseNeuroVol — as.dense,ClusteredNeuroVol-method","text":"NeuroVol object representing dense version clustered volume. DenseNeuroVol identical spatial dimensions values expanded   sparse representation. DenseNeuroVol object obtained coercing ROIVol object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.dense.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert to dense representation — as.dense","title":"Convert to dense representation — as.dense","text":"Convert dense representation","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.dense.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert to dense representation — as.dense","text":"","code":"as.dense(x)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.dense.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert to dense representation — as.dense","text":"x object densify","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.dense.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert to dense representation — as.dense","text":"dense representation input object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.dense.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert to dense representation — as.dense","text":"","code":"# Create a sparse representation space <- NeuroSpace(c(10,10,10,4), c(1,1,1)) mask <- array(runif(10*10*10) > 0.8, c(10,10,10))  # ~20% of voxels active data <- matrix(rnorm(sum(mask) * 4), 4, sum(mask))  # Random data for active voxels sparse_vec <- SparseNeuroVec(data, space, mask)  # Convert to dense representation dense_vec <- as.dense(sparse_vec) # The dense representation has the same dimensions but stores all voxels identical(dim(sparse_vec), dim(dense_vec)) #> [1] TRUE"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.html","id":null,"dir":"Reference","previous_headings":"","what":"conversion from NeuroVol to LogicalNeuroVol — as","title":"conversion from NeuroVol to LogicalNeuroVol — as","text":"function provides method coerce object class ROIVec matrix. function provides method coerce object class ROIVol DenseNeuroVol.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"conversion from NeuroVol to LogicalNeuroVol — as","text":"object class ROIVol coerced DenseNeuroVol.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"conversion from NeuroVol to LogicalNeuroVol — as","text":"matrix obtained coercing ROIVec object. DenseNeuroVol object obtained coercing ROIVol object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.list-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert FileBackedNeuroVec to List — as.list,FileBackedNeuroVec-method","title":"Convert FileBackedNeuroVec to List — as.list,FileBackedNeuroVec-method","text":"Converts FileBackedNeuroVec object list DenseNeuroVol objects. convert SparseNeuroVec list DenseNeuroVol","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.list-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert FileBackedNeuroVec to List — as.list,FileBackedNeuroVec-method","text":"","code":"# S4 method for class 'FileBackedNeuroVec' as.list(x)  # S4 method for class 'NeuroVec' as.list(x)  # S4 method for class 'SparseNeuroVec' as.list(x)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.list-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert FileBackedNeuroVec to List — as.list,FileBackedNeuroVec-method","text":"x object","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.list-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert FileBackedNeuroVec to List — as.list,FileBackedNeuroVec-method","text":"list DenseNeuroVol objects","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.list-methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert FileBackedNeuroVec to List — as.list,FileBackedNeuroVec-method","text":"method creates deferred list, element DenseNeuroVol object representing single volume FileBackedNeuroVec.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.logical-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"as.logical — as.logical,NeuroVol-method","title":"as.logical — as.logical,NeuroVol-method","text":"Convert NeuroVol LogicalNeuroVol","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.logical-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"as.logical — as.logical,NeuroVol-method","text":"","code":"# S4 method for class 'NeuroVol' as.logical(x)  # S4 method for class 'ROIVol' as.logical(x)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.logical-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"as.logical — as.logical,NeuroVol-method","text":"x object","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.logical-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"as.logical — as.logical,NeuroVol-method","text":"instance LogicalNeuroVol","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.logical-methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"as.logical — as.logical,NeuroVol-method","text":"image values converted using R base function .logical wrapped LogicalNeuroVol","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.mask-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert NeuroVol to a mask — as.mask,NeuroVol,missing-method","title":"Convert NeuroVol to a mask — as.mask,NeuroVol,missing-method","text":"method converts NeuroVol object mask setting positive values TRUE non-positive values FALSE. method converts NeuroVol object mask setting specified indices TRUE remaining elements FALSE.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.mask-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert NeuroVol to a mask — as.mask,NeuroVol,missing-method","text":"","code":"# S4 method for class 'NeuroVol,missing' as.mask(x)  # S4 method for class 'NeuroVol,numeric' as.mask(x, indices)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.mask-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert NeuroVol to a mask — as.mask,NeuroVol,missing-method","text":"x NeuroVol object convert mask. indices numeric vector containing indices input NeuroVol set TRUE resulting mask.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.mask-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert NeuroVol to a mask — as.mask,NeuroVol,missing-method","text":"LogicalNeuroVol object representing mask created input NeuroVol. LogicalNeuroVol object representing mask created input NeuroVol specified indices.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.mask.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert to a LogicalNeuroVol — as.mask","title":"Convert to a LogicalNeuroVol — as.mask","text":"Convert LogicalNeuroVol","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.mask.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert to a LogicalNeuroVol — as.mask","text":"","code":"as.mask(x, indices)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.mask.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert to a LogicalNeuroVol — as.mask","text":"x object binarize indices indices set TRUE","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.mask.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert to a LogicalNeuroVol — as.mask","text":"LogicalNeuroVol object TRUE values specified indices.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.mask.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert to a LogicalNeuroVol — as.mask","text":"","code":"# Create a simple 3D volume with random values space <- NeuroSpace(c(10,10,10), spacing=c(1,1,1)) vol <- NeuroVol(array(runif(1000), c(10,10,10)), space)  # Create a mask by thresholding (values > 0.5 become TRUE) mask1 <- as.mask(vol > 0.5)  # Create a mask by specifying indices indices <- which(vol > 0.8)  # get indices of high values mask2 <- as.mask(vol, indices)  # Both masks are LogicalNeuroVol objects identical(class(mask1), class(mask2)) #> [1] TRUE"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.matrix-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"convert a NeuroVec to a matrix — as.matrix,ClusteredNeuroVec-method","title":"convert a NeuroVec to a matrix — as.matrix,ClusteredNeuroVec-method","text":"convert NeuroVec matrix convert ROIVec matrix Convert Matrix","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.matrix-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"convert a NeuroVec to a matrix — as.matrix,ClusteredNeuroVec-method","text":"","code":"# S4 method for class 'ClusteredNeuroVec' as.matrix(x, by = c(\"cluster\", \"voxel\"))  # S4 method for class 'MappedNeuroVec' as.matrix(x)  # S4 method for class 'NeuroVec' as.matrix(x)  # S4 method for class 'NeuroVec' as.matrix(x)  # S4 method for class 'DenseNeuroVec' as.matrix(x)  # S4 method for class 'ROIVec' as.matrix(x)  # S4 method for class 'SparseNeuroVec' as.matrix(x, ...)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.matrix-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"convert a NeuroVec to a matrix — as.matrix,ClusteredNeuroVec-method","text":"x object convert matrix ClusteredNeuroVec: controls conversion target. Defaults \"cluster\" return T×K matrix cluster time-series. \"voxel\" reserved future use. ... Additional arguments","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.matrix-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"convert a NeuroVec to a matrix — as.matrix,ClusteredNeuroVec-method","text":"matrix representation object","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic as.matrix Method — as.matrix","title":"Generic as.matrix Method — as.matrix","text":"Coerces object matrix.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic as.matrix Method — as.matrix","text":"","code":"as.matrix(x, ...)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic as.matrix Method — as.matrix","text":"x object coerced matrix. ... Additional arguments passed methods.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic as.matrix Method — as.matrix","text":"matrix representation input x.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.numeric-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert SparseNeuroVol to numeric — as.numeric,SparseNeuroVol-method","title":"Convert SparseNeuroVol to numeric — as.numeric,SparseNeuroVol-method","text":"Convert SparseNeuroVol numeric","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.numeric-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert SparseNeuroVol to numeric — as.numeric,SparseNeuroVol-method","text":"","code":"# S4 method for class 'SparseNeuroVol' as.numeric(x)  # S4 method for class 'ROIVol' as.numeric(x)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.numeric-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert SparseNeuroVol to numeric — as.numeric,SparseNeuroVol-method","text":"x object convert","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.numeric-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert SparseNeuroVol to numeric — as.numeric,SparseNeuroVol-method","text":"numeric vector length nrow(x@coords)","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.raster.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic Method for Converting Objects to Raster Format — as.raster","title":"Generic Method for Converting Objects to Raster Format — as.raster","text":"Converts object raster (bitmap) representation.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.raster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic Method for Converting Objects to Raster Format — as.raster","text":"x object converted. ... Additional arguments passed conversion methods.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.raster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic Method for Converting Objects to Raster Format — as.raster","text":"raster object representing x.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.sparse-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert DenseNeuroVec to sparse representation using mask — as.sparse,DenseNeuroVec,LogicalNeuroVol-method","title":"Convert DenseNeuroVec to sparse representation using mask — as.sparse,DenseNeuroVec,LogicalNeuroVol-method","text":"method converts DenseNeuroVec object sparse representation using given LogicalNeuroVol mask. method converts DenseNeuroVec object sparse representation using given numeric mask. method converts DenseNeuroVec object sparse representation using given LogicalNeuroVol mask. method converts DenseNeuroVec object sparse representation using given numeric mask.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.sparse-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert DenseNeuroVec to sparse representation using mask — as.sparse,DenseNeuroVec,LogicalNeuroVol-method","text":"","code":"# S4 method for class 'DenseNeuroVec,LogicalNeuroVol' as.sparse(x, mask)  # S4 method for class 'DenseNeuroVec,numeric' as.sparse(x, mask)  # S4 method for class 'DenseNeuroVec,LogicalNeuroVol' as.sparse(x, mask)  # S4 method for class 'DenseNeuroVec,numeric' as.sparse(x, mask)  # S4 method for class 'DenseNeuroVol,LogicalNeuroVol' as.sparse(x, mask)  # S4 method for class 'DenseNeuroVol,numeric' as.sparse(x, mask)  # S4 method for class 'ROIVol,ANY' as.sparse(x)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.sparse-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert DenseNeuroVec to sparse representation using mask — as.sparse,DenseNeuroVec,LogicalNeuroVol-method","text":"x DenseNeuroVec object convert sparse representation. mask numeric vector representing mask apply conversion.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.sparse-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert DenseNeuroVec to sparse representation using mask — as.sparse,DenseNeuroVec,LogicalNeuroVol-method","text":"SparseNeuroVec object resulting conversion. SparseNeuroVec object resulting conversion. SparseNeuroVec object resulting conversion. SparseNeuroVec object resulting conversion.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.sparse.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert to from dense to sparse representation — as.sparse","title":"Convert to from dense to sparse representation — as.sparse","text":"Convert dense sparse representation","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.sparse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert to from dense to sparse representation — as.sparse","text":"","code":"as.sparse(x, mask, ...)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.sparse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert to from dense to sparse representation — as.sparse","text":"x object make sparse, e.g. DenseNeuroVol DenseNeuroVec mask elements retain ... additional arguments","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.sparse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert to from dense to sparse representation — as.sparse","text":"sparse representation input object, containing elements specified mask.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.sparse.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert to from dense to sparse representation — as.sparse","text":"mask can integer vector 1D indices mask volume class LogicalNeuroVol","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.sparse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert to from dense to sparse representation — as.sparse","text":"","code":"bvol <- NeuroVol(array(runif(24*24*24), c(24,24,24)), NeuroSpace(c(24,24,24), c(1,1,1))) indmask <- sort(sample(1:(24*24*24), 100)) svol <- as.sparse(bvol, indmask)   mask <- LogicalNeuroVol(runif(length(indmask)), space=space(bvol), indices=indmask) sum(mask) == 100 #> [1] TRUE"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as_nifti_header.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct a Minimal NIfTI-1 Header from a NeuroVol — as_nifti_header","title":"Construct a Minimal NIfTI-1 Header from a NeuroVol — as_nifti_header","text":"Given NeuroVol object (similar), function builds basic NIfTI-1 header structure, populating essential fields dim, pixdim, datatype, affine transform, quaternion parameters.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as_nifti_header.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct a Minimal NIfTI-1 Header from a NeuroVol — as_nifti_header","text":"","code":"as_nifti_header(vol, file_name, oneFile = TRUE, data_type = \"FLOAT\")"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as_nifti_header.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct a Minimal NIfTI-1 Header from a NeuroVol — as_nifti_header","text":"vol NeuroVol (3D array-like) specifying dimensions, spacing, affine transform. file_name character string file name (used within header necessarily write data). oneFile Logical; TRUE, sets NIfTI magic \"n+1\", implying single-file format (.nii). FALSE, uses \"ni1\" (header+image). data_type Character specifying data representation, e.g. \"FLOAT\", \"DOUBLE\". internal code picks integer NIfTI code.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as_nifti_header.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct a Minimal NIfTI-1 Header from a NeuroVol — as_nifti_header","text":"list representing NIfTI-1 header fields, containing   elements like dimensions, pixdim, datatype, qform,   quaternion, qfac, etc. can passed   functions write manipulate header.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as_nifti_header.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Construct a Minimal NIfTI-1 Header from a NeuroVol — as_nifti_header","text":"convenience function calls createNIfTIHeader first, updates fields (dimensions, pixdim, orientation, etc.) based vol argument. voxel offset set 352 bytes, quaternion derived transform matrix via matrixToQuatern. Note: function primarily sets minimal header suitable writing standard single-file NIfTI-1. need comprehensive advanced usage, consider manually editing returned list.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/axes-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Image Axes — axes","title":"Extract Image Axes — axes","text":"Extract Image Axes","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/axes-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Image Axes — axes","text":"","code":"axes(x)  # S4 method for class 'NeuroSpace' axes(x)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/axes-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Image Axes — axes","text":"x object set axes","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/axes-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Image Axes — axes","text":"object representing axes x.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/axes-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Image Axes — axes","text":"","code":"x <- NeuroSpace(c(10,10,10), spacing=c(1,1,1)) class(axes(x)) == \"AxisSet3D\" #> [1] TRUE"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/bilateral_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a bilateral filter to a volumetric image — bilateral_filter","title":"Apply a bilateral filter to a volumetric image — bilateral_filter","text":"function smooths volumetric image (3D brain MRI data) using bilateral filter. bilateral filter considers spatial closeness intensity similarity smoothing.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/bilateral_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a bilateral filter to a volumetric image — bilateral_filter","text":"","code":"bilateral_filter(vol, mask, spatial_sigma = 2, intensity_sigma = 1, window = 1)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/bilateral_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply a bilateral filter to a volumetric image — bilateral_filter","text":"vol NeuroVol object representing image volume smoothed. mask optional LogicalNeuroVol object representing image mask defines region filtering applied. provided, entire volume considered. spatial_sigma numeric value specifying standard deviation spatial Gaussian kernel (default 2). intensity_sigma numeric value specifying standard deviation intensity Gaussian kernel (default 25). window integer specifying number voxels around center voxel include side. example, window=1 3x3x3 kernel (default 1).","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/bilateral_filter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply a bilateral filter to a volumetric image — bilateral_filter","text":"smoothed image class NeuroVol.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/bilateral_filter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply a bilateral filter to a volumetric image — bilateral_filter","text":"","code":"brain_mask <- read_vol(system.file(\"extdata\", \"global_mask_v4.nii\", package=\"neuroim2\"))  # Apply bilateral filtering to the brain volume filtered_vol <- bilateral_filter(brain_mask, brain_mask, spatial_sigma = 2, intensity_sigma = 25, window = 1)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/bootstrap_searchlight.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a bootstrap spherical searchlight iterator — bootstrap_searchlight","title":"Create a bootstrap spherical searchlight iterator — bootstrap_searchlight","text":"function generates spherical searchlight iterator sampling regions within brain mask. creates searchlight spheres around random center voxels, allowing surrounding voxel belong multiple searchlight samples.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/bootstrap_searchlight.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a bootstrap spherical searchlight iterator — bootstrap_searchlight","text":"","code":"bootstrap_searchlight(mask, radius = 8, iter = 100)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/bootstrap_searchlight.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a bootstrap spherical searchlight iterator — bootstrap_searchlight","text":"mask NeuroVol object representing brain mask. radius numeric value specifying radius searchlight sphere voxel units. Default 8. iter integer specifying total number searchlights sample. Default 100.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/bootstrap_searchlight.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a bootstrap spherical searchlight iterator — bootstrap_searchlight","text":"deferred_list object containing ROIVolWindow   objects, representing spherical searchlight region sampled within mask.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/bootstrap_searchlight.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a bootstrap spherical searchlight iterator — bootstrap_searchlight","text":"Searchlight centers sampled without replacement, surrounding voxel can belong multiple searchlight samples.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/bootstrap_searchlight.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a bootstrap spherical searchlight iterator — bootstrap_searchlight","text":"","code":"# Load an example brain mask mask <- read_vol(system.file(\"extdata\", \"global_mask_v4.nii\", package=\"neuroim2\"))  # Generate a bootstrap searchlight iterator with a radius of 6 voxels  searchlights <- bootstrap_searchlight(mask, radius = 6)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/bounds-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Spatial Bounds of an Image — bounds","title":"Extract Spatial Bounds of an Image — bounds","text":"function extracts spatial bounds (origin + dim * spacing) image represented input object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/bounds-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Spatial Bounds of an Image — bounds","text":"","code":"bounds(x)  # S4 method for class 'NeuroSpace' bounds(x)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/bounds-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Spatial Bounds of an Image — bounds","text":"x object `bounds` property, typically image.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/bounds-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Spatial Bounds of an Image — bounds","text":"numeric matrix two columns specifying min (column 1) max (column 2) bounds dimension x.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/bounds-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Spatial Bounds of an Image — bounds","text":"","code":"bspace <- NeuroSpace(c(10, 10, 10), c(2, 2, 2)) b <- bounds(bspace) nrow(b) == ndim(bspace) #> [1] TRUE ncol(b) == 2 #> [1] TRUE"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/centroid-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"return the centroid of an object — centroid","title":"return the centroid of an object — centroid","text":"return centroid object","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/centroid-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"return the centroid of an object — centroid","text":"","code":"centroid(x, ...)  # S4 method for class 'NeuroSpace' centroid(x)  # S4 method for class 'ROICoords' centroid(x)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/centroid-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"return the centroid of an object — centroid","text":"x object centroid ... extra args","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/centroid-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"return the centroid of an object — centroid","text":"numeric vector giving centroid x.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/centroid-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"return the centroid of an object — centroid","text":"","code":"bspace <- NeuroSpace(c(10,10,10), c(2,2,2)) centroid(bspace) #> [1] 10 10 10"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/centroids-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Return a matrix of centroids of an object — centroids","title":"Return a matrix of centroids of an object — centroids","text":"Return matrix centroids object","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/centroids-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return a matrix of centroids of an object — centroids","text":"","code":"centroids(x, ...)  # S4 method for class 'ClusteredNeuroVec' centroids(x, type = c(\"center_of_mass\", \"medoid\"))  # S4 method for class 'ClusteredNeuroVol' centroids(x, type = c(\"center_of_mass\", \"medoid\"))"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/centroids-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return a matrix of centroids of an object — centroids","text":"x object multiple centroids (e.g. ClusteredNeuroVol) ... extra args type type center mass: one \"center_of_mass\" \"medoid\"","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/centroids-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return a matrix of centroids of an object — centroids","text":"numeric matrix row represents coordinates centroid. matrix coordinates row represents centroid cluster.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/centroids-methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Return a matrix of centroids of an object — centroids","text":"`type = \"center_of_mass\"`, returns arithmetic mean coordinates; `\"medoid\"`, returns central point.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/close-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Close a BinaryReader or BinaryWriter — close,BinaryReader-method","title":"Close a BinaryReader or BinaryWriter — close,BinaryReader-method","text":"Closes underlying connection associated BinaryReader BinaryWriter object. called done reader/writer free system resources.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/close-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Close a BinaryReader or BinaryWriter — close,BinaryReader-method","text":"","code":"# S4 method for class 'BinaryReader' close(con)  # S4 method for class 'BinaryWriter' close(con)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/close-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Close a BinaryReader or BinaryWriter — close,BinaryReader-method","text":"con BinaryReader BinaryWriter object close.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/close-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Close a BinaryReader or BinaryWriter — close,BinaryReader-method","text":"Invisibly returns NULL, called side effect closing connection.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/close-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Close a BinaryReader or BinaryWriter — close,BinaryReader-method","text":"","code":"# \\donttest{ # Create a temporary file and write some data tmp <- tempfile() writer <- BinaryWriter(tmp, byte_offset = 0L,                       data_type = \"DOUBLE\", bytes_per_element = 8L) write_elements(writer, rnorm(100)) close(writer)  # Read the data back reader <- BinaryReader(tmp, byte_offset = 0L,                       data_type = \"DOUBLE\", bytes_per_element = 8L) data <- read_elements(reader, 100) #> Warning: incomplete string at end of file has been discarded close(reader)  # Clean up unlink(tmp) # }"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/cluster_searchlight_series.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster-centroid searchlight over cluster time-series — cluster_searchlight_series","title":"Cluster-centroid searchlight over cluster time-series — cluster_searchlight_series","text":"Iterate clusters centroids , seed cluster, return time-series K nearest clusters (within radius). enables searchlight analysis cluster level rather individual voxels.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/cluster_searchlight_series.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster-centroid searchlight over cluster time-series — cluster_searchlight_series","text":"","code":"cluster_searchlight_series(x, cvol = NULL, k = 10L, radius = NULL, label = \"\")"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/cluster_searchlight_series.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster-centroid searchlight over cluster time-series — cluster_searchlight_series","text":"x `ClusteredNeuroVec` object `NeuroVec` plus `cvol` cvol `ClusteredNeuroVol` (required `x` `NeuroVec`) k Integer, number nearest clusters including seed (default: 10). capped total number clusters specified value exceeds . radius Numeric distance mm. given, use clusters within radius instead k-nearest neighbors. used together k. label Optional character label returned windows","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/cluster_searchlight_series.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster-centroid searchlight over cluster time-series — cluster_searchlight_series","text":"list ROIVec objects, one per cluster, ROIVec contains: values T×N matrix T number timepoints N number     neighboring clusters (including seed ) coords centroid coordinates neighboring clusters seed cluster's time-series always first column ROIVec.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/cluster_searchlight_series.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cluster-centroid searchlight over cluster time-series — cluster_searchlight_series","text":"function creates searchlight around cluster's centroid, selecting either: k nearest clusters (k specified) clusters within given radius (radius specified) particularly useful cluster-level connectivity analyses working parcellated data voxel-level searchlights redundant.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/cluster_searchlight_series.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cluster-centroid searchlight over cluster time-series — cluster_searchlight_series","text":"","code":"# Create synthetic 4D data (8x8x8 volume, 10 timepoints) sp4 <- NeuroSpace(c(8,8,8,10), c(1,1,1)) arr <- array(rnorm(8*8*8*10), dim=c(8,8,8,10)) vec <- NeuroVec(arr, sp4)  # Create a mask covering most of the volume sp3 <- NeuroSpace(c(8,8,8), c(1,1,1)) mask_arr <- array(FALSE, dim=c(8,8,8)) mask_arr[2:7, 2:7, 2:7] <- TRUE mask <- LogicalNeuroVol(mask_arr, sp3)  # Assign voxels to 10 clusters n_voxels <- sum(mask_arr) clusters <- sample(1:10, n_voxels, replace=TRUE) cvol <- ClusteredNeuroVol(mask, clusters)  # Create clustered representation cv <- ClusteredNeuroVec(vec, cvol)  # Get cluster searchlight with 3 nearest neighbors windows <- cluster_searchlight_series(cv, k = 3) length(windows)  # 10 windows (one per cluster) #> [1] 10  # Check first window roi1 <- windows[[1]] dim(values(roi1))  # 10 x 3 (timepoints x neighbors) #> [1] 10  3  # Use radius-based neighborhoods (5mm radius) windows_radius <- cluster_searchlight_series(cv, radius = 5) # Each window may have different number of neighbors"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/clustered_searchlight.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a clustered searchlight iterator — clustered_searchlight","title":"Create a clustered searchlight iterator — clustered_searchlight","text":"function generates searchlight iterator iterates successive spatial clusters image volume. allows exploration spatially clustered regions within provided mask using either pre-defined clustered volume performing k-means clustering generate clusters.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/clustered_searchlight.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a clustered searchlight iterator — clustered_searchlight","text":"","code":"clustered_searchlight(mask, cvol = NULL, csize = NULL)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/clustered_searchlight.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a clustered searchlight iterator — clustered_searchlight","text":"mask NeuroVol object representing brain mask. cvol optional ClusteredNeuroVol instance representing pre-defined clusters within mask. provided, 'csize' parameter ignored. csize optional integer specifying number clusters generated using k-means clustering (ignored cvol provided).","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/clustered_searchlight.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a clustered searchlight iterator — clustered_searchlight","text":"deferred_list object containing ROIVol objects,   representing clustered region within image volume.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/clustered_searchlight.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a clustered searchlight iterator — clustered_searchlight","text":"","code":"# Load an example brain mask mask <- read_vol(system.file(\"extdata\", \"global_mask_v4.nii\", package=\"neuroim2\"))  # Generate a clustered searchlight iterator with 5 clusters clust_searchlight <- clustered_searchlight(mask, csize = 5) #> Warning: Quick-TRANSfer stage steps exceeded maximum (= 1476600)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/concat-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Concatenate two objects in the time dimension — concat","title":"Concatenate two objects in the time dimension — concat","text":"Concatenate two objects time dimension","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/concat-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Concatenate two objects in the time dimension — concat","text":"","code":"concat(x, y, ...)  # S4 method for class 'NeuroVec,NeuroVol' concat(x, y, ...)  # S4 method for class 'NeuroVol,NeuroVec' concat(x, y, ...)  # S4 method for class 'NeuroVec,NeuroVec' concat(x, y, ...)  # S4 method for class 'ROIVec,ROIVec' concat(x, y, ...)  # S4 method for class 'DenseNeuroVol,missing' concat(x, y, ...)  # S4 method for class 'DenseNeuroVol,DenseNeuroVol' concat(x, y, ...)  # S4 method for class 'AbstractSparseNeuroVec,missing' concat(x, y, ...)  # S4 method for class 'SparseNeuroVec,SparseNeuroVec' concat(x, y, ...)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/concat-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Concatenate two objects in the time dimension — concat","text":"x first object, typically NeuroVol NeuroVec y second object, typically NeuroVol NeuroVec ... additional objects","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/concat-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Concatenate two objects in the time dimension — concat","text":"temporally concatenated object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/concat-methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Concatenate two objects in the time dimension — concat","text":"x y images must compatible dimensions. NeuroVol can concatenated NeuroVec, vice versa. See examples.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/concat-methods.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Concatenate two objects in the time dimension — concat","text":"dimensions x y must equal","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/concat-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Concatenate two objects in the time dimension — concat","text":"","code":"bv1 <- NeuroVol(rep(1,1000), NeuroSpace(c(10,10,10), c(1,1,1))) bv2 <- NeuroVol(rep(2,1000), NeuroSpace(c(10,10,10), c(1,1,1))) bv3 <- concat(bv1,bv2) inherits(bv3, \"NeuroVec\") #> [1] TRUE  bv4 <- concat(bv3, bv1) dim(bv4)[4] == 3 #> [1] TRUE bv5 <- concat(bv1, bv3) dim(bv4)[4] == 3 #> [1] TRUE  bv6 <- concat(bv4,bv5) dim(bv6)[4] == 6 #> [1] TRUE"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/conn_comp-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Connected components — conn_comp","title":"Connected components — conn_comp","text":"Find connected components image. function identifies labels spatially connected regions neuroimaging data, supporting binary masks thresholded volumes.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/conn_comp-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Connected components — conn_comp","text":"","code":"conn_comp(x, ...)  # S4 method for class 'NeuroVol' conn_comp(   x,   threshold = 0,   cluster_table = TRUE,   local_maxima = TRUE,   local_maxima_dist = 15,   ... )"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/conn_comp-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Connected components — conn_comp","text":"x image object ... additional arguments including: threshold - numeric value defining lower intensity bound image mask cluster_table - logical indicating whether return cluster statistics local_maxima - logical indicating whether compute local maxima local_maxima_dist - minimum distance local maxima connect - connectivity pattern (\"26-connect\", \"18-connect\", \"6-connect\") threshold threshold defining lower intensity bound image mask cluster_table return cluster_table local_maxima return table local maxima local_maxima_dist distance used define minum distance local maxima","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/conn_comp-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Connected components — conn_comp","text":"list containing: index - ClusteredNeuroVol object cluster labels size - NeuroVol object cluster sizes voxels - list cluster voxel coordinates cluster_table - (optional) Data frame cluster statistics local_maxima - (optional) Matrix local maxima coordinates object representing connected components x.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/conn_comp-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Connected components — conn_comp","text":"","code":"# Create a simple 3D volume with two distinct regions space <- NeuroSpace(c(10,10,10), c(1,1,1)) vol_data <- array(0, c(10,10,10))  # Create first cluster in corner (2x2x2) vol_data[1:2, 1:2, 1:2] <- 1  # Create second cluster in opposite corner (2x2x2) vol_data[8:9, 8:9, 8:9] <- 1  # Create NeuroVol object vol <- NeuroVol(vol_data, space)  # Find connected components with default 26-connectivity # Returns components above threshold 0 comps <- conn_comp(vol, threshold=0)  # Access results max(comps$index) == 2  # Should have 2 clusters #> [1] TRUE all(comps$size >= 0)    # All clusters should have >= 0 #> [1] TRUE  # Get cluster statistics comps <- conn_comp(vol, threshold=0, cluster_table=TRUE) # cluster_table contains: index, x, y, z, N (size), Area, value  # Find local maxima within clusters comps <- conn_comp(vol, threshold=0, local_maxima=TRUE,                   local_maxima_dist=2) # local_maxima contains: index, x, y, z, value"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/conn_comp_3D.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Connected Components from a 3D Binary Mask — conn_comp_3D","title":"Extract Connected Components from a 3D Binary Mask — conn_comp_3D","text":"Identifies labels connected components 3D binary mask using two-pass algorithm. function supports different connectivity constraints returns component indices sizes.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/conn_comp_3D.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Connected Components from a 3D Binary Mask — conn_comp_3D","text":"","code":"conn_comp_3D(mask, connect = c(\"26-connect\", \"18-connect\", \"6-connect\"))"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/conn_comp_3D.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Connected Components from a 3D Binary Mask — conn_comp_3D","text":"mask 3D logical array representing binary mask connect character string specifying connectivity constraint. One \"26-connect\" (default), \"18-connect\", \"6-connect\"","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/conn_comp_3D.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Connected Components from a 3D Binary Mask — conn_comp_3D","text":"list following components: index 3D array integers. non-zero value represents cluster index                connected component voxel. Zero values indicate background. size 3D array integers. non-zero value represents size (number voxels)               connected component voxel belongs . Zero values indicate background.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/conn_comp_3D.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract Connected Components from a 3D Binary Mask — conn_comp_3D","text":"function implements efficient two-pass connected component labeling algorithm: First pass: Assigns provisional labels builds equivalence table using         union-find data structure label resolution Second pass: Resolves label conflicts assigns final component labels connectivity options determine voxels considered adjacent: 6-connect: face-adjacent voxels (±1 step along axis) 18-connect: Face edge-adjacent voxels 26-connect: Face, edge, vertex-adjacent voxels (neighbors 3x3x3 cube) Time complexity O(n) n number voxels mask, additional O(k) space union-find data structure k number provisional labels.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/conn_comp_3D.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Extract Connected Components from a 3D Binary Mask — conn_comp_3D","text":"Rosenfeld, ., & Pfaltz, J. L. (1966). Sequential operations digital picture processing. Journal ACM, 13(4), 471-494.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/conn_comp_3D.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Connected Components from a 3D Binary Mask — conn_comp_3D","text":"","code":"# Create a simple 3D binary mask with two disconnected components mask <- array(FALSE, c(4, 4, 4)) mask[1:2, 1:2, 1:2] <- TRUE  # First component mask[3:4, 3:4, 3:4] <- TRUE  # Second component  # Extract components using different connectivity patterns comps <- conn_comp_3D(mask, connect = \"6-connect\")  # Number of components max_comps <- max(comps$index) cat(\"Found\", max_comps, \"components\\n\") #> Found 2 components  # Size of each component unique_sizes <- unique(comps$size[comps$size > 0]) cat(\"Component sizes:\", paste(unique_sizes, collapse=\", \"), \"\\n\") #> Component sizes: 8   # Try with different connectivity comps_26 <- conn_comp_3D(mask, connect = \"26-connect\") cat(\"Number of components with 26-connectivity:\", max(comps_26$index), \"\\n\") #> Number of components with 26-connectivity: 1"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/coord_to_grid-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"convert n-dimensional real world coordinates to grid coordinates — coord_to_grid","title":"convert n-dimensional real world coordinates to grid coordinates — coord_to_grid","text":"convert n-dimensional real world coordinates grid coordinates","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/coord_to_grid-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"convert n-dimensional real world coordinates to grid coordinates — coord_to_grid","text":"","code":"coord_to_grid(x, coords)  # S4 method for class 'NeuroSpace,matrix' coord_to_grid(x, coords)  # S4 method for class 'NeuroSpace,numeric' coord_to_grid(x, coords)  # S4 method for class 'NeuroVol,matrix' coord_to_grid(x, coords)  # S4 method for class 'NeuroVol,numeric' coord_to_grid(x, coords)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/coord_to_grid-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"convert n-dimensional real world coordinates to grid coordinates — coord_to_grid","text":"x object coords matrix real world coordinates","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/coord_to_grid-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"convert n-dimensional real world coordinates to grid coordinates — coord_to_grid","text":"numeric matrix grid coordinates.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/coord_to_grid-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"convert n-dimensional real world coordinates to grid coordinates — coord_to_grid","text":"","code":"# Create a simple 3D volume bvol <- NeuroVol(array(0, c(10,10,10)), NeuroSpace(c(10,10,10), c(1,1,1))) coords <- matrix(c(.5,.5,.5, 1.5,1.5,1.5), ncol=3, byrow=TRUE) grid <- coord_to_grid(bvol, coords) world <- grid_to_coord(bvol, grid) all.equal(coords, world) #> [1] TRUE"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/coord_to_index-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"convert n-dimensional real world coordinates to 1D indices — coord_to_index","title":"convert n-dimensional real world coordinates to 1D indices — coord_to_index","text":"convert n-dimensional real world coordinates 1D indices","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/coord_to_index-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"convert n-dimensional real world coordinates to 1D indices — coord_to_index","text":"","code":"coord_to_index(x, coords)  # S4 method for class 'NeuroSpace,matrix' coord_to_index(x, coords)  # S4 method for class 'NeuroSpace,numeric' coord_to_index(x, coords)  # S4 method for class 'NeuroVol,matrix' coord_to_index(x, coords)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/coord_to_index-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"convert n-dimensional real world coordinates to 1D indices — coord_to_index","text":"x object coords matrix real world coordinates","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/coord_to_index-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"convert n-dimensional real world coordinates to 1D indices — coord_to_index","text":"integer vector 1D indices corresponding coords.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/coord_to_index-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"convert n-dimensional real world coordinates to 1D indices — coord_to_index","text":"","code":"bvol <- NeuroVol(array(0, c(10,10,10)), NeuroSpace(c(10,10,10), c(1,1,1))) coords <- matrix(c(.5,.5,.5, 1.5,1.5,1.5), ncol=3, byrow=TRUE) idx <- coord_to_index(bvol, coords) coords2 <- index_to_coord(bvol, idx) all.equal(coords, coords2) #> [1] TRUE"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/coords-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Coordinates from an IndexLookupVol Object — coords,IndexLookupVol-method","title":"Extract Coordinates from an IndexLookupVol Object — coords,IndexLookupVol-method","text":"Extracts coordinates IndexLookupVol object based given index.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/coords-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Coordinates from an IndexLookupVol Object — coords,IndexLookupVol-method","text":"","code":"# S4 method for class 'IndexLookupVol' coords(x, i)  # S4 method for class 'ROIVol' coords(x, real = FALSE)  # S4 method for class 'ROICoords' coords(x, real = FALSE)  # S4 method for class 'ROICoords' coords(x, real = FALSE)  # S4 method for class 'AbstractSparseNeuroVec' coords(x, i)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/coords-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Coordinates from an IndexLookupVol Object — coords,IndexLookupVol-method","text":"x IndexLookupVol object extract coordinates index lookup volume real TRUE, return coordinates real world units","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/coords-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Coordinates from an IndexLookupVol Object — coords,IndexLookupVol-method","text":"matrix coordinates","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/coords-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Coordinates from an IndexLookupVol Object — coords,IndexLookupVol-method","text":"","code":"space <- NeuroSpace(c(64, 64, 64), c(1, 1, 1), c(0, 0, 0)) ilv <- IndexLookupVol(space, c(1:100)) coords(ilv, 1)  # Extract coordinates for index 1 #>      [,1] [,2] [,3] #> [1,]    1    1    1"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/coords.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract coordinates from an object — coords","title":"Extract coordinates from an object — coords","text":"function extracts coordinates input object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/coords.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract coordinates from an object — coords","text":"","code":"coords(x, ...)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/coords.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract coordinates from an object — coords","text":"x object extract coordinates . ... Additional arguments (used generic function).","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/coords.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract coordinates from an object — coords","text":"numeric matrix vector containing coordinates x.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/coords.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract coordinates from an object — coords","text":"","code":"# Create a NeuroSpace object with 3mm voxels space <- NeuroSpace(c(10,10,10), spacing=c(3,3,3))  # Create ROI coordinates in voxel space coords <- matrix(c(1,1,1, 2,2,2), ncol=3, byrow=TRUE) roi_coords <- ROICoords(coords)  # Get coordinates in voxel space vox_coords <- coords(roi_coords) # First coordinate is (1,1,1)  # Get coordinates cds <- coords(roi_coords) nrow(cds) == 2 #> [1] TRUE"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/createNIfTIHeader.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an Empty NIfTI-1 Header List — createNIfTIHeader","title":"Create an Empty NIfTI-1 Header List — createNIfTIHeader","text":"Initializes list fields following NIfTI-1 specification default placeholder values. Users typically call internally via as_nifti_header rather using directly.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/createNIfTIHeader.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an Empty NIfTI-1 Header List — createNIfTIHeader","text":"","code":"createNIfTIHeader(oneFile = TRUE, file_name = NULL)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/createNIfTIHeader.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an Empty NIfTI-1 Header List — createNIfTIHeader","text":"oneFile Logical; TRUE, magic set \"n+1\" indicating single-file (.nii) approach. Otherwise set \"ni1\". file_name Optional character string store header, usually referencing intended output file name.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/createNIfTIHeader.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an Empty NIfTI-1 Header List — createNIfTIHeader","text":"named list containing approximately 30 fields comprise   NIfTI-1 header structure. Many placeholders filled   downstream usage.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/createNIfTIHeader.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create an Empty NIfTI-1 Header List — createNIfTIHeader","text":"function sets skeleton NIfTI-1 header, including fields diminfo, pixdim, qform_code, magic, etc. fields initialized zero, empty characters, standard placeholders. oneFile argument controls whether \"n+1\" \"ni1\" used magic field.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/cuboid_roi.html","id":null,"dir":"Reference","previous_headings":"","what":"Create A Cuboid Region of Interest — cuboid_roi","title":"Create A Cuboid Region of Interest — cuboid_roi","text":"Create Cuboid Region Interest","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/cuboid_roi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create A Cuboid Region of Interest — cuboid_roi","text":"","code":"cuboid_roi(bvol, centroid, surround, fill = NULL, nonzero = FALSE)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/cuboid_roi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create A Cuboid Region of Interest — cuboid_roi","text":"bvol NeuroVol NeuroSpace instance centroid center cube voxel coordinates surround number voxels either side central voxel. vector length 3. fill optional value(s) assign data slot. nonzero keep nonzero elements bvol. bvol NeuroSpace argument ignored.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/cuboid_roi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create A Cuboid Region of Interest — cuboid_roi","text":"instance class ROIVol representing cuboid region interest, containing coordinates values voxels within specified region.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/cuboid_roi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create A Cuboid Region of Interest — cuboid_roi","text":"","code":"sp1 <- NeuroSpace(c(10,10,10), c(1,1,1))  cube <- cuboid_roi(sp1, c(5,5,5), 3)  vox <- coords(cube)  cube2 <- cuboid_roi(sp1, c(5,5,5), 3, fill=5)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/data_file-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic function to get the name of the data file, given a file name and a FileFormat instance. — data_file","title":"Generic function to get the name of the data file, given a file name and a FileFormat instance. — data_file","text":"Derives data file name given file name based FileFormat specifications.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/data_file-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic function to get the name of the data file, given a file name and a FileFormat instance. — data_file","text":"","code":"data_file(x, file_name)  # S4 method for class 'FileFormat,character' data_file(x, file_name)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/data_file-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic function to get the name of the data file, given a file name and a FileFormat instance. — data_file","text":"x FileFormat object specifying format requirements file_name character string specifying file name derive data file name ","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/data_file-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic function to get the name of the data file, given a file name and a FileFormat instance. — data_file","text":"correct data file name character string. character string representing data file name","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/data_file-methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generic function to get the name of the data file, given a file name and a FileFormat instance. — data_file","text":"function performs following steps: input file_name already matches data file format, returns     file_name . file_name matches header file format, constructs returns     corresponding data file name. file_name match either format, throws error.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/data_file-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic function to get the name of the data file, given a file name and a FileFormat instance. — data_file","text":"","code":"fmt <- new(\"FileFormat\", header_extension = \"hdr\", data_extension = \"img\") data_file(fmt, \"brain_scan.img\")  # Returns \"brain_scan.img\" #> [1] \"brain_scan.img\" data_file(fmt, \"brain_scan.hdr\")  # Also Returns \"brain_scan.img\" #> [1] \"brain_scan.img\""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/data_file_matches-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic function to test whether a file name conforms to the given a FileFormat instance. Will test for match to data file only — data_file_matches","title":"Generic function to test whether a file name conforms to the given a FileFormat instance. Will test for match to data file only — data_file_matches","text":"Validates whether file name conforms data file format specification.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/data_file_matches-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic function to test whether a file name conforms to the given a FileFormat instance. Will test for match to data file only — data_file_matches","text":"","code":"data_file_matches(x, file_name)  # S4 method for class 'FileFormat,character' data_file_matches(x, file_name)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/data_file_matches-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic function to test whether a file name conforms to the given a FileFormat instance. Will test for match to data file only — data_file_matches","text":"x FileFormat object specifying format requirements file_name character string specifying file name validate","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/data_file_matches-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic function to test whether a file name conforms to the given a FileFormat instance. Will test for match to data file only — data_file_matches","text":"TRUE match, FALSE otherwise.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/data_file_matches-methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generic function to test whether a file name conforms to the given a FileFormat instance. Will test for match to data file only — data_file_matches","text":"function performs case-sensitive pattern matching verify file name ends specified data extension. match performed using regular expression ensures extension appears end file name.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/data_file_matches-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic function to test whether a file name conforms to the given a FileFormat instance. Will test for match to data file only — data_file_matches","text":"","code":"fmt <- new(\"FileFormat\", header_extension = \"hdr\", data_extension = \"img\") data_file_matches(fmt, \"brain_scan.img\")  # TRUE #> [1] TRUE data_file_matches(fmt, \"brain_scan.hdr\")  # FALSE #> [1] FALSE data_file_matches(fmt, \"brain.img.gz\")    # FALSE #> [1] FALSE"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/data_reader-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Data Reader for AFNI Format — data_reader,NIFTIMetaInfo-method","title":"Create Data Reader for AFNI Format — data_reader,NIFTIMetaInfo-method","text":"Create Data Reader AFNI Format","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/data_reader-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Data Reader for AFNI Format — data_reader,NIFTIMetaInfo-method","text":"","code":"# S4 method for class 'NIFTIMetaInfo' data_reader(x, offset = 0)  # S4 method for class 'AFNIMetaInfo' data_reader(x, offset = 0)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/data_reader-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Data Reader for AFNI Format — data_reader,NIFTIMetaInfo-method","text":"x AFNIMetaInfo object offset Numeric byte offset","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/data_reader-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Data Reader for AFNI Format — data_reader,NIFTIMetaInfo-method","text":"BinaryReader object","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/data_reader.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Data Reader — data_reader","title":"Create a Data Reader — data_reader","text":"Creates data reader accessing neuroimaging data various file formats.   reader provides unified interface reading data regardless underlying format.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/data_reader.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Data Reader — data_reader","text":"","code":"data_reader(x, offset)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/data_reader.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Data Reader — data_reader","text":"x object containing metadata required create reader (e.g., file path, format info) offset Numeric. Byte offset data reading begin. Default 0.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/data_reader.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Data Reader — data_reader","text":"BinaryReader object configured specific data format","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/data_reader.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a Data Reader — data_reader","text":"Create Data Reader Neuroimaging Data data_reader function generic creates appropriate readers different neuroimaging formats. handles: File format detection validation Endianness configuration Data type conversion Compression handling (e.g., gzip) Proper byte alignment","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/data_reader.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Data Reader — data_reader","text":"","code":"# Create reader for NIFTI file meta <- read_header(system.file(\"extdata\", \"global_mask_v4.nii\", package=\"neuroim2\")) reader <- data_reader(meta, offset = 0)  # Read first 100 voxels data <- read_elements(reader, 100)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/dim-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Dimensions of FileMetaInfo Object — dim,ClusteredNeuroVec-method","title":"Get Dimensions of FileMetaInfo Object — dim,ClusteredNeuroVec-method","text":"Get Dimensions FileMetaInfo Object dim NeuroObj object Get dimensions object","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/dim-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Dimensions of FileMetaInfo Object — dim,ClusteredNeuroVec-method","text":"","code":"# S4 method for class 'ClusteredNeuroVec' dim(x)  # S4 method for class 'FileMetaInfo' dim(x)  # S4 method for class 'NeuroObj' dim(x)  # S4 method for class 'NeuroSpace' dim(x)  # S4 method for class 'ROICoords' dim(x)  # S4 method for class 'ROIVol' dim(x)  # S4 method for class 'ROICoords' dim(x)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/dim-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Dimensions of FileMetaInfo Object — dim,ClusteredNeuroVec-method","text":"x object","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/dim-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Dimensions of FileMetaInfo Object — dim,ClusteredNeuroVec-method","text":"numeric vector length 2 containing dimensions ROICoords object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/dim_of-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the length of a given dimension of an object — dim_of","title":"Get the length of a given dimension of an object — dim_of","text":"function returns length given axis (dimension) object. axis can specified using position name.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/dim_of-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the length of a given dimension of an object — dim_of","text":"","code":"dim_of(x, axis)  # S4 method for class 'NeuroSpace,NamedAxis' dim_of(x, axis)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/dim_of-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the length of a given dimension of an object — dim_of","text":"x NeuroSpace object axis NamedAxis query","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/dim_of-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the length of a given dimension of an object — dim_of","text":"integer representing length specified axis x.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/dim_of-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the length of a given dimension of an object — dim_of","text":"","code":"x <- NeuroSpace(c(10,10,10), spacing=c(1,1,1)) stopifnot(dim_of(x, x@axes@i) == 10)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/downsample-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Downsample an Image — downsample","title":"Downsample an Image — downsample","text":"function downsamples neuroimaging object, reducing spatial resolution preserving temporal dimension.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/downsample-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Downsample an Image — downsample","text":"","code":"downsample(x, ...)  # S4 method for class 'DenseNeuroVec' downsample(x, spacing = NULL, factor = NULL, outdim = NULL, method = \"box\")  # S4 method for class 'NeuroVec' downsample(x, spacing = NULL, factor = NULL, outdim = NULL, method = \"box\")  # S4 method for class 'DenseNeuroVol' downsample(x, spacing = NULL, factor = NULL, outdim = NULL, method = \"box\")  # S4 method for class 'NeuroVol' downsample(x, spacing = NULL, factor = NULL, outdim = NULL, method = \"box\")"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/downsample-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Downsample an Image — downsample","text":"x DenseNeuroVol object downsample ... Additional arguments passed specific downsample methods. spacing Target voxel spacing (numeric vector length 3) factor Downsampling factor (single value vector length 3, 0 1) outdim Target output dimensions (numeric vector length 3) method Downsampling method (currently \"box\" box averaging)","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/downsample-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Downsample an Image — downsample","text":"object class x, downsampled according specified parameters.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/downsample-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Downsample an Image — downsample","text":"","code":"# Create a sample 4D image data <- array(rnorm(64*64*32*10), dim = c(64, 64, 32, 10)) space <- NeuroSpace(dim = c(64, 64, 32, 10),                      origin = c(0, 0, 0),                     spacing = c(2, 2, 2)) nvec <- DenseNeuroVec(data, space)  # Downsample by factor nvec_down1 <- downsample(nvec, factor = 0.5)  # Downsample to target spacing nvec_down2 <- downsample(nvec, spacing = c(4, 4, 4))  # Downsample to target dimensions nvec_down3 <- downsample(nvec, outdim = c(32, 32, 16))  # Create a sample 3D volume data <- array(rnorm(64*64*32), dim = c(64, 64, 32)) space <- NeuroSpace(dim = c(64, 64, 32),                      origin = c(0, 0, 0),                     spacing = c(2, 2, 2)) vol <- DenseNeuroVol(data, space)  # Downsample by factor vol_down1 <- downsample(vol, factor = 0.5)  # Downsample to target spacing vol_down2 <- downsample(vol, spacing = c(4, 4, 4))  # Downsample to target dimensions vol_down3 <- downsample(vol, outdim = c(32, 32, 16))"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/drop-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Drop a dimension — drop,NeuroVec-method","title":"Drop a dimension — drop,NeuroVec-method","text":"Drop dimension","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/drop-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Drop a dimension — drop,NeuroVec-method","text":"","code":"# S4 method for class 'NeuroVec' drop(x)  # S4 method for class 'NeuroVec' drop(x)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/drop-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Drop a dimension — drop,NeuroVec-method","text":"x object drop dimension ","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/drop-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Drop a dimension — drop,NeuroVec-method","text":"object class x reduced dimensions elements.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/drop.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic Drop Method — drop","title":"Generic Drop Method — drop","text":"Provides mechanism remove dimensions elements object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/drop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic Drop Method — drop","text":"","code":"drop(x)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/drop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic Drop Method — drop","text":"x object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/drop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic Drop Method — drop","text":"object class x reduced dimensions elements.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/drop_dim-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Drop a Dimension from an Object — drop_dim","title":"Drop a Dimension from an Object — drop_dim","text":"function removes specified dimension given object, matrix array.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/drop_dim-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Drop a Dimension from an Object — drop_dim","text":"","code":"drop_dim(x, dimnum)  # S4 method for class 'AxisSet2D,numeric' drop_dim(x, dimnum)  # S4 method for class 'AxisSet2D,missing' drop_dim(x, dimnum)  # S4 method for class 'AxisSet3D,numeric' drop_dim(x, dimnum)  # S4 method for class 'AxisSet3D,missing' drop_dim(x, dimnum)  # S4 method for class 'NeuroSpace,numeric' drop_dim(x, dimnum)  # S4 method for class 'NeuroSpace,missing' drop_dim(x)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/drop_dim-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Drop a Dimension from an Object — drop_dim","text":"x AxisSet3D object dimnum Numeric index dimension drop (optional)","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/drop_dim-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Drop a Dimension from an Object — drop_dim","text":"object class x specified dimension removed.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/drop_dim-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Drop a Dimension from an Object — drop_dim","text":"","code":"# Create a NeuroSpace object with dimensions (10, 10, 10) x <- NeuroSpace(c(10, 10, 10), c(1, 1, 1))  # Drop the first dimension x1 <- drop_dim(x, 1)  # Check the new dimensions ndim(x1) == 2 #> [1] TRUE dim(x1)[1] == 10 #> [1] TRUE"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/embed_kernel-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic function to position kernel in a position in image space — embed_kernel","title":"Generic function to position kernel in a position in image space — embed_kernel","text":"Generic function position kernel position image space","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/embed_kernel-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic function to position kernel in a position in image space — embed_kernel","text":"","code":"embed_kernel(x, sp, center_voxel, ...)  # S4 method for class 'Kernel,NeuroSpace,numeric' embed_kernel(x, sp, center_voxel, weight = 1)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/embed_kernel-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic function to position kernel in a position in image space — embed_kernel","text":"x kernel object sp space embed kernel center_voxel voxel marking center kernel embedded space ... extra args weight multiply kernel weights value","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/embed_kernel-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic function to position kernel in a position in image space — embed_kernel","text":"object representing embedded kernel specified space.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/embed_kernel-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic function to position kernel in a position in image space — embed_kernel","text":"","code":"# Create a 3D Gaussian kernel with dimensions 3x3x3 and voxel size 1x1x1 kern <- Kernel(kerndim = c(3,3,3), vdim = c(1,1,1), FUN = dnorm, sd = 1)  # Create a NeuroSpace object to embed the kernel in space <- NeuroSpace(c(10,10,10), c(1,1,1))  # Embed the kernel at the center of the space (position 5,5,5) embedded_kern <- embed_kernel(kern, space, c(5,5,5))  # The result is a SparseNeuroVol with kernel weights centered at (5,5,5) # We can also scale the kernel weights by using the weight parameter embedded_kern_scaled <- embed_kernel(kern, space, c(5,5,5), weight = 2)  # The scaled kernel has weights twice as large as the original max(values(embedded_kern_scaled)) == 2 * max(values(embedded_kern)) #> [1] TRUE"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/extract-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract or replace parts of an object — [","title":"Extract or replace parts of an object — [","text":"Extract replace parts object subset ROIVol","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/extract-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract or replace parts of an object — [","text":"","code":"# S4 method for class 'ROIVol,numeric,missing,ANY' x[i, j, ..., drop = TRUE]  # S4 method for class 'ROIVol,numeric,missing,ANY' x[i, j, ..., drop = TRUE]  # S4 method for class 'ROIVol,logical,missing,ANY' x[i, j, ..., drop = TRUE]"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/extract-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract or replace parts of an object — [","text":"x object first index j second index ... additional arguments drop drop dimension","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/extract-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract or replace parts of an object — [","text":"subset input object, dimensions depending indexing `drop` parameter.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/extractor3d.html","id":null,"dir":"Reference","previous_headings":"","what":"Array-like access for 3-dimensional data structures — extractor3d","title":"Array-like access for 3-dimensional data structures — extractor3d","text":"generic function provides array-like access 3-dimensional data structures. allows flexible indexing subsetting 3D arrays array-like objects.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/extractor3d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Array-like access for 3-dimensional data structures — extractor3d","text":"","code":"# S4 method for class 'ArrayLike3D,numeric,missing,ANY' x[i, j, k, ..., drop = TRUE]  # S4 method for class 'ArrayLike3D,matrix,missing,ANY' x[i, j, k, ..., drop = TRUE]  # S4 method for class 'ArrayLike3D,missing,missing,ANY' x[i, j, k, ..., drop = TRUE]  # S4 method for class 'ArrayLike3D,missing,numeric,ANY' x[i, j, k, ..., drop = TRUE]"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/extractor3d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Array-like access for 3-dimensional data structures — extractor3d","text":"x 3-dimensional object accessed. First index dimension. j Second index dimension. k Third index dimension. ... Additional arguments passed methods. drop Logical. TRUE, result coerced lowest possible dimension.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/extractor3d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Array-like access for 3-dimensional data structures — extractor3d","text":"subset input object, dimensions depending indexing `drop` parameter.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/extractor4d.html","id":null,"dir":"Reference","previous_headings":"","what":"Array-like access for 4-dimensional data structures — extractor4d","title":"Array-like access for 4-dimensional data structures — extractor4d","text":"generic function provides array-like access 4-dimensional data structures. allows flexible indexing subsetting 4D arrays array-like objects. Provides array-like access ClusteredNeuroVec objects, supporting extraction patterns like x[,,,t] get 3D volumes specific time points.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/extractor4d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Array-like access for 4-dimensional data structures — extractor4d","text":"","code":"# S4 method for class 'ArrayLike4D,matrix,missing,ANY' x[i, j, k, m, ..., drop = TRUE]  # S4 method for class 'ArrayLike4D,numeric,numeric,ANY' x[i, j, k, m, ..., drop = TRUE]  # S4 method for class 'ArrayLike4D,numeric,missing,ANY' x[i, j, k, m, ..., drop = TRUE]  # S4 method for class 'ArrayLike4D,integer,missing,ANY' x[i, j, k, m, ..., drop = TRUE]  # S4 method for class 'ArrayLike4D,missing,missing,ANY' x[i, j, k, m, ..., drop = TRUE]  # S4 method for class 'ArrayLike4D,missing,numeric,ANY' x[i, j, k, m, ..., drop = TRUE]  # S4 method for class 'ClusteredNeuroVec,missing,missing,ANY' x[i, j, k, m, ..., drop = TRUE]  # S4 method for class 'ClusteredNeuroVec,missing,missing,ANY' x[i, j, k, m, ..., drop = TRUE]  # S4 method for class 'ClusteredNeuroVec,numeric,numeric,ANY' x[i, j, k, m, ..., drop = TRUE]"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/extractor4d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Array-like access for 4-dimensional data structures — extractor4d","text":"x 4-dimensional object accessed. First index dimension. j Second index dimension. k Third index dimension. m Fourth index dimension. ... Additional arguments passed methods. drop Logical. TRUE, result coerced lowest possible dimension.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/extractor4d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Array-like access for 4-dimensional data structures — extractor4d","text":"subset input object, dimensions depending indexing `drop` parameter.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/file_matches-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic function to test whether a file name conforms to the given FileFormat instance. Will test for match to either header file or data file — file_matches","title":"Generic function to test whether a file name conforms to the given FileFormat instance. Will test for match to either header file or data file — file_matches","text":"Validates whether file name conforms specified FileFormat verifies existence header data files.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/file_matches-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic function to test whether a file name conforms to the given FileFormat instance. Will test for match to either header file or data file — file_matches","text":"","code":"file_matches(x, file_name)  # S4 method for class 'FileFormat,character' file_matches(x, file_name)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/file_matches-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic function to test whether a file name conforms to the given FileFormat instance. Will test for match to either header file or data file — file_matches","text":"x FileFormat object specifying format requirements file_name character string specifying file name validate","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/file_matches-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic function to test whether a file name conforms to the given FileFormat instance. Will test for match to either header file or data file — file_matches","text":"TRUE match, FALSE otherwise. logical value: TRUE file matches format header   data files exist, FALSE otherwise","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/file_matches-methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generic function to test whether a file name conforms to the given FileFormat instance. Will test for match to either header file or data file — file_matches","text":"function performs following validation steps: Checks file name matches either header data format Verifies existence corresponding paired file Returns FALSE either check fails File names validated using case-sensitive extension matching.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/file_matches-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic function to test whether a file name conforms to the given FileFormat instance. Will test for match to either header file or data file — file_matches","text":"","code":"# Create a FileFormat for NIFTI format # \\donttest{ fmt <- new(\"FileFormat\",   file_format = \"NIFTI\",   header_encoding = \"raw\",   header_extension = \"nii\",   data_encoding = \"raw\",   data_extension = \"nii\")  # Create temporary file tmp <- tempfile(\"brainscan\", fileext = \".nii\") file.create(tmp) #> [1] TRUE  # Check if files exist and match format file_matches(fmt, tmp) #> [1] TRUE  # Clean up unlink(tmp) # }"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/findAnatomy3D.html","id":null,"dir":"Reference","previous_headings":"","what":"Find 3D anatomical orientation from axis abbreviations — findAnatomy3D","title":"Find 3D anatomical orientation from axis abbreviations — findAnatomy3D","text":"Creates 3D anatomical orientation axis abbreviations.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/findAnatomy3D.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find 3D anatomical orientation from axis abbreviations — findAnatomy3D","text":"","code":"findAnatomy3D(axis1 = \"L\", axis2 = \"P\", axis3 = \"I\")"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/findAnatomy3D.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find 3D anatomical orientation from axis abbreviations — findAnatomy3D","text":"axis1 Character string first axis (default: \"L\" Left) axis2 Character string second axis (default: \"P\" Posterior) axis3 Character string third axis (default: \"\" Inferior)","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/findAnatomy3D.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find 3D anatomical orientation from axis abbreviations — findAnatomy3D","text":"AxisSet3D object representing anatomical orientation","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/findAnatomy3D.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find 3D anatomical orientation from axis abbreviations — findAnatomy3D","text":"","code":"# Create orientation with default LPI axes orient <- findAnatomy3D() # Create orientation with custom axes orient <- findAnatomy3D(\"R\", \"A\", \"S\")"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/gaussian_blur.html","id":null,"dir":"Reference","previous_headings":"","what":"Gaussian Blur for Volumetric Images — gaussian_blur","title":"Gaussian Blur for Volumetric Images — gaussian_blur","text":"function applies isotropic discrete Gaussian kernel smooth volumetric image (3D brain MRI data). blurring performed within specified image mask, customizable kernel parameters.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/gaussian_blur.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gaussian Blur for Volumetric Images — gaussian_blur","text":"","code":"gaussian_blur(vol, mask, sigma = 2, window = 1)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/gaussian_blur.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gaussian Blur for Volumetric Images — gaussian_blur","text":"vol NeuroVol object representing image volume smoothed. mask optional LogicalNeuroVol object representing image mask. mask defines region blurring applied. provided, entire volume processed. sigma numeric value specifying standard deviation Gaussian kernel. Default 2. window integer specifying kernel size. represents number voxels include side center voxel. example, window=1 results 3x3x3 kernel. Default 1.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/gaussian_blur.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gaussian Blur for Volumetric Images — gaussian_blur","text":"NeuroVol object representing smoothed image.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/gaussian_blur.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Gaussian Blur for Volumetric Images — gaussian_blur","text":"function uses C++ implementation efficient Gaussian blurring. blurring applied voxels within specified mask (entire volume mask provided). kernel size determined 'window' parameter, shape 'sigma' parameter.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/gaussian_blur.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Gaussian Blur for Volumetric Images — gaussian_blur","text":"Gaussian blur: https://en.wikipedia.org/wiki/Gaussian_blur","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/gaussian_blur.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gaussian Blur for Volumetric Images — gaussian_blur","text":"","code":"# Load a sample brain mask brain_mask <- read_vol(system.file(\"extdata\", \"global_mask_v4.nii\", package = \"neuroim2\"))  # Apply Gaussian blurring to the brain volume blurred_vol <- gaussian_blur(brain_mask, brain_mask, sigma = 2, window = 1)  # View a slice of the original and blurred volumes image(brain_mask[,,12])  image(blurred_vol[,,12])"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/grid_to_coord-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic function to convert N-dimensional grid coordinates to real world coordinates — grid_to_coord","title":"Generic function to convert N-dimensional grid coordinates to real world coordinates — grid_to_coord","text":"Generic function convert N-dimensional grid coordinates real world coordinates","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/grid_to_coord-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic function to convert N-dimensional grid coordinates to real world coordinates — grid_to_coord","text":"","code":"grid_to_coord(x, coords)  # S4 method for class 'NeuroSpace,matrix' grid_to_coord(x, coords)  # S4 method for class 'NeuroSpace,matrix' grid_to_coord(x, coords)  # S4 method for class 'NeuroSpace,numeric' grid_to_coord(x, coords)  # S4 method for class 'NeuroVol,matrix' grid_to_coord(x, coords)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/grid_to_coord-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic function to convert N-dimensional grid coordinates to real world coordinates — grid_to_coord","text":"x object coords matrix grid coordinates","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/grid_to_coord-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic function to convert N-dimensional grid coordinates to real world coordinates — grid_to_coord","text":"numeric matrix real-world coordinates.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/grid_to_coord-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic function to convert N-dimensional grid coordinates to real world coordinates — grid_to_coord","text":"","code":"# Create a simple 3D volume bvol <- NeuroVol(array(0, c(10,10,10)), NeuroSpace(c(10,10,10), c(1,1,1))) grid_coords <- matrix(c(1.5,1.5,1.5, 5.5,5.5,5.5), ncol=3, byrow=TRUE) world <- grid_to_coord(bvol, grid_coords) grid <- coord_to_grid(bvol, world) all.equal(grid_coords, grid) #> [1] TRUE"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/grid_to_grid-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic function to convert voxel coordinates in the reference space (LPI) to native array space. — grid_to_grid","title":"Generic function to convert voxel coordinates in the reference space (LPI) to native array space. — grid_to_grid","text":"Generic function convert voxel coordinates reference space (LPI) native array space.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/grid_to_grid-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic function to convert voxel coordinates in the reference space (LPI) to native array space. — grid_to_grid","text":"","code":"grid_to_grid(x, vox)  # S4 method for class 'NeuroSpace,matrix' grid_to_grid(x, vox)  # S4 method for class 'matrix,matrix' grid_to_grid(x, vox)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/grid_to_grid-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic function to convert voxel coordinates in the reference space (LPI) to native array space. — grid_to_grid","text":"x object vox matrix LPI voxel coordinates","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/grid_to_grid-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic function to convert voxel coordinates in the reference space (LPI) to native array space. — grid_to_grid","text":"numeric matrix native voxel coordinates.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/grid_to_grid-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic function to convert voxel coordinates in the reference space (LPI) to native array space. — grid_to_grid","text":"","code":"# Create a simple 3D volume in LPI orientation space <- NeuroSpace(c(10,10,10), c(2,2,2))  # Create a reoriented space in RAS orientation space_ras <- reorient(space, c(\"R\", \"A\", \"S\"))  # Convert coordinates between orientations voxel_coords <- t(matrix(c(1,1,1))) new_coords <- grid_to_grid(space_ras, voxel_coords) print(new_coords) #>      [,1] [,2] [,3] #> [1,]   10   10   10"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/grid_to_index-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic function to convert N-dimensional grid coordinates to 1D indices — grid_to_index","title":"Generic function to convert N-dimensional grid coordinates to 1D indices — grid_to_index","text":"Converts 2D grid coordinates linear indices NeuroSlice object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/grid_to_index-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic function to convert N-dimensional grid coordinates to 1D indices — grid_to_index","text":"","code":"grid_to_index(x, coords)  # S4 method for class 'NeuroSlice,matrix' grid_to_index(x, coords)  # S4 method for class 'NeuroSlice,numeric' grid_to_index(x, coords)  # S4 method for class 'NeuroSpace,matrix' grid_to_index(x, coords)  # S4 method for class 'NeuroSpace,numeric' grid_to_index(x, coords)  # S4 method for class 'NeuroVol,matrix' grid_to_index(x, coords)  # S4 method for class 'NeuroVol,numeric' grid_to_index(x, coords)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/grid_to_index-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic function to convert N-dimensional grid coordinates to 1D indices — grid_to_index","text":"x NeuroSlice object coords Either numeric vector length 2 matrix 2 columns, representing (x,y) coordinates slice grid","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/grid_to_index-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic function to convert N-dimensional grid coordinates to 1D indices — grid_to_index","text":"integer vector 1D indices corresponding coords.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/grid_to_index-methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generic function to convert N-dimensional grid coordinates to 1D indices — grid_to_index","text":"Convert Grid Coordinates Linear Indices","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/grid_to_index-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic function to convert N-dimensional grid coordinates to 1D indices — grid_to_index","text":"","code":"# Create a 2D space (10x10) space_2d <- NeuroSpace(c(10,10), c(1,1))  # Convert 2D grid coordinates to linear indices coords_2d <- matrix(c(1,1, 2,2), ncol=2, byrow=TRUE) idx_2d <- grid_to_index(space_2d, coords_2d) # First coordinate (1,1) maps to index 1 # Second coordinate (2,2) maps to index 12 (= 2 + (2-1)*10)  # Create a 3D space (10x10x10) space_3d <- NeuroSpace(c(10,10,10), c(1,1,1))  # Convert 3D grid coordinates to linear indices coords_3d <- matrix(c(1,1,1, 2,2,2), ncol=3, byrow=TRUE) idx_3d <- grid_to_index(space_3d, coords_3d)  # Single coordinate can also be converted idx <- grid_to_index(space_3d, c(1,1,1))  slice_space <- NeuroSpace(c(10, 10)) slice_data <- matrix(1:100, 10, 10) slice <- NeuroSlice(slice_data, slice_space)  # Convert single coordinate idx <- grid_to_index(slice, c(5, 5))  # Convert multiple coordinates coords <- matrix(c(1,1, 2,2, 3,3), ncol=2, byrow=TRUE) indices <- grid_to_index(slice, coords)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/guided_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Edge-Preserving Guided Filter for Volumetric Images — guided_filter","title":"Edge-Preserving Guided Filter for Volumetric Images — guided_filter","text":"function applies guided filter volumetric image (3D brain MRI data) perform edge-preserving smoothing. guided filter smooths image preserving edges, providing balance noise reduction structural preservation.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/guided_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Edge-Preserving Guided Filter for Volumetric Images — guided_filter","text":"","code":"guided_filter(vol, radius = 4, epsilon = 0.7^2)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/guided_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Edge-Preserving Guided Filter for Volumetric Images — guided_filter","text":"vol NeuroVol object representing image volume filtered. radius integer specifying spatial radius filter. Default 4. epsilon numeric value specifying regularization parameter. controls degree smoothing edge preservation. Default 0.49 (0.7^2).","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/guided_filter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Edge-Preserving Guided Filter for Volumetric Images — guided_filter","text":"NeuroVol object representing filtered image.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/guided_filter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Edge-Preserving Guided Filter for Volumetric Images — guided_filter","text":"guided filter operates computing local linear models guidance image (input image implementation) output. 'radius' parameter determines size local neighborhood, 'epsilon' controls smoothness filter. implementation uses box blur operations efficiency, approximates behavior original guided filter algorithm.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/guided_filter.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Edge-Preserving Guided Filter for Volumetric Images — guided_filter","text":", K., Sun, J., & Tang, X. (2013). Guided Image Filtering. IEEE Transactions Pattern Analysis Machine Intelligence, 35(6), 1397-1409.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/guided_filter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Edge-Preserving Guided Filter for Volumetric Images — guided_filter","text":"","code":"# Load an example brain volume brain_vol <- read_vol(system.file(\"extdata\", \"global_mask_v4.nii\", package = \"neuroim2\"))  # Apply guided filtering to the brain volume # \\donttest{ filtered_vol <- guided_filter(brain_vol, radius = 4, epsilon = 0.49)  # Visualize a slice of the original and filtered volumes oldpar <- par(mfrow = c(1, 2)) image(brain_vol[,,12], main = \"Original\") image(filtered_vol[,,12], main = \"Filtered\")  par(oldpar) # }"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/header_file-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic function to get the name of the header file, given a file name and a FileFormat instance. — header_file","title":"Generic function to get the name of the header file, given a file name and a FileFormat instance. — header_file","text":"Derives header file name given file name based FileFormat specifications.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/header_file-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic function to get the name of the header file, given a file name and a FileFormat instance. — header_file","text":"","code":"header_file(x, file_name)  # S4 method for class 'FileFormat,character' header_file(x, file_name)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/header_file-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic function to get the name of the header file, given a file name and a FileFormat instance. — header_file","text":"x FileFormat object specifying format requirements file_name character string specifying file name derive header file name ","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/header_file-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic function to get the name of the header file, given a file name and a FileFormat instance. — header_file","text":"correct header file name character string. character string representing header file name","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/header_file-methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generic function to get the name of the header file, given a file name and a FileFormat instance. — header_file","text":"function performs following steps: input file_name already matches header file format, returns     file_name . file_name matches data file format, constructs returns     corresponding header file name. file_name match either format, throws error.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/header_file-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic function to get the name of the header file, given a file name and a FileFormat instance. — header_file","text":"","code":"fmt <- new(\"FileFormat\", header_extension = \"hdr\", data_extension = \"img\") header_file(fmt, \"brain_scan.hdr\")  # Returns \"brain_scan.hdr\" #> [1] \"brain_scan.hdr\" header_file(fmt, \"brain_scan.img\")  # Returns \"brain_scan.hdr\" #> [1] \"brain_scan.hdr\""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/header_file_matches-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic function to test whether a file name conforms to the given FileFormat instance. Will test for match to header file only — header_file_matches","title":"Generic function to test whether a file name conforms to the given FileFormat instance. Will test for match to header file only — header_file_matches","text":"Validates whether file name conforms header file format specification.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/header_file_matches-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic function to test whether a file name conforms to the given FileFormat instance. Will test for match to header file only — header_file_matches","text":"","code":"header_file_matches(x, file_name)  # S4 method for class 'FileFormat,character' header_file_matches(x, file_name)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/header_file_matches-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic function to test whether a file name conforms to the given FileFormat instance. Will test for match to header file only — header_file_matches","text":"x FileFormat object specifying format requirements file_name character string specifying file name validate","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/header_file_matches-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic function to test whether a file name conforms to the given FileFormat instance. Will test for match to header file only — header_file_matches","text":"TRUE match, FALSE otherwise. logical value: TRUE file name matches header format,   FALSE otherwise","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/header_file_matches-methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generic function to test whether a file name conforms to the given FileFormat instance. Will test for match to header file only — header_file_matches","text":"function performs case-sensitive pattern matching verify file name ends specified header extension. match performed using regular expression ensures extension appears end file name.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/header_file_matches-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic function to test whether a file name conforms to the given FileFormat instance. Will test for match to header file only — header_file_matches","text":"","code":"fmt <- new(\"FileFormat\", header_extension = \"hdr\", data_extension = \"img\") header_file_matches(fmt, \"brain_scan.hdr\")  # TRUE #> [1] TRUE header_file_matches(fmt, \"brain_scan.img\")  # FALSE #> [1] FALSE header_file_matches(fmt, \"brain.hdr.gz\")    # FALSE #> [1] FALSE"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/image.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic Image Method for Creating Visual Representations — image","title":"Generic Image Method for Creating Visual Representations — image","text":"Creates visual representation (image) object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/image.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic Image Method for Creating Visual Representations — image","text":"x object rendered image. ... Additional arguments passed methods.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/image.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic Image Method for Creating Visual Representations — image","text":"image object representing x.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/index_to_coord-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"convert 1d indices to n-dimensional real world coordinates — index_to_coord","title":"convert 1d indices to n-dimensional real world coordinates — index_to_coord","text":"convert 1d indices n-dimensional real world coordinates","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/index_to_coord-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"convert 1d indices to n-dimensional real world coordinates — index_to_coord","text":"","code":"index_to_coord(x, idx)  # S4 method for class 'NeuroSpace,numeric' index_to_coord(x, idx)  # S4 method for class 'NeuroSpace,integer' index_to_coord(x, idx)  # S4 method for class 'NeuroVol,integer' index_to_coord(x, idx)  # S4 method for class 'NeuroVec,integer' index_to_coord(x, idx)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/index_to_coord-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"convert 1d indices to n-dimensional real world coordinates — index_to_coord","text":"x object idx 1D indices","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/index_to_coord-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"convert 1d indices to n-dimensional real world coordinates — index_to_coord","text":"numeric matrix real-world coordinates.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/index_to_coord-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"convert 1d indices to n-dimensional real world coordinates — index_to_coord","text":"","code":"bvol <- NeuroVol(array(0, c(10,10,10)), NeuroSpace(c(10,10,10), c(1,1,1))) idx <- 1:10 g <- index_to_coord(bvol, idx) idx2 <- coord_to_index(bvol, g) all.equal(idx, idx2) #> [1] TRUE"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/index_to_grid-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert 1d indices to n-dimensional grid coordinates — index_to_grid","title":"Convert 1d indices to n-dimensional grid coordinates — index_to_grid","text":"Converts linear indices 2D grid coordinates NeuroSlice object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/index_to_grid-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert 1d indices to n-dimensional grid coordinates — index_to_grid","text":"","code":"index_to_grid(x, idx)  # S4 method for class 'NeuroSlice,numeric' index_to_grid(x, idx)  # S4 method for class 'NeuroSpace,numeric' index_to_grid(x, idx)  # S4 method for class 'NeuroVec,index' index_to_grid(x, idx)  # S4 method for class 'NeuroVec,integer' index_to_grid(x, idx)  # S4 method for class 'NeuroVol,index' index_to_grid(x, idx)  # S4 method for class 'NeuroVol,integer' index_to_grid(x, idx)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/index_to_grid-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert 1d indices to n-dimensional grid coordinates — index_to_grid","text":"x NeuroSlice object idx Integer vector linear indices convert","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/index_to_grid-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert 1d indices to n-dimensional grid coordinates — index_to_grid","text":"numeric matrix grid coordinates.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/index_to_grid-methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert 1d indices to n-dimensional grid coordinates — index_to_grid","text":"Convert Linear Indices Grid Coordinates","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/index_to_grid-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert 1d indices to n-dimensional grid coordinates — index_to_grid","text":"","code":"bvol <- NeuroVol(array(0, c(10,10,10)), NeuroSpace(c(10,10,10), c(1,1,1)))  idx <- 1:10  g <- index_to_grid(bvol, idx)  bvol[g] #>  [1] 0 0 0 0 0 0 0 0 0 0  slice_space <- NeuroSpace(c(10, 10)) slice_data <- matrix(1:100, 10, 10) slice <- NeuroSlice(slice_data, slice_space)  # Convert single index coords <- index_to_grid(slice, 55)  # Convert multiple indices indices <- c(1, 25, 50, 75, 100) coords_mat <- index_to_grid(slice, indices)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/indices-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Indices from an IndexLookupVol Object — indices,IndexLookupVol-method","title":"Get Indices from an IndexLookupVol Object — indices,IndexLookupVol-method","text":"Retrieves vector indices included lookup volume.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/indices-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Indices from an IndexLookupVol Object — indices,IndexLookupVol-method","text":"","code":"# S4 method for class 'IndexLookupVol' indices(x)  # S4 method for class 'ROIVol' indices(x)  # S4 method for class 'ROIVol' indices(x)  # S4 method for class 'ROIVec' indices(x)  # S4 method for class 'AbstractSparseNeuroVec' indices(x)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/indices-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Indices from an IndexLookupVol Object — indices,IndexLookupVol-method","text":"x IndexLookupVol object","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/indices-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Indices from an IndexLookupVol Object — indices,IndexLookupVol-method","text":"indices lookup volume","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/indices-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Indices from an IndexLookupVol Object — indices,IndexLookupVol-method","text":"","code":"space <- NeuroSpace(c(64, 64, 64), c(1, 1, 1), c(0, 0, 0)) ilv <- IndexLookupVol(space, c(1:100)) idx <- indices(ilv)  # Get included indices"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/indices.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract indices — indices","title":"Extract indices — indices","text":"Extract indices","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/indices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract indices — indices","text":"","code":"indices(x)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/indices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract indices — indices","text":"x object extract indices","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/indices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract indices — indices","text":"vector indices x.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/indices.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract indices — indices","text":"","code":"# Create a NeuroSpace object with 3mm voxels space <- NeuroSpace(c(10,10,10), spacing=c(3,3,3))  # Create ROI coordinates in voxel space coords <- matrix(c(1,1,1, 2,2,2), ncol=3, byrow=TRUE)  # Create ROI volume roi_vol <- ROIVol(space, coords, data=c(1,2))  # Get linear indices of ROI voxels idx <- indices(roi_vol) # These indices can be used to index into a 3D array of size 10x10x10"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/inverse_trans-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract inverse image coordinate transformation — inverse_trans","title":"Extract inverse image coordinate transformation — inverse_trans","text":"Extract inverse image coordinate transformation","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/inverse_trans-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract inverse image coordinate transformation — inverse_trans","text":"","code":"inverse_trans(x)  # S4 method for class 'NeuroSpace' inverse_trans(x)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/inverse_trans-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract inverse image coordinate transformation — inverse_trans","text":"x object","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/inverse_trans-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract inverse image coordinate transformation — inverse_trans","text":"numeric 4x4 matrix maps real-world coordinates back grid coordinates.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/inverse_trans-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract inverse image coordinate transformation — inverse_trans","text":"","code":"bspace <- NeuroSpace(c(10,10,10), c(2,2,2)) itrans <- inverse_trans(bspace) identical(trans(bspace) %*% inverse_trans(bspace), diag(4)) #> [1] TRUE"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/labels-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Labels from ClusteredNeuroVec — labels,ClusteredNeuroVec-method","title":"Get Labels from ClusteredNeuroVec — labels,ClusteredNeuroVec-method","text":"Get Labels ClusteredNeuroVec","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/labels-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Labels from ClusteredNeuroVec — labels,ClusteredNeuroVec-method","text":"","code":"# S4 method for class 'ClusteredNeuroVec' labels(object)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/labels-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Labels from ClusteredNeuroVec — labels,ClusteredNeuroVec-method","text":"object ClusteredNeuroVec object","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/laplace_enhance.html","id":null,"dir":"Reference","previous_headings":"","what":"Laplacian Enhancement Filter for Volumetric Images — laplace_enhance","title":"Laplacian Enhancement Filter for Volumetric Images — laplace_enhance","text":"function applies multi-layer Laplacian enhancement filter volumetric image (3D brain MRI data). filter enhances details preserving edges using non-local means approach multiple scales.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/laplace_enhance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Laplacian Enhancement Filter for Volumetric Images — laplace_enhance","text":"","code":"laplace_enhance(   vol,   mask,   k = 2,   patch_size = 3,   search_radius = 2,   h = 0.7,   mapping_params = NULL,   use_normalization_free = TRUE )"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/laplace_enhance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Laplacian Enhancement Filter for Volumetric Images — laplace_enhance","text":"vol NeuroVol object representing image volume enhanced. mask LogicalNeuroVol object specifying region process. provided, entire volume processed. k integer specifying number layers decomposition (default 2). patch_size integer specifying size patches non-local means. Must odd (default 3). search_radius integer specifying radius search window (default 2). h numeric value controlling filtering strength. Higher values mean smoothing (default 0.7). mapping_params optional list parameters enhancement mappings. use_normalization_free Logical indicating whether use normalization-free weights (default TRUE).","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/laplace_enhance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Laplacian Enhancement Filter for Volumetric Images — laplace_enhance","text":"NeuroVol object representing enhanced image.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/length-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Get length of NeuroVec object — length,ClusteredNeuroVec-method","title":"Get length of NeuroVec object — length,ClusteredNeuroVec-method","text":"Returns number time points (4th dimension) NeuroVec object. represents temporal dimension neuroimaging data. Returns total number time points across vectors sequence","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/length-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get length of NeuroVec object — length,ClusteredNeuroVec-method","text":"","code":"# S4 method for class 'ClusteredNeuroVec' length(x)  # S4 method for class 'NeuroVec' length(x)  # S4 method for class 'NeuroVecSeq' length(x)  # S4 method for class 'ROIVol' length(x)  # S4 method for class 'ROICoords' length(x)  # S4 method for class 'ROIVol' length(x)  # S4 method for class 'ROICoords' length(x)  # S4 method for class 'ROIVol' length(x)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/length-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get length of NeuroVec object — length,ClusteredNeuroVec-method","text":"x NeuroVecSeq object","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/length-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get length of NeuroVec object — length,ClusteredNeuroVec-method","text":"Integer length (total number time points) integer representing number coordinates ROICoords object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/linear_access-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Linear Access Method for FileBackedNeuroVec — linear_access,FileBackedNeuroVec,numeric-method","title":"Linear Access Method for FileBackedNeuroVec — linear_access,FileBackedNeuroVec,numeric-method","text":"Internal method providing linear access memory-mapped data. Provides linear access data across vectors sequence.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/linear_access-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Linear Access Method for FileBackedNeuroVec — linear_access,FileBackedNeuroVec,numeric-method","text":"","code":"# S4 method for class 'FileBackedNeuroVec,numeric' linear_access(x, i)  # S4 method for class 'MappedNeuroVec,numeric' linear_access(x, i)  # S4 method for class 'NeuroHyperVec,ANY' linear_access(x, i, ...)  # S4 method for class 'NeuroVecSeq,numeric' linear_access(x, i)  # S4 method for class 'SparseNeuroVol,numeric' linear_access(x, i)  # S4 method for class 'AbstractSparseNeuroVec,numeric' linear_access(x, i)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/linear_access-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Linear Access Method for FileBackedNeuroVec — linear_access,FileBackedNeuroVec,numeric-method","text":"x NeuroVecSeq object Numeric vector indices linear access ... Additional arguments (used)","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/linear_access-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Linear Access Method for FileBackedNeuroVec — linear_access,FileBackedNeuroVec,numeric-method","text":"Numeric vector accessed values","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/linear_access-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Linear Access Method for FileBackedNeuroVec — linear_access,FileBackedNeuroVec,numeric-method","text":"","code":"# \\donttest{ # Create a small NeuroVec and save it nvec <- NeuroVec(matrix(1:32, 8, 4), NeuroSpace(c(2,2,2,4))) tmp <- tempfile(fileext = \".nii\") write_vec(nvec, tmp)  # Load as FileBackedNeuroVec and access values fbvec <- FileBackedNeuroVec(tmp) values <- linear_access(fbvec, 1:10)  # Clean up unlink(tmp) # }"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/linear_access.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract values from an array-like object using linear indexing. — linear_access","title":"Extract values from an array-like object using linear indexing. — linear_access","text":"function extracts values elements array-like object using linear indexing. Linear indexing way indexing array single index computed multiple indices using formula.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/linear_access.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract values from an array-like object using linear indexing. — linear_access","text":"","code":"linear_access(x, i, ...)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/linear_access.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract values from an array-like object using linear indexing. — linear_access","text":"x data source. vector indices. ... additional arguments passed methods.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/linear_access.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract values from an array-like object using linear indexing. — linear_access","text":"vector containing values specified linear indices x.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/linear_access.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract values from an array-like object using linear indexing. — linear_access","text":"","code":"# Create a sparse neuroimaging vector bspace <- NeuroSpace(c(10,10,10,100), c(1,1,1)) mask <- array(rnorm(10*10*10) > .5, c(10,10,10)) mat <- matrix(rnorm(sum(mask)), 100, sum(mask)) svec <- SparseNeuroVec(mat, bspace, mask)  # Extract values using linear indices # Get values from first timepoint at voxels 1,2,3 indices <- c(1,2,3) vals <- linear_access(svec, indices)  # Get values from multiple timepoints and voxels # First voxel at timepoint 1, second voxel at timepoint 2 indices <- c(1, 1000 + 2) # 1000 = prod(10,10,10) vals <- linear_access(svec, indices)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/load_data-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Load image data from a NeuroVecSource object — load_data,MappedNeuroVecSource-method","title":"Load image data from a NeuroVecSource object — load_data,MappedNeuroVecSource-method","text":"function loads image data NeuroVecSource object, handling various dimensionalities applying necessary transformations.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/load_data-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load image data from a NeuroVecSource object — load_data,MappedNeuroVecSource-method","text":"","code":"# S4 method for class 'MappedNeuroVecSource' load_data(x)  # S4 method for class 'NeuroVecSource' load_data(x)  # S4 method for class 'NeuroVolSource' load_data(x)  # S4 method for class 'SparseNeuroVecSource' load_data(x)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/load_data-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load image data from a NeuroVecSource object — load_data,MappedNeuroVecSource-method","text":"x NeuroVecSource object containing image metadata file information.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/load_data-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load image data from a NeuroVecSource object — load_data,MappedNeuroVecSource-method","text":"DenseNeuroVec object","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/load_data-methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Load image data from a NeuroVecSource object — load_data,MappedNeuroVecSource-method","text":"method performs following steps: 1. Validates dimensionality metadata. 2. Reads image data using RNifti. 3. Handles 5D arrays dropping 4th dimension length 1. 4. Applies slope scaling present metadata. 5. Constructs NeuroSpace object appropriate dimensions spatial information. 6. Creates returns DenseNeuroVec object, handling 3D 4D input arrays.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/load_data-methods.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Load image data from a NeuroVecSource object — load_data,MappedNeuroVecSource-method","text":"method currently supports NIfTI file format RNifti.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/load_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Read data from a data source. — load_data","title":"Read data from a data source. — load_data","text":"function loads data data source returns format compatible functions neuroim2 package. format returned data depends type data source used.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/load_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read data from a data source. — load_data","text":"","code":"load_data(x, ...)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/load_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read data from a data source. — load_data","text":"x data source. ... additional arguments passed methods.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/load_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read data from a data source. — load_data","text":"R object containing loaded data, format compatible neuroim2 package.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/load_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read data from a data source. — load_data","text":"","code":"# Create a NeuroVolSource from a NIFTI file and load it fname <- system.file(\"extdata\", \"global_mask_v4.nii\", package=\"neuroim2\") src <- NeuroVolSource(fname) vol <- load_data(src) # The loaded volume is a DenseNeuroVol object class(vol) #> [1] \"DenseNeuroVol\" #> attr(,\"package\") #> [1] \"neuroim2\" dim(vol) #> [1] 64 64 25"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/lookup-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Lookup Values in an IndexLookupVol Object — lookup,IndexLookupVol,numeric-method","title":"Lookup Values in an IndexLookupVol Object — lookup,IndexLookupVol,numeric-method","text":"Performs lookup operation IndexLookupVol object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/lookup-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lookup Values in an IndexLookupVol Object — lookup,IndexLookupVol,numeric-method","text":"","code":"# S4 method for class 'IndexLookupVol,numeric' lookup(x, i)  # S4 method for class 'AbstractSparseNeuroVec,numeric' lookup(x, i)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/lookup-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lookup Values in an IndexLookupVol Object — lookup,IndexLookupVol,numeric-method","text":"x IndexLookupVol object numeric vector indices look ","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/lookup-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lookup Values in an IndexLookupVol Object — lookup,IndexLookupVol,numeric-method","text":"values lookup volume","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/lookup-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lookup Values in an IndexLookupVol Object — lookup,IndexLookupVol,numeric-method","text":"","code":"space <- NeuroSpace(c(64, 64, 64), c(1, 1, 1), c(0, 0, 0)) ilv <- IndexLookupVol(space, c(1:100)) lookup(ilv, c(1, 2, 3))  # Look up values for indices 1, 2, and 3 #> [1] 1 2 3"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/lookup.html","id":null,"dir":"Reference","previous_headings":"","what":"Index Lookup operation — lookup","title":"Index Lookup operation — lookup","text":"Index Lookup operation","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/lookup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Index Lookup operation — lookup","text":"","code":"lookup(x, i, ...)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/lookup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Index Lookup operation — lookup","text":"x object query index lookup ... additional arguments","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/lookup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Index Lookup operation — lookup","text":"value(s) specified index/indices x.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/lookup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Index Lookup operation — lookup","text":"","code":"# Create a 64x64x64 space space <- NeuroSpace(c(64, 64, 64), c(1, 1, 1), c(0, 0, 0))  # Create a lookup volume with first 100 indices ilv <- IndexLookupVol(space, 1:100)  # Look up values for indices 1, 2, and 3 # Returns their positions in the sparse representation lookup(ilv, c(1, 2, 3)) #> [1] 1 2 3  # Look up values outside the included indices # Returns 0 for indices not in the lookup volume lookup(ilv, c(101, 102)) #> [1] 0 0"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/map-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a function to an object. — mapf","title":"Apply a function to an object. — mapf","text":"function applies function object, additional arguments passed function using ... argument. mapping object specifies function applied, can take many different forms, depending object function used. return value depends function used.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/map-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a function to an object. — mapf","text":"","code":"mapf(x, m, ...)  # S4 method for class 'NeuroVol,Kernel' mapf(x, m, mask = NULL)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/map-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply a function to an object. — mapf","text":"x object mapped. m mapping object. ... additional arguments passed function. mask restrict application kernel masked area","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/map-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply a function to an object. — mapf","text":"result applying mapping function x.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/map-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply a function to an object. — mapf","text":"","code":"# Create a simple 3D volume bspace <- NeuroSpace(c(10,10,10), c(1,1,1)) vol <- NeuroVol(array(rnorm(10*10*10), c(10,10,10)), bspace)  # Create a 3x3x3 mean smoothing kernel kern <- Kernel(c(3,3,3),  vdim=c(3,3,3))  # Apply the kernel to smooth the volume smoothed_vol <- mapf(vol, kern)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/map_values-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Map Values from One Set to Another Using a User-supplied Lookup Table — map_values","title":"Map Values from One Set to Another Using a User-supplied Lookup Table — map_values","text":"function maps values one set another using lookup table provided user.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/map_values-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map Values from One Set to Another Using a User-supplied Lookup Table — map_values","text":"","code":"map_values(x, lookup)  # S4 method for class 'NeuroVol,list' map_values(x, lookup)  # S4 method for class 'NeuroVol,matrix' map_values(x, lookup)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/map_values-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map Values from One Set to Another Using a User-supplied Lookup Table — map_values","text":"x object values mapped. lookup lookup table. first column \"key\" second column \"value\".","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/map_values-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map Values from One Set to Another Using a User-supplied Lookup Table — map_values","text":"object class x, original values replaced lookup table values.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/map_values-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Map Values from One Set to Another Using a User-supplied Lookup Table — map_values","text":"","code":"x <- NeuroSpace(c(10, 10, 10), c(1, 1, 1)) vol <- NeuroVol(sample(1:10, 10 * 10 * 10, replace = TRUE), x)  ## Lookup table is a list lookup <- lapply(1:10, function(i) i * 10) names(lookup) <- 1:10 ovol <- map_values(vol, lookup)  ## Lookup table is a matrix. The first column is the key, and the second column is the value names(lookup) <- 1:length(lookup) lookup.mat <- cbind(as.numeric(names(lookup)), unlist(lookup)) ovol2 <- map_values(vol, lookup.mat) all.equal(as.vector(ovol2), as.vector(ovol)) #> [1] TRUE"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/mask-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Mask from Neuroimaging Object — mask","title":"Extract Mask from Neuroimaging Object — mask","text":"Generic function extract generate mask neuroimaging objects. sparse objects @mask slot, returns stored mask. dense objects, returns filled mask (TRUE values) indicating voxels contain valid data.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/mask-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Mask from Neuroimaging Object — mask","text":"","code":"mask(x)  # S4 method for class 'ClusteredNeuroVol' mask(x)  # S4 method for class 'FileBackedNeuroVec' mask(x)  # S4 method for class 'MappedNeuroVec' mask(x)  # S4 method for class 'NeuroHyperVec' mask(x)  # S4 method for class 'NeuroSlice' mask(x)  # S4 method for class 'DenseNeuroVec' mask(x)  # S4 method for class 'DenseNeuroVol' mask(x)  # S4 method for class 'LogicalNeuroVol' mask(x)  # S4 method for class 'AbstractSparseNeuroVec' mask(x)  # S4 method for class 'SparseNeuroVecSource' mask(x)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/mask-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Mask from Neuroimaging Object — mask","text":"x neuroimaging object (NeuroVol, NeuroVec, derived classes)","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/mask-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Mask from Neuroimaging Object — mask","text":"LogicalNeuroVol object representing mask","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/mask-methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract Mask from Neuroimaging Object — mask","text":"behavior depends class input object: sparse objects (SparseNeuroVec, ClusteredNeuroVol, etc.):         Returns stored @mask slot dense objects (DenseNeuroVol, DenseNeuroVec, etc.):         Returns LogicalNeuroVol TRUE values ROI objects: implemented (use coords() instead)","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/mask-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Mask from Neuroimaging Object — mask","text":"","code":"# Create a dense volume vol <- NeuroVol(array(rnorm(64^3), c(64,64,64)), NeuroSpace(c(64,64,64))) m <- mask(vol)  # Returns all TRUE mask  # Create a sparse vector with explicit mask mask_array <- array(runif(64^3) > 0.5, c(64,64,64)) mask_vol <- LogicalNeuroVol(mask_array, NeuroSpace(c(64,64,64))) # Data must be a matrix (time x masked voxels) sparse_data <- matrix(rnorm(sum(mask_array) * 10), nrow = 10, ncol = sum(mask_array)) svec <- SparseNeuroVec(sparse_data, NeuroSpace(c(64,64,64,10)), mask_vol) m2 <- mask(svec)  # Returns the stored mask"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/matricized_access-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract values from a 4D tensor using a matrix of time-space indices. — matricized_access","title":"Extract values from a 4D tensor using a matrix of time-space indices. — matricized_access","text":"function efficiently extracts values 4D tensor (typically neuroimaging data) using matrix indices row contains time index column 1 spatial index column 2. spatial index refers position flattened spatial dimensions (x,y,z). primarily used internally series() method efficiently access time series data specific voxels.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/matricized_access-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract values from a 4D tensor using a matrix of time-space indices. — matricized_access","text":"","code":"matricized_access(x, i, ...)  # S4 method for class 'SparseNeuroVec,matrix' matricized_access(x, i)  # S4 method for class 'SparseNeuroVec,integer' matricized_access(x, i)  # S4 method for class 'SparseNeuroVec,numeric' matricized_access(x, i)  # S4 method for class 'BigNeuroVec,matrix' matricized_access(x, i)  # S4 method for class 'BigNeuroVec,integer' matricized_access(x, i)  # S4 method for class 'BigNeuroVec,numeric' matricized_access(x, i)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/matricized_access-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract values from a 4D tensor using a matrix of time-space indices. — matricized_access","text":"x data source, typically SparseNeuroVec object containing 4D neuroimaging data Either: matrix 2 columns: [time_index, space_index] specifying values extract numeric vector spatial indices extract timepoints locations ... additional arguments passed methods.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/matricized_access-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract values from a 4D tensor using a matrix of time-space indices. — matricized_access","text":"matrix, returns numeric vector values specified time-space coordinates.         vector, returns matrix column contains full time series spatial index.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/matricized_access-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract values from a 4D tensor using a matrix of time-space indices. — matricized_access","text":"","code":"# Create a sparse 4D neuroimaging vector bspace <- NeuroSpace(c(10,10,10,100), c(1,1,1)) mask <- array(rnorm(10*10*10) > .5, c(10,10,10)) mat <- matrix(rnorm(sum(mask)), 100, sum(mask)) svec <- SparseNeuroVec(mat, bspace, mask)  # Extract specific timepoint-voxel pairs # Get value at timepoint 1, voxel 1 and timepoint 2, voxel 2 idx_mat <- matrix(c(1,1, 2,2), ncol=2, byrow=TRUE) vals <- matricized_access(svec, idx_mat)  # Get full time series for voxels 1 and 2 ts_mat <- matricized_access(svec, c(1,2)) # Each column in ts_mat contains the full time series for that voxel"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/matrixToQuatern.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a Transformation Matrix to a Quaternion Representation — matrixToQuatern","title":"Convert a Transformation Matrix to a Quaternion Representation — matrixToQuatern","text":"Extracts rotation scaling components 3x3 (4x4) transformation matrix, normalizes , computes corresponding quaternion parameters sign factor (`qfac`) indicating whether determinant negative.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/matrixToQuatern.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a Transformation Matrix to a Quaternion Representation — matrixToQuatern","text":"","code":"matrixToQuatern(mat)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/matrixToQuatern.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a Transformation Matrix to a Quaternion Representation — matrixToQuatern","text":"mat numeric matrix least top-left 3x3 portion containing rotation/scaling. Often 4x4 affine transform, 3x3 top-left submatrix used practice.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/matrixToQuatern.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a Transformation Matrix to a Quaternion Representation — matrixToQuatern","text":"named list two elements: quaternion numeric vector length 3, \\((b, c, d)\\),       —together \\(\\) derived internally—represents rotation. qfac Either +1 -1, indicating whether       determinant rotation submatrix positive negative, respectively.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/matrixToQuatern.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert a Transformation Matrix to a Quaternion Representation — matrixToQuatern","text":"function first checks corrects zero-length axes upper-left corner matrix, normalizes column extract pure rotation. determinant rotation submatrix negative, qfac set -1, third column negated. Finally, quaternion parameters (\\(, b, c, d\\)) computed following standard NIfTI-1 conventions representing rotation 3D.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/matrixToQuatern.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Convert a Transformation Matrix to a Quaternion Representation — matrixToQuatern","text":"- Cox RW. *Analysis Functional NeuroImages* (AFNI) NIfTI-1 quaternion   conventions. https://afni.nimh.nih.gov","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ndim-AxisSet-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Get number of dimensions in axis set — ndim,AxisSet-method","title":"Get number of dimensions in axis set — ndim,AxisSet-method","text":"Get number dimensions axis set","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ndim-AxisSet-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get number of dimensions in axis set — ndim,AxisSet-method","text":"","code":"# S4 method for class 'AxisSet' ndim(x, ...)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ndim-AxisSet-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get number of dimensions in axis set — ndim,AxisSet-method","text":"x AxisSet object ... Additional arguments (used)","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ndim-AxisSet-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get number of dimensions in axis set — ndim,AxisSet-method","text":"integer representing number dimensions x.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ndim-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the number of dimensions of an object — ndim","title":"Extract the number of dimensions of an object — ndim","text":"Extract number dimensions object","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ndim-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the number of dimensions of an object — ndim","text":"","code":"ndim(x, ...)  # S4 method for class 'ClusteredNeuroVec' ndim(x)  # S4 method for class 'NeuroObj' ndim(x)  # S4 method for class 'NeuroSpace' ndim(x)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ndim-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the number of dimensions of an object — ndim","text":"x n-dimensional object ... additional arguments","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ndim-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the number of dimensions of an object — ndim","text":"integer representing number dimensions x.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ndim-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the number of dimensions of an object — ndim","text":"","code":"x = NeuroSpace(c(10,10,10), spacing=c(1,1,1)) ndim(x) == 3 #> [1] TRUE x = NeuroSpace(c(10,10,10,3), spacing=c(1,1,1)) ndim(x) == 4 #> [1] TRUE"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/neuro-downsample.html","id":null,"dir":"Reference","previous_headings":"","what":"Downsampling Methods for Neuroimaging Objects — neuro-downsample","title":"Downsampling Methods for Neuroimaging Objects — neuro-downsample","text":"Methods downsampling neuroimaging objects lower spatial resolution","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/neuro-ops.html","id":null,"dir":"Reference","previous_headings":"","what":"Arithmetic and Comparison Operations for Neuroimaging Objects — neuro-ops","title":"Arithmetic and Comparison Operations for Neuroimaging Objects — neuro-ops","text":"Methods performing arithmetic comparison operations neuroimaging objects","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/neuro-resample.html","id":null,"dir":"Reference","previous_headings":"","what":"Resampling Methods for Neuroimaging Objects — neuro-resample","title":"Resampling Methods for Neuroimaging Objects — neuro-resample","text":"Methods resampling neuroimaging objects different spaces dimensions","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/neuroim2-package.html","id":null,"dir":"Reference","previous_headings":"","what":"neuroim2: neuroimaging data structures for analysis — neuroim2-package","title":"neuroim2: neuroimaging data structures for analysis — neuroim2-package","text":"neuroim2 package provides tools functions analyzing manipulating neuroimaging data. supports various neuroimaging formats offers range analysis techniques.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/neuroim2-package.html","id":"main-functions","dir":"Reference","previous_headings":"","what":"Main functions","title":"neuroim2: neuroimaging data structures for analysis — neuroim2-package","text":"read_vol: Read neuroimaging volumes write_vol: Write neuroimaging volumes NeuroVol: Create NeuroVol objects NeuroVec: Create NeuroVec objects","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/neuroim2-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"neuroim2: neuroimaging data structures for analysis — neuroim2-package","text":"Maintainer: Bradley R Buchsbaum brad.buchsbaum@gmail.com [copyright holder]","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/num_clusters-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Number of Clusters — num_clusters","title":"Number of Clusters — num_clusters","text":"function returns number clusters ClusteredNeuroVol object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/num_clusters-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Number of Clusters — num_clusters","text":"","code":"num_clusters(x)  # S4 method for class 'ClusteredNeuroVec' num_clusters(x)  # S4 method for class 'ClusteredNeuroVol' num_clusters(x)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/num_clusters-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Number of Clusters — num_clusters","text":"x ClusteredNeuroVol object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/num_clusters-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Number of Clusters — num_clusters","text":"integer representing number clusters x. integer representing number clusters input object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/num_clusters-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Number of Clusters — num_clusters","text":"","code":"# Create a simple 3D volume and mask space <- NeuroSpace(c(16, 16, 16), spacing = c(1, 1, 1)) vol_data <- array(rnorm(16^3), dim = c(16, 16, 16)) mask_vol <- LogicalNeuroVol(vol_data > 0, space)  # Get coordinates of masked voxels for clustering mask_idx <- which(mask_vol) coords <- index_to_coord(mask_vol, mask_idx)  # Cluster the coordinates into 10 groups using k-means set.seed(123)  # for reproducibility kmeans_result <- kmeans(coords, centers = 10)  # Create a clustered volume clustered_vol <- ClusteredNeuroVol(mask_vol, kmeans_result$cluster)  # Get the number of clusters n_clusters <- num_clusters(clustered_vol) n_clusters == 10 #> [1] TRUE"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/numericOrMatrix-class.html","id":null,"dir":"Reference","previous_headings":"","what":"numericOrMatrix Union — numericOrMatrix-class","title":"numericOrMatrix Union — numericOrMatrix-class","text":"class union includes numeric vectors matrices.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/origin-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Image Origin — origin","title":"Extract Image Origin — origin","text":"Extract Image Origin","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/origin-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Image Origin — origin","text":"","code":"origin(x)  # S4 method for class 'NeuroSpace' origin(x)  # S4 method for class 'NeuroVol' origin(x)  # S4 method for class 'NeuroVec' origin(x)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/origin-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Image Origin — origin","text":"x object origin","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/origin-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Image Origin — origin","text":"numeric vector giving origin x.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/origin-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Image Origin — origin","text":"","code":"bspace <- NeuroSpace(c(10,10,10), c(2,2,2)) stopifnot(origin(bspace) == c(0,0,0))"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/partition-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Partition an image into a set of disjoint clusters — partition","title":"Partition an image into a set of disjoint clusters — partition","text":"function partitions image set disjoint clusters using k-means clustering.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/partition-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Partition an image into a set of disjoint clusters — partition","text":"","code":"partition(x, k, ...)  # S4 method for class 'LogicalNeuroVol,integer' partition(x, k)  # S4 method for class 'LogicalNeuroVol,numeric' partition(x, k)  # S4 method for class 'DenseNeuroVol,numeric' partition(x, k)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/partition-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Partition an image into a set of disjoint clusters — partition","text":"x image partition, represented 3D array. k number clusters form. ... additional arguments passed kmeans function.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/partition-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Partition an image into a set of disjoint clusters — partition","text":"3D array voxel assigned cluster.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/partition-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Partition an image into a set of disjoint clusters — partition","text":"","code":"# Load an example 3D image library(neuroim2) img <- read_vol(system.file(\"extdata\", \"global_mask_v4.nii\", package = \"neuroim2\"))  # Partition the image into 5 clusters using default options clusters <- partition(img, 5)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/patch_set-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a patch set from a NeuroVol object — patch_set,NeuroVol,numeric,missing-method","title":"Create a patch set from a NeuroVol object — patch_set,NeuroVol,numeric,missing-method","text":"function creates patch set NeuroVol object given specified dimensions function creates patch set NeuroVol object given specified dimensions mask.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/patch_set-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a patch set from a NeuroVol object — patch_set,NeuroVol,numeric,missing-method","text":"","code":"# S4 method for class 'NeuroVol,numeric,missing' patch_set(x, dims, mask, ...)  # S4 method for class 'NeuroVol,numeric,LogicalNeuroVol' patch_set(x, dims, mask, ...)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/patch_set-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a patch set from a NeuroVol object — patch_set,NeuroVol,numeric,missing-method","text":"x NeuroVol object dims dimensions patch mask mask defining valid patch centers ... additional args","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/patch_set-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a patch set from a NeuroVol object — patch_set,NeuroVol,numeric,missing-method","text":"deferred list patches. deferred list patches.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/patch_set.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a set of coordinate ","title":"Generate a set of coordinate ","text":"Generate set coordinate \"patches\" fixed size image object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/patch_set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a set of coordinate ","text":"","code":"patch_set(x, dims, mask, ...)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/patch_set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a set of coordinate ","text":"x object extract patches dims vector indicating dimensions patches mask mask indicating valid patch area ... additional args","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/patch_set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a set of coordinate ","text":"list coordinate patches, representing fixed-size region input object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/patch_set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a set of coordinate ","text":"","code":"# Create a simple 3D volume space <- NeuroSpace(c(10,10,10), spacing=c(1,1,1)) vol <- NeuroVol(array(rnorm(1000), c(10,10,10)), space)  # Create a mask with some active voxels mask <- LogicalNeuroVol(vol > 0, space)  # Extract 3x3x3 patches centered at each active voxel patches <- patch_set(vol, dims=c(3,3,3), mask=mask)  # Access the first patch patch1 <- patches[[1]] dim(patch1)  # Should be c(27) (flattened 3x3x3 patch) #> NULL"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/perm_mat-AxisSet2D-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Get permutation matrix from axis set — perm_mat,AxisSet2D-method","title":"Get permutation matrix from axis set — perm_mat,AxisSet2D-method","text":"Get permutation matrix axis set","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/perm_mat-AxisSet2D-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get permutation matrix from axis set — perm_mat,AxisSet2D-method","text":"","code":"# S4 method for class 'AxisSet2D' perm_mat(x, ...)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/perm_mat-AxisSet2D-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get permutation matrix from axis set — perm_mat,AxisSet2D-method","text":"x AxisSet2D object ... Additional arguments (used)","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/perm_mat-AxisSet2D-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get permutation matrix from axis set — perm_mat,AxisSet2D-method","text":"matrix representing axis directions","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/perm_mat-AxisSet3D-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Get permutation matrix from axis set — perm_mat,AxisSet3D-method","title":"Get permutation matrix from axis set — perm_mat,AxisSet3D-method","text":"Get permutation matrix axis set","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/perm_mat-AxisSet3D-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get permutation matrix from axis set — perm_mat,AxisSet3D-method","text":"","code":"# S4 method for class 'AxisSet3D' perm_mat(x, ...)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/perm_mat-AxisSet3D-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get permutation matrix from axis set — perm_mat,AxisSet3D-method","text":"x AxisSet3D object ... Additional arguments (used)","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/perm_mat-AxisSet3D-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get permutation matrix from axis set — perm_mat,AxisSet3D-method","text":"matrix representing axis directions","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/perm_mat-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract permutation matrix associated with an image — perm_mat","title":"Extract permutation matrix associated with an image — perm_mat","text":"permutation matrix defines native voxel coordinates can transformed standard (LPI) orientation.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/perm_mat-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract permutation matrix associated with an image — perm_mat","text":"","code":"perm_mat(x, ...)  # S4 method for class 'NeuroSpace' perm_mat(x, ...)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/perm_mat-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract permutation matrix associated with an image — perm_mat","text":"x NeuroSpace object ... Additional arguments (used)","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/perm_mat-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract permutation matrix associated with an image — perm_mat","text":"numeric N x N matrix representing permutation transform, N dimensionality image. numeric N x N matrix representing permutation transform, N dimensionality image.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/perm_mat-methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract permutation matrix associated with an image — perm_mat","text":"permutation matrix can used convert cardinal image orientations. example, image stored \"RPI\" (Right-Posterior-Inferior) format, coordinate space can converted LPI (Left-Posterior-Inferior) multiplying coordinate vector permutation matrix.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/perm_mat-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract permutation matrix associated with an image — perm_mat","text":"","code":"fname <- system.file(\"extdata\", \"global_mask_v4.nii\", package=\"neuroim2\") vol <- read_vol(fname) pmat <- perm_mat(space(vol))  vox <- c(12,12,8) pvox <- vox %*% perm_mat(space(vol))  stopifnot(all(pvox == c(-12,12,8)))"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/plot-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a NeuroSlice — plot,NeuroSlice-method","title":"Plot a NeuroSlice — plot,NeuroSlice-method","text":"Plot NeuroSlice plot NeuroVol","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/plot-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a NeuroSlice — plot,NeuroSlice-method","text":"","code":"# S4 method for class 'NeuroSlice' plot(   x,   cmap = gray(seq(0, 1, length.out = 255)),   irange = range(x, na.rm = TRUE),   legend = TRUE )  # S4 method for class 'NeuroVol' plot(   x,   cmap = gray(seq(0, 1, length.out = 255)),   zlevels = unique(round(seq(1, dim(x)[3], length.out = 6))),   irange = range(x, na.rm = TRUE),   thresh = c(0, 0),   alpha = 1,   bgvol = NULL,   bgcmap = gray(seq(0, 1, length.out = 255)),   legend = TRUE )"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/plot-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a NeuroSlice — plot,NeuroSlice-method","text":"x object display cmap color map consisting vector colors hex format (e.g. gray(n=255)) irange intensity range indicating low high values color scale. legend Logical indicating whether display color legend. Defaults TRUE. zlevels series slice indices display. thresh 2-element vector indicating lower upper transparency thresholds. alpha level alpha transparency bgvol background volume serves image underlay (currently ignored). bgcmap color map backround layer consisting vector colors hex format (e.g. gray(n=255))","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/plot-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a NeuroSlice — plot,NeuroSlice-method","text":"ggplot2 object","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/plot-methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot a NeuroSlice — plot,NeuroSlice-method","text":"plot method uses ggplot2 create raster visualization slice data. intensity values mapped colors using specified colormap range. `x` NeuroSlice object, plot method returns ggplot2 object containing raster visualization slice data.         plot can customized using standard ggplot2 functions.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/plot-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a NeuroSlice — plot,NeuroSlice-method","text":"","code":"# Create example slice slice_space <- NeuroSpace(c(100, 100)) slice_data <- matrix(rnorm(100*100), 100, 100) slice <- NeuroSlice(slice_data, slice_space) # \\donttest{ # Basic plot plot(slice)  # }   dat <- matrix(rnorm(100*100), 100, 100) slice <- NeuroSlice(dat, NeuroSpace(c(100,100))) # \\donttest{ plot(slice)  # }"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/plot_montage.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a montage of axial (or any-plane) slices using facetting — plot_montage","title":"Plot a montage of axial (or any-plane) slices using facetting — plot_montage","text":"avoids extra dependencies using single ggplot facets shared colorbar. Supply list slice objects volume + indices.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/plot_montage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a montage of axial (or any-plane) slices using facetting — plot_montage","text":"","code":"plot_montage(   x,   zlevels = NULL,   along = 3L,   cmap = \"grays\",   range = c(\"robust\", \"data\"),   probs = c(0.02, 0.98),   ncol = 6L,   downsample = 1L,   title = NULL,   subtitle = NULL,   caption = NULL )"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/plot_montage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a montage of axial (or any-plane) slices using facetting — plot_montage","text":"x Either 3D volume object accepted `slice()` list slices. zlevels Integer indices slices plot (`x` volume). along Axis along slice (1 = sagittal, 2 = coronal, 3 = axial). cmap Palette name vector (see [resolve_cmap()]). range \"robust\" (quantile-based) \"data\" (min/max). probs Quantiles `range=\"robust\"`. ncol Number columns facet layout. downsample Integer decimation speed. title, subtitle, caption Optional ggplot labels.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/plot_ortho.html","id":null,"dir":"Reference","previous_headings":"","what":"Orthogonal three-plane view with optional crosshairs — plot_ortho","title":"Orthogonal three-plane view with optional crosshairs — plot_ortho","text":"Creates axial, coronal, sagittal panels given coordinate harmonized aesthetics. Returns (invisibly) three ggplot objects printing single row using base grid (extra deps).","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/plot_ortho.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Orthogonal three-plane view with optional crosshairs — plot_ortho","text":"","code":"plot_ortho(   vol,   coord = NULL,   unit = c(\"index\", \"mm\"),   cmap = \"grays\",   range = c(\"robust\", \"data\"),   probs = c(0.02, 0.98),   crosshair = TRUE,   annotate = TRUE,   downsample = 1L )"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/plot_ortho.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Orthogonal three-plane view with optional crosshairs — plot_ortho","text":"vol 3D volume handled `slice()`. coord Length-3 coordinate target point. Interpreted voxel indices default; set `unit = \"mm\"` convert using `coord_to_grid()` available environment. unit \"index\" \"mm\". cmap Palette slices. range \"robust\" \"data\" intensity limits shared panels. probs Quantiles robust range. crosshair Logical; draw crosshair lines. annotate Logical; add orientation glyphs. downsample Integer decimation speed.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/plot_overlay.html","id":null,"dir":"Reference","previous_headings":"","what":"Composite an overlay map on a structural background — plot_overlay","title":"Composite an overlay map on a structural background — plot_overlay","text":"Works without extra packages colorizing layers rasters stacking grobs. Great statistical maps T1/T2 backgrounds.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/plot_overlay.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Composite an overlay map on a structural background — plot_overlay","text":"","code":"plot_overlay(   bgvol,   overlay,   zlevels = NULL,   along = 3L,   bg_cmap = \"grays\",   ov_cmap = \"inferno\",   bg_range = c(\"robust\", \"data\"),   ov_range = c(\"robust\", \"data\"),   probs = c(0.02, 0.98),   ov_thresh = 0,   ov_alpha = 0.7,   ncol = 3L,   title = NULL,   subtitle = NULL,   caption = NULL )"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/plot_overlay.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Composite an overlay map on a structural background — plot_overlay","text":"bgvol Background 3D volume. overlay Overlay 3D volume (dims bgvol). zlevels Slices plot (indices along z/3rd axis default). along Axis slicing (1 sagittal, 2 coronal, 3 axial). bg_cmap Background palette (e.g., \"grays\"). ov_cmap Overlay palette (e.g., \"inferno\"). bg_range, ov_range \"robust\" \"data\" background/overlay scaling. probs Quantiles robust scaling. ov_thresh Numeric threshold; values |v| < thresh become transparent. ov_alpha Global alpha overlay (0..1). ncol Number columns facet layout. title, subtitle, caption Optional labels.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/quaternToMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Quaternion Parameters to a Transformation Matrix — quaternToMatrix","title":"Convert Quaternion Parameters to a Transformation Matrix — quaternToMatrix","text":"Given quaternion (b, c, d), scalar offset (origin), voxel step sizes, qfac sign, reconstructs 4x4 affine matrix representing rotation, scaling, translation used NIfTI-1.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/quaternToMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Quaternion Parameters to a Transformation Matrix — quaternToMatrix","text":"","code":"quaternToMatrix(quat, origin, stepSize, qfac)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/quaternToMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Quaternion Parameters to a Transformation Matrix — quaternToMatrix","text":"quat numeric vector length 3 containing quaternion parameters \\((b, c, d)\\). scalar part \\(\\) computed internally. origin numeric vector length 3 specifying translation components (often real-space origin offset). stepSize numeric vector length 3 giving voxel dimensions along axis (e.g., (dx, dy, dz)). qfac Either +1 -1, indicating sign determinant check matrixToQuatern.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/quaternToMatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Quaternion Parameters to a Transformation Matrix — quaternToMatrix","text":"4x4 numeric affine transformation matrix. top-left 3x3 submatrix   encodes rotation scaling, 4th column encodes translation.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/quaternToMatrix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert Quaternion Parameters to a Transformation Matrix — quaternToMatrix","text":"function uses quaternion formalism common neuroimaging, adding offset (translation) 4th column, applying voxel sizes along axis. qfac -1, \\(z\\) scale negated. resulting 4x4 matrix typically used affine transform voxel--world coordinate mapping.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/random_searchlight.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a spherical random searchlight iterator — random_searchlight","title":"Create a spherical random searchlight iterator — random_searchlight","text":"function generates spherical random searchlight iterator analyzing local neighborhoods voxels within given radius brain mask.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/random_searchlight.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a spherical random searchlight iterator — random_searchlight","text":"","code":"random_searchlight(mask, radius)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/random_searchlight.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a spherical random searchlight iterator — random_searchlight","text":"mask NeuroVol object representing brain mask. radius numeric value specifying radius searchlight sphere voxel units.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/random_searchlight.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a spherical random searchlight iterator — random_searchlight","text":"list ROIVolWindow objects, representing   spherical searchlight region.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/random_searchlight.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a spherical random searchlight iterator — random_searchlight","text":"","code":"# Create a simple brain mask mask_data <- array(TRUE, c(10, 10, 10)) mask_data[1, 1, 1] <- FALSE mask <- LogicalNeuroVol(mask_data, NeuroSpace(c(10,10,10)))  # Generate random searchlight iterator with a radius of 2 voxels # \\donttest{ searchlights <- random_searchlight(mask, radius = 6) # }"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/read_columns-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a set of column vector from an input source (e.g. ColumnReader) — read_columns","title":"Read a set of column vector from an input source (e.g. ColumnReader) — read_columns","text":"Read set column vector input source (e.g. ColumnReader)","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/read_columns-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a set of column vector from an input source (e.g. ColumnReader) — read_columns","text":"","code":"read_columns(x, column_indices)  # S4 method for class 'ColumnReader,integer' read_columns(x, column_indices)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/read_columns-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a set of column vector from an input source (e.g. ColumnReader) — read_columns","text":"x input channel column_indices column indices","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/read_columns-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read a set of column vector from an input source (e.g. ColumnReader) — read_columns","text":"numeric matrix consisting requested column vectors.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/read_columns-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read a set of column vector from an input source (e.g. ColumnReader) — read_columns","text":"","code":"# Create a reader function that returns random data reader_func <- function(cols) {   matrix(rnorm(100 * length(cols)), 100, length(cols)) }  # Create a ColumnReader with 100 rows and 10 columns col_reader <- ColumnReader(nrow = 100L, ncol = 10L, reader = reader_func)  # Read columns 1, 3, and 5 cols <- read_columns(col_reader, c(1L, 3L, 5L)) dim(cols) == c(100, 3) #> [1] TRUE TRUE"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/read_elements-BinaryReader-numeric-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Read Elements from Binary Reader — read_elements,BinaryReader,numeric-method","title":"Read Elements from Binary Reader — read_elements,BinaryReader,numeric-method","text":"Read specified number elements BinaryReader object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/read_elements-BinaryReader-numeric-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read Elements from Binary Reader — read_elements,BinaryReader,numeric-method","text":"","code":"# S4 method for class 'BinaryReader,numeric' read_elements(x, num_elements)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/read_elements-BinaryReader-numeric-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read Elements from Binary Reader — read_elements,BinaryReader,numeric-method","text":"x Object class BinaryReader num_elements Integer specifying number elements read","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/read_elements-BinaryReader-numeric-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read Elements from Binary Reader — read_elements,BinaryReader,numeric-method","text":"Numeric vector read elements","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/read_elements-BinaryReader-numeric-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read Elements from Binary Reader — read_elements,BinaryReader,numeric-method","text":"","code":"# \\donttest{ # Create a temporary binary file with some test data tmp <- tempfile() con <- file(tmp, \"wb\") test_data <- rnorm(100) writeBin(test_data, con, size = 8) close(con)  # Create reader and read the data reader <- BinaryReader(tmp, byte_offset = 0L,                       data_type = \"DOUBLE\", bytes_per_element = 8L) data <- read_elements(reader, 100) #> Warning: incomplete string at end of file has been discarded close(reader)  # Clean up unlink(tmp) # }"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/read_elements-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a sequence of elements from an input source — read_elements","title":"Read a sequence of elements from an input source — read_elements","text":"Read sequence elements input source","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/read_elements-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a sequence of elements from an input source — read_elements","text":"","code":"read_elements(x, num_elements)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/read_elements-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a sequence of elements from an input source — read_elements","text":"x input channel num_elements number elements read","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/read_elements-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read a sequence of elements from an input source — read_elements","text":"vector containing elements read x.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/read_elements-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read a sequence of elements from an input source — read_elements","text":"","code":"# Create a temporary binary file with test data tmp <- tempfile() con <- file(tmp, \"wb\") test_data <- rnorm(100) writeBin(test_data, con, size = 8) close(con)  # Create a BinaryReader and read the data reader <- BinaryReader(tmp, byte_offset = 0L,                       data_type = \"double\", bytes_per_element = 8L) data <- read_elements(reader, 100) close(reader)  # Clean up unlink(tmp)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/read_header.html","id":null,"dir":"Reference","previous_headings":"","what":"read header information of an image file — read_header","title":"read header information of an image file — read_header","text":"read header information image file","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/read_header.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"read header information of an image file — read_header","text":"","code":"read_header(file_name)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/read_header.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"read header information of an image file — read_header","text":"file_name name file read","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/read_header.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"read header information of an image file — read_header","text":"instance class FileMetaInfo","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/read_header.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"read header information of an image file — read_header","text":"","code":"hdr <- read_header(system.file(\"extdata\", \"global_mask_v4.nii\", package = \"neuroim2\")) dim(hdr)                  # image dimensions #> [1] 64 64 25  4 hdr@header$pixdim[5]      # TR in seconds #> [1] 0"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/read_meta_info-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic function to read image meta info given a file — read_meta_info","title":"Generic function to read image meta info given a file — read_meta_info","text":"Reads meta information image files based format (NIFTI AFNI).","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/read_meta_info-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic function to read image meta info given a file — read_meta_info","text":"","code":"read_meta_info(x, file_name)  # S4 method for class 'NIFTIFormat' read_meta_info(x, file_name)  # S4 method for class 'AFNIFormat' read_meta_info(x, file_name)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/read_meta_info-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic function to read image meta info given a file — read_meta_info","text":"x FileFormat object (either NIFTIFormat AFNIFormat) file_name character string specifying file name read meta information ","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/read_meta_info-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic function to read image meta info given a file — read_meta_info","text":"list containing meta information read file. object class NIFTIMetaInfo AFNIMetaInfo,   depending input format","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/read_meta_info-methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generic function to read image meta info given a file — read_meta_info","text":"methods use format-specific functions read header information create appropriate meta information object. `.read_meta_info` helper function used internally streamline process formats.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/read_meta_info-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic function to read image meta info given a file — read_meta_info","text":"","code":"# Create a NIFTI format descriptor fmt <- new(\"NIFTIFormat\",            file_format = \"NIFTI\",            header_encoding = \"raw\",            header_extension = \"nii\",            data_encoding = \"raw\",            data_extension = \"nii\")  # Read metadata from a NIFTI file # \\donttest{ fname <- system.file(\"extdata\", \"global_mask_v4.nii\", package=\"neuroim2\") meta <- read_meta_info(fmt, fname)  # Access metadata properties dim(meta)          # Image dimensions #> [1] 64 64 25  4 trans(meta)        # Transformation matrix #>      [,1] [,2] [,3]   [,4] #> [1,] -3.5  0.0  0.0  112.0 #> [2,]  0.0  3.5  0.0 -108.0 #> [3,]  0.0  0.0  3.7  -46.2 #> [4,]  0.0  0.0  0.0    1.0 # }"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/read_vec.html","id":null,"dir":"Reference","previous_headings":"","what":"read_vec — read_vec","title":"read_vec — read_vec","text":"Loads neuroimaging volume one files, support various input formats memory management strategies.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/read_vec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"read_vec — read_vec","text":"","code":"read_vec(   file_name,   indices = NULL,   mask = NULL,   mode = c(\"normal\", \"mmap\", \"bigvec\", \"filebacked\") )"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/read_vec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"read_vec — read_vec","text":"file_name name(s) file(s) load. multiple files specified, loaded concatenated along time dimension. indices indices sub-volumes load (e.g. file 4-dimensional). supported \"normal\" mode. mask logical mask defining spatial elements load. Required \"bigvec\" mode optional modes. mode IO mode one : * \"normal\": Standard -memory loading * \"mmap\": Memory-mapped access (memory efficient) * \"bigvec\": Optimized large datasets masking * \"filebacked\": File-backed storage -demand loading","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/read_vec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"read_vec — read_vec","text":"NeuroVec object representing loaded volume(s).","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/read_vec.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"read_vec — read_vec","text":"function supports multiple file formats: * .nii: Standard NIfTI format * .nii.gz: Compressed NIfTI (supported mmap mode) Memory management modes: * \"normal\": Loads entire dataset memory. Best smaller datasets memory   constraint. * \"mmap\": Memory-maps file, providing efficient access large files without   loading entirely memory. available compressed files. * \"bigvec\": Optimized large datasets subset voxels interest.   Requires mask specify voxels load. * \"filebacked\": Similar mmap flexible caching strategies.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/read_vec.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"read_vec — read_vec","text":"* Memory-mapping (.mmap mode) supported gzipped files * .lv.h5 .h5 files, indices mask parameters ignored * bigvec mode requires mask specified * loading multiple files, must compatible dimensions","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/read_vec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"read_vec — read_vec","text":"","code":"# Load a single NIfTI file img <- read_vec(system.file(\"extdata\", \"global_mask_v4.nii\", package=\"neuroim2\"))   # Memory-mapped loading for large files big_img <- read_vec(system.file(\"extdata\", \"global_mask_v4.nii\", package=\"neuroim2\"), mode=\"mmap\") #> loading /home/runner/work/_temp/Library/neuroim2/extdata/global_mask_v4.nii as mmaped file   # Load masked data for memory efficiency mask <- as.logical(big_img[[1]]) masked_data <- read_vec(system.file(\"extdata\", \"global_mask_v4.nii\", package=\"neuroim2\"),                mask=mask, mode=\"bigvec\") #> loading /home/runner/work/_temp/Library/neuroim2/extdata/global_mask_v4.nii as bigvec"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/read_vol.html","id":null,"dir":"Reference","previous_headings":"","what":"Load an image volume from a file — read_vol","title":"Load an image volume from a file — read_vol","text":"Load image volume file","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/read_vol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load an image volume from a file — read_vol","text":"","code":"read_vol(file_name, index = 1)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/read_vol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load an image volume from a file — read_vol","text":"file_name name file load index index volume (e.g. file 4-dimensional)","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/read_vol.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load an image volume from a file — read_vol","text":"instance class DenseNeuroVol","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/read_vol.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load an image volume from a file — read_vol","text":"","code":"fname <- system.file(\"extdata\", \"global_mask_v4.nii\", package=\"neuroim2\") x <- read_vol(fname) print(dim(x)) #> [1] 64 64 25 space(x) #>  #>  NeuroSpace Object  #>  #>  >> Dimensions  #>   Grid Size: 64 x 64 x 25 #>   Memory:   5.9 KB #>  #>  >> Spatial Properties  #>   Spacing:   3.50 x 3.50 x 3.70 mm #>   Origin:    112.00 x -108.00 x -46.20 mm #>  #>  >> Anatomical Orientation  #>   X: Right-to-Left  |  Y: Posterior-to-Anterior  |  Z: Inferior-to-Superior  #>  #>  >> World Transformation  #>   Forward (Voxel to World):  #>     -3.500  0.000  -0.000   112.000 #>  0.000  3.500  -0.000  -108.000 #>  0.000  0.000   3.700   -46.200 #>  0.000  0.000   0.000     1.000  #>   Inverse (World to Voxel):  #>     -0.286  -0.000  -0.000  32.000 #>  0.000   0.286   0.000  30.857 #>  0.000   0.000   0.270  12.486 #>  0.000   0.000   0.000   1.000  #>  #>  >> Bounding Box  #>   Min Corner: -108.5, -108.0, -46.2 mm #>   Max Corner: 112.0, 112.5, 42.6 mm #>  #> =================================================="},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/read_vol_list.html","id":null,"dir":"Reference","previous_headings":"","what":"read_vol_list — read_vol_list","title":"read_vol_list — read_vol_list","text":"function loads list image volumes returns NeuroVec object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/read_vol_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"read_vol_list — read_vol_list","text":"","code":"read_vol_list(file_names, mask = NULL)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/read_vol_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"read_vol_list — read_vol_list","text":"file_names list file names load. mask optional mask defining subset voxels load.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/read_vol_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"read_vol_list — read_vol_list","text":"instance NeuroVec class.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/reorient-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Remap the grid-to-world coordinates mapping of an image. — reorient","title":"Remap the grid-to-world coordinates mapping of an image. — reorient","text":"Remap grid--world coordinates mapping image.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/reorient-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remap the grid-to-world coordinates mapping of an image. — reorient","text":"","code":"reorient(x, orient)  # S4 method for class 'NeuroSpace,character' reorient(x, orient)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/reorient-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remap the grid-to-world coordinates mapping of an image. — reorient","text":"x object orient orientation code indicating \"remapped\" axes.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/reorient-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remap the grid-to-world coordinates mapping of an image. — reorient","text":"reoriented version x.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/reorient-methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Remap the grid-to-world coordinates mapping of an image. — reorient","text":"x NeuroSpace object, orient argument character vector length 3 specifying desired anatomical orientation using single-letter codes. letter represents anatomical direction: First position: \"R\" (Right) \"L\" (Left) Second position: \"\" (Anterior) \"P\" (Posterior) Third position: \"S\" (Superior) \"\" (Inferior) example, c(\"R\", \"\", \"S\") specifies Right-Anterior-Superior orientation, c(\"L\", \"P\", \"\") specifies Left-Posterior-Inferior orientation. orientation codes determine voxel grid coordinates map real-world anatomical space.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/reorient-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remap the grid-to-world coordinates mapping of an image. — reorient","text":"","code":"# Create a NeuroSpace object in LPI (Left-Posterior-Inferior) orientation space <- NeuroSpace(c(64, 64, 40), c(2, 2, 2))  # Reorient to RAS (Right-Anterior-Superior) orientation # Use individual axis codes: \"R\" for Right, \"A\" for Anterior, \"S\" for Superior space_ras <- reorient(space, c(\"R\", \"A\", \"S\"))  # The transformation matrix will be updated to reflect the new orientation # Original and reoriented spaces will have different coordinate mappings coords <- c(32, 32, 20) orig_world <- grid_to_coord(space, coords) new_world <- grid_to_coord(space_ras, coords)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/resample-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Resample an Image to Match the Space of Another Image — resample","title":"Resample an Image to Match the Space of Another Image — resample","text":"function resamples source image match spatial properties (dimensions, resolution, orientation) target image. method resamples NeuroVol object (source) match dimensions orientation NeuroSpace object (target).","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/resample-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Resample an Image to Match the Space of Another Image — resample","text":"","code":"resample(source, target, ...)  # S4 method for class 'NeuroVol,NeuroVol' resample(source, target, interpolation = 3L)  # S4 method for class 'NeuroVol,NeuroSpace' resample(source, target, interpolation = 3L)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/resample-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Resample an Image to Match the Space of Another Image — resample","text":"source NeuroVol object representing source volume resampled. target NeuroSpace object representing target space match dimensions orientation source volume. ... Additional arguments passed resampling function, interpolation method, boundary handling, resampling options. interpolation single integer specifying type interpolation applied final resampled image. May 0 (nearest neighbor), 1 (trilinear), 3 (cubic spline). values valid.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/resample-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Resample an Image to Match the Space of Another Image — resample","text":"object representing resampled source image, spatial properties target.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/resample-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Resample an Image to Match the Space of Another Image — resample","text":"","code":"img <- read_vol(system.file(\"extdata\", \"global_mask_v4.nii\", package = \"neuroim2\")) rspace <- space(img)   newtrans4X3 <- trans(img)[1:4, 1:3] newtrans4X3 <- newtrans4X3 * c(.5,.5,.5,1) newtrans <- cbind(newtrans4X3, c(space(img)@origin,1))  rspace <- NeuroSpace(rspace@dim*2, rspace@spacing/2, origin=rspace@origin, trans=trans(img)) # \\donttest{ rvol <- resample(img, rspace) # }   # Create source and target volumes src_vol <- read_vol(system.file(\"extdata\", \"global_mask_v4.nii\", package=\"neuroim2\")) targ_vol <- read_vol(system.file(\"extdata\", \"global_mask_v4.nii\", package=\"neuroim2\"))  # Resample source to match target resampled <- resample(src_vol, targ_vol, interpolation=1)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/resample_to.html","id":null,"dir":"Reference","previous_headings":"","what":"Resample an image with readable method names — resample_to","title":"Resample an image with readable method names — resample_to","text":"Convenience wrapper around resample maps human-friendly method names integer interpolation argument (eventually) switches engines.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/resample_to.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Resample an image with readable method names — resample_to","text":"","code":"resample_to(source, target, method = c(\"nearest\",\"linear\",\"cubic\"),             engine = c(\"internal\"), ...)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/resample_to.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Resample an image with readable method names — resample_to","text":"source NeuroVol target NeuroVol NeuroSpace method Interpolation method: \"nearest\", \"linear\", \"cubic\". engine Resampling engine. Currently \"internal\" supported. ... Reserved future options","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/resample_to.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Resample an image with readable method names — resample_to","text":"NeuroVol target space.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/resample_to.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Resample an image with readable method names — resample_to","text":"","code":"img <- read_vol(system.file(\"extdata\",\"global_mask_v4.nii\", package=\"neuroim2\")) sp  <- space(img); sp2 <- NeuroSpace(sp@dim*2, sp@spacing/2, origin=sp@origin, trans=trans(img)) r1  <- resample_to(img, sp2, method = \"linear\")"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/resolve_cmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Neuroimaging color palettes and helpers — resolve_cmap","title":"Neuroimaging color palettes and helpers — resolve_cmap","text":"Lightweight, perceptually-uniform color tools safe fallbacks.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/resolve_cmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Neuroimaging color palettes and helpers — resolve_cmap","text":"","code":"resolve_cmap(name = \"grays\", n = 256)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/resolve_cmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Neuroimaging color palettes and helpers — resolve_cmap","text":"name Palette name (e.g., \"grays\", \"viridis\", \"inferno\", \"magma\", \"plasma\", \"turbo\", \"cividis\"). Case-insensitive. pass vector colors, returned unchanged. n Number colors generate.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/resolve_cmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Neuroimaging color palettes and helpers — resolve_cmap","text":"character vector hex colors.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/scale.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic Scale Method — scale","title":"Generic Scale Method — scale","text":"Scales object (typically) subtracting mean dividing standard deviation.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/scale.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic Scale Method — scale","text":"","code":"scale(x, ...)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/scale.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic Scale Method — scale","text":"x object scaled. ... Additional arguments scaling methods.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/scale.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic Scale Method — scale","text":"object class x, scaled specified method.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/scale_fill_neuro.html","id":null,"dir":"Reference","previous_headings":"","what":"A ggplot2 fill scale with neuroimaging-friendly defaults — scale_fill_neuro","title":"A ggplot2 fill scale with neuroimaging-friendly defaults — scale_fill_neuro","text":"ggplot2 fill scale neuroimaging-friendly defaults","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/scale_fill_neuro.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A ggplot2 fill scale with neuroimaging-friendly defaults — scale_fill_neuro","text":"","code":"scale_fill_neuro(   cmap = \"grays\",   range = c(\"robust\", \"data\"),   probs = c(0.02, 0.98),   limits = NULL,   na.value = \"transparent\",   guide = \"colorbar\" )"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/scale_fill_neuro.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A ggplot2 fill scale with neuroimaging-friendly defaults — scale_fill_neuro","text":"cmap Palette name vector colors. See [resolve_cmap()]. range Either \"robust\" (quantiles) \"data\" (min/max) determine default scale limits `limits` provided. probs Two-length numeric vector quantiles `range=\"robust\"`. limits Optional numeric limits (min, max). Overrides `range`. na.value Color NA. guide Legend guide (default \"colorbar\").","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/scale_fill_neuro.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A ggplot2 fill scale with neuroimaging-friendly defaults — scale_fill_neuro","text":"ggplot2 scale object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/scale_series-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic functions to scale (center and/or normalize by standard deviation) each series of a 4D image That is, if the 4th dimension is 'time' each series is a 1D time series. — scale_series","title":"Generic functions to scale (center and/or normalize by standard deviation) each series of a 4D image That is, if the 4th dimension is 'time' each series is a 1D time series. — scale_series","text":"Generic functions scale (center /normalize standard deviation) series 4D image , 4th dimension 'time' series 1D time series.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/scale_series-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic functions to scale (center and/or normalize by standard deviation) each series of a 4D image That is, if the 4th dimension is 'time' each series is a 1D time series. — scale_series","text":"","code":"scale_series(x, center, scale)  # S4 method for class 'NeuroVec,logical,missing' scale_series(x, center, scale)  # S4 method for class 'NeuroVec,logical,logical' scale_series(x, center, scale)  # S4 method for class 'NeuroVec,missing,logical' scale_series(x, center, scale)  # S4 method for class 'NeuroVec,missing,missing' scale_series(x, center, scale)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/scale_series-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic functions to scale (center and/or normalize by standard deviation) each series of a 4D image That is, if the 4th dimension is 'time' each series is a 1D time series. — scale_series","text":"x four dimensional image center logical value indicating whether series centered scale logical value indicating whether series divided standard deviation","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/scale_series-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic functions to scale (center and/or normalize by standard deviation) each series of a 4D image That is, if the 4th dimension is 'time' each series is a 1D time series. — scale_series","text":"object class x, time series centered /scaled.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/scale_series-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic functions to scale (center and/or normalize by standard deviation) each series of a 4D image That is, if the 4th dimension is 'time' each series is a 1D time series. — scale_series","text":"","code":"bvec <- NeuroVec(array(rnorm(24*24*24*24), c(24,24,24,24)), NeuroSpace(c(24,24,24,24), c(1,1,1))) res <- scale_series(bvec, TRUE, TRUE)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/searchlight-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Searchlight Analysis Methods — searchlight-methods","title":"Searchlight Analysis Methods — searchlight-methods","text":"Methods performing searchlight analyses neuroimaging data","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/searchlight.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an exhaustive searchlight iterator — searchlight","title":"Create an exhaustive searchlight iterator — searchlight","text":"function generates exhaustive searchlight iterator returns either voxel coordinates ROIVolWindow objects searchlight sphere within provided mask. iterator visits every non-zero voxel mask potential center voxel.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/searchlight.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an exhaustive searchlight iterator — searchlight","text":"","code":"searchlight(mask, radius, eager = FALSE, nonzero = FALSE, cores = 0)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/searchlight.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an exhaustive searchlight iterator — searchlight","text":"mask NeuroVol object representing brain mask. radius numeric value specifying radius (mm) spherical searchlight. eager logical value specifying whether eagerly compute searchlight ROIs. Default FALSE, uses lazy evaluation. nonzero logical value indicating whether include coordinates nonzero values supplied mask. Default FALSE. cores integer specifying number cores use parallel computation. Default 0, uses single core.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/searchlight.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an exhaustive searchlight iterator — searchlight","text":"deferred_list object containing either matrices integer-valued   voxel coordinates ROIVolWindow objects, representing   searchlight region.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/searchlight.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an exhaustive searchlight iterator — searchlight","text":"","code":"# Load an example brain mask mask <- read_vol(system.file(\"extdata\", \"global_mask_v4.nii\", package=\"neuroim2\"))  # Generate an exhaustive searchlight iterator with a radius of 6 mm  searchlights <- searchlight(mask, radius = 6, eager = FALSE)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/searchlight_coords.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an exhaustive searchlight iterator for voxel coordinates using spherical_roi — searchlight_coords","title":"Create an exhaustive searchlight iterator for voxel coordinates using spherical_roi — searchlight_coords","text":"function generates exhaustive searchlight iterator returns voxel coordinates searchlight sphere within provided mask, using `spherical_roi` neighborhood computation. iterator visits every non-zero voxel mask potential center voxel.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/searchlight_coords.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an exhaustive searchlight iterator for voxel coordinates using spherical_roi — searchlight_coords","text":"","code":"searchlight_coords(mask, radius, nonzero = FALSE, cores = 0)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/searchlight_coords.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an exhaustive searchlight iterator for voxel coordinates using spherical_roi — searchlight_coords","text":"mask NeuroVol object representing brain mask. radius numeric value specifying radius (mm) spherical searchlight. nonzero logical value indicating whether include coordinates nonzero values supplied mask. Default FALSE. cores integer specifying number cores use parallel computation. Default 0, uses single core.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/searchlight_coords.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an exhaustive searchlight iterator for voxel coordinates using spherical_roi — searchlight_coords","text":"deferred_list object containing matrices integer-valued   voxel coordinates, representing searchlight region.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/searchlight_coords.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an exhaustive searchlight iterator for voxel coordinates using spherical_roi — searchlight_coords","text":"","code":"# Load an example brain mask mask <- read_vol(system.file(\"extdata\", \"global_mask_v4.nii\", package=\"neuroim2\"))  # Generate an exhaustive searchlight iterator with a radius of 6 mm  searchlights <- searchlight_coords(mask, radius = 6)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/series-NeuroHyperVec-ANY-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Series method for NeuroHyperVec — series,NeuroHyperVec,ANY-method","title":"Series method for NeuroHyperVec — series,NeuroHyperVec,ANY-method","text":"Series method NeuroHyperVec","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/series-NeuroHyperVec-ANY-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Series method for NeuroHyperVec — series,NeuroHyperVec,ANY-method","text":"","code":"# S4 method for class 'NeuroHyperVec,ANY' series(x, i, j, k, ...)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/series-NeuroHyperVec-ANY-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Series method for NeuroHyperVec — series,NeuroHyperVec,ANY-method","text":"x NeuroHyperVec object first index j second index k third index ... Additional arguments (used)","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/series-NeuroHyperVec-ANY-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Series method for NeuroHyperVec — series,NeuroHyperVec,ANY-method","text":"2D array dimensions [features x trials]","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/series-NeuroHyperVec-ANY-method.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Series method for NeuroHyperVec — series,NeuroHyperVec,ANY-method","text":"x NeuroHyperVec object, series method returns 2D array dimensions [features x trials]","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/series-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract one or more series from object — series","title":"Extract one or more series from object — series","text":"function extracts time series data specific voxel coordinates 4D neuroimaging object. supports multiple ways specifying coordinates: Linear indices (1D) Grid coordinates (3D matrix) Individual x,y,z coordinates","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/series-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract one or more series from object — series","text":"","code":"series(x, i, ...)  # S4 method for class 'ClusteredNeuroVec,numeric' series(x, i, j, k, ...)  # S4 method for class 'NeuroVec,matrix' series(x, i)  # S4 method for class 'NeuroVec,matrix' series_roi(x, i)  # S4 method for class 'NeuroVec,ROICoords' series(x, i)  # S4 method for class 'NeuroVec,ROICoords' series_roi(x, i)  # S4 method for class 'NeuroVec,LogicalNeuroVol' series(x, i)  # S4 method for class 'NeuroVec,NeuroVol' series(x, i)  # S4 method for class 'NeuroVec,LogicalNeuroVol' series_roi(x, i)  # S4 method for class 'NeuroVec,integer' series(x, i, j, k, drop = TRUE)  # S4 method for class 'DenseNeuroVec,integer' series(x, i, j, k, drop = TRUE)  # S4 method for class 'NeuroVec,numeric' series(x, i, j, k, drop = TRUE)  # S4 method for class 'NeuroVec,numeric' series_roi(x, i, j, k)  # S4 method for class 'NeuroVec,numeric' series_roi(x, i, j, k)  # S4 method for class 'NeuroVec,matrix' series_roi(x, i)  # S4 method for class 'NeuroVec,LogicalNeuroVol' series_roi(x, i)  # S4 method for class 'NeuroVecSeq,integer' series(x, i, j, k, drop = TRUE)  # S4 method for class 'NeuroVecSeq,numeric' series(x, i, j, k, drop = TRUE)  # S4 method for class 'NeuroVecSeq,matrix' series(x, i)  # S4 method for class 'NeuroVecSeq,matrix' series_roi(x, i)  # S4 method for class 'AbstractSparseNeuroVec,ROICoords' series(x, i)  # S4 method for class 'AbstractSparseNeuroVec,matrix' series(x, i)  # S4 method for class 'AbstractSparseNeuroVec,numeric' series(x, i, j, k)  # S4 method for class 'AbstractSparseNeuroVec,integer' series(x, i, j, k, drop = TRUE)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/series-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract one or more series from object — series","text":"x NeuroVecSeq object matrix ROI coordinates (n x 3) ... additional arguments j second dimension index k third dimension index drop whether drop dimension length 1","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/series-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract one or more series from object — series","text":"list array containing extracted series. matrix column represents voxel's time series ROIVec object containing time series specified ROI","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/series-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract one or more series from object — series","text":"","code":"# Create a simple 4D neuroimaging vector (10x10x10 volume with 20 timepoints) space <- NeuroSpace(c(10,10,10,20), c(1,1,1)) vec <- NeuroVec(array(rnorm(10*10*10*20), c(10,10,10,20)), space)  # Extract time series using linear indices ts1 <- series(vec, 1:10)  # Get time series for first 10 voxels  # Extract time series using 3D coordinates coords <- matrix(c(1,1,1, 2,2,2, 3,3,3), ncol=3, byrow=TRUE) ts2 <- series(vec, coords)  # Get time series for 3 specific voxel locations  # Extract single time series using x,y,z coordinates ts3 <- series(vec, 5, 5, 5)  # Get time series from middle voxel"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/series_roi.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract time series from specific voxel coordinates and return as ROI object — series_roi","title":"Extract time series from specific voxel coordinates and return as ROI object — series_roi","text":"Extracts time series data NeuroVec object specified voxel coordinates returns ROI object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/series_roi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract time series from specific voxel coordinates and return as ROI object — series_roi","text":"","code":"series_roi(x, i, ...)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/series_roi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract time series from specific voxel coordinates and return as ROI object — series_roi","text":"x NeuroVec object Numeric index first dimension ... Additional arguments","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/series_roi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract time series from specific voxel coordinates and return as ROI object — series_roi","text":"ROIVec object containing time series data specified coordinates.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/series_roi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract time series from specific voxel coordinates and return as ROI object — series_roi","text":"","code":"# Create a simple 4D neuroimaging vector space <- NeuroSpace(c(10,10,10,20), c(1,1,1)) vec <- NeuroVec(array(rnorm(10*10*10*20), c(10,10,10,20)), space)  # Extract time series for first 100 voxels as ROI roi1 <- series_roi(vec, 1:100)  # Extract time series using 3D coordinates coords <- matrix(c(1,1,1, 2,2,2, 3,3,3), ncol=3, byrow=TRUE) roi2 <- series_roi(vec, coords)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/show-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Show method for NamedAxis objects — show,NamedAxis-method","title":"Show method for NamedAxis objects — show,NamedAxis-method","text":"Show method NamedAxis objects","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/show-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show method for NamedAxis objects — show,NamedAxis-method","text":"","code":"# S4 method for class 'NamedAxis' show(object)  # S4 method for class 'AxisSet1D' show(object)  # S4 method for class 'AxisSet2D' show(object)  # S4 method for class 'AxisSet3D' show(object)  # S4 method for class 'AxisSet4D' show(object)  # S4 method for class 'ClusteredNeuroVol' show(object)  # S4 method for class 'IndexLookupVol' show(object)  # S4 method for class 'MappedNeuroVec' show(object)  # S4 method for class 'FileMetaInfo' show(object)  # S4 method for class 'NeuroHyperVec' show(object)  # S4 method for class 'NeuroSlice' show(object)  # S4 method for class 'NeuroSpace' show(object)  # S4 method for class 'NeuroVecSource' show(object)  # S4 method for class 'NeuroVec' show(object)  # S4 method for class 'DenseNeuroVec' show(object)  # S4 method for class 'NeuroVecSeq' show(object)  # S4 method for class 'NeuroVecSeq' show(object)  # S4 method for class 'NeuroVol' show(object)  # S4 method for class 'SparseNeuroVol' show(object)  # S4 method for class 'Kernel' show(object)  # S4 method for class 'ROIVol' show(object)  # S4 method for class 'ROICoords' show(object)  # S4 method for class 'ROIVol' show(object)  # S4 method for class 'ROIVec' show(object)  # S4 method for class 'SparseNeuroVec' show(object)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/show-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show method for NamedAxis objects — show,NamedAxis-method","text":"object NamedAxis object","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/show-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show method for NamedAxis objects — show,NamedAxis-method","text":"Invisibly returns NULL, called side effect displaying object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/simulate_fmri.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate fMRI Data — simulate_fmri","title":"Simulate fMRI Data — simulate_fmri","text":"Generates synthetic 4D fMRI data realistic spatiotemporal properties including temporal autocorrelation, spatial smoothness, heteroscedasticity, optional global signal fluctuations latent components.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/simulate_fmri.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate fMRI Data — simulate_fmri","text":"","code":"simulate_fmri(   mask,   n_time,   TR = 2,   spatial_fwhm = 6,   ar_mean = 0.45,   ar_sd = 0.08,   noise_sd = 1,   hetero_fwhm = 20,   hetero_strength = 0.6,   global_amp = 0.2,   global_rho = 0.85,   n_factors = 4,   factor_fwhm = 12,   factor_rho = 0.8,   seed = NULL,   return_centered = TRUE )"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/simulate_fmri.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate fMRI Data — simulate_fmri","text":"mask NeuroVol object defining brain mask region. Can binary continuous (non-zero values define mask). n_time Integer specifying number time points simulate. TR Numeric value repetition time seconds (default = 2.0). Currently used metadata. spatial_fwhm Numeric value specifying spatial smoothness mm (full width half maximum) applied timepoint (default = 6). ar_mean Numeric value mean AR(1) coefficient distribution across voxels (default = 0.45). ar_sd Numeric value standard deviation AR(1) coefficient distribution (default = 0.08). noise_sd Numeric value baseline noise standard deviation (default = 1.0). hetero_fwhm Numeric value spatial scale (FWHM mm) heteroscedasticity field (default = 20). hetero_strength Numeric value controlling strength spatial heteroscedasticity log scale (default = 0.6). global_amp Numeric value amplitude global signal fluctuations fraction median noise (default = 0.2). Set 0 disable. global_rho Numeric value AR(1) coefficient global signal (default = 0.85). n_factors Integer specifying number latent spatial components (default = 4). Set 0 disable. factor_fwhm Numeric value spatial smoothness (FWHM mm) latent component maps (default = 12). factor_rho Numeric value AR(1) coefficient latent component time courses (default = 0.8). seed Integer seed random number generation (default = NULL seed). return_centered Logical indicating whether center voxel's time series mean zero (default = TRUE).","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/simulate_fmri.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate fMRI Data — simulate_fmri","text":"NeuroVec object containing simulated 4D fMRI data.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/simulate_fmri.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate fMRI Data — simulate_fmri","text":"simulation combines several realistic features: Voxel-wise AR(1) temporal autocorrelation spatial variation Spatial smoothing applied innovations realistic spatial correlation Heteroscedastic noise smooth spatial modulation Optional low-frequency global signal fluctuations Optional latent spatial components resembling resting-state networks spatial smoothing uses package's optimized gaussian_blur function efficiency.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/simulate_fmri.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Simulate fMRI Data — simulate_fmri","text":"Welvaert, M., & Rosseel, Y. (2013). definition signal--noise ratio contrast--noise ratio fMRI data. PloS one, 8(11), e77089.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/simulate_fmri.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate fMRI Data — simulate_fmri","text":"","code":"# Create a simple spherical mask dims <- c(32, 32, 20) mask_array <- array(FALSE, dims) center <- dims / 2 for (i in 1:dims[1]) {   for (j in 1:dims[2]) {     for (k in 1:dims[3]) {       if (sum(((c(i,j,k) - center) / (dims/3))^2) <= 1) {         mask_array[i,j,k] <- TRUE       }     }   } }  mask <- NeuroVol(mask_array, NeuroSpace(dims, c(3,3,3)))  # Simulate 100 time points sim_data <- simulate_fmri(mask, n_time = 100, seed = 42)  # Check dimensions dim(sim_data)  # Should be c(32, 32, 20, 100) #> [1]  32  32  20 100"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/slice-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract image slice — slice","title":"Extract image slice — slice","text":"Extract 2D slice image volume","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/slice-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract image slice — slice","text":"","code":"slice(x, zlevel, along, orientation, ...)  # S4 method for class 'NeuroVol,numeric,numeric,missing' slice(x, zlevel, along, orientation)  # S4 method for class 'NeuroVol,numeric,NeuroSpace,AxisSet3D' slice(x, zlevel, along, orientation)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/slice-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract image slice — slice","text":"x object zlevel coordinate (voxel units) along sliced axis along axis along slice orientation target orientation 2D slice ... additional arguments","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/slice-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract image slice — slice","text":"2D slice image volume.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/slices-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract an ordered series of 2D slices from a 3D or 4D object — slices","title":"Extract an ordered series of 2D slices from a 3D or 4D object — slices","text":"function extracts ordered series 2D slices 3D 4D object. returned slices order appear original object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/slices-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract an ordered series of 2D slices from a 3D or 4D object — slices","text":"","code":"slices(x, ...)  # S4 method for class 'NeuroVol' slices(x)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/slices-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract an ordered series of 2D slices from a 3D or 4D object — slices","text":"x NeuroVol object ... Additional arguments passed underlying methods","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/slices-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract an ordered series of 2D slices from a 3D or 4D object — slices","text":"list 2D matrices, containing slice input x. deflist object containing functions return 2D slices volume along z-axis.         length deflist equals number slices z dimension.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/slices-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract an ordered series of 2D slices from a 3D or 4D object — slices","text":"","code":"# Create a simple 3D volume space <- NeuroSpace(c(10,10,10), c(1,1,1)) vol <- NeuroVol(array(rnorm(10*10*10), c(10,10,10)), space)  # Get all slices along the z-axis slc <- slices(vol)  # Number of slices equals the z dimension length(slc) == dim(vol)[3] #> [1] TRUE  # Each slice is a 2D matrix dim(slc[[1]]) == c(10,10) #> [1] TRUE TRUE"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/space-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Geometric Properties of an Image — space","title":"Extract Geometric Properties of an Image — space","text":"function retrieves geometric properties given image, dimensions voxel size. Retrieves NeuroSpace object associated IndexLookupVol object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/space-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Geometric Properties of an Image — space","text":"","code":"space(x, ...)  # S4 method for class 'ClusteredNeuroVec' space(x)  # S4 method for class 'IndexLookupVol' space(x)  # S4 method for class 'ROICoords' space(x)  # S4 method for class 'NeuroObj' space(x)  # S4 method for class 'NeuroSpace' space(x)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/space-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Geometric Properties of an Image — space","text":"x IndexLookupVol object ... Additional arguments, needed.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/space-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Geometric Properties of an Image — space","text":"NeuroSpace object representing geometric space x.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/space-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Geometric Properties of an Image — space","text":"","code":"# Create a NeuroSpace object with dimensions (10, 10, 10) and voxel size (1, 1, 1) x <- NeuroSpace(c(10, 10, 10), c(1, 1, 1))  # Create a NeuroVol object with random data and the specified NeuroSpace vol <- NeuroVol(rnorm(10 * 10 * 10), x)  # Retrieve the geometric properties of the NeuroVol object identical(x, space(vol)) #> [1] TRUE  space <- NeuroSpace(c(64, 64, 64), c(1, 1, 1), c(0, 0, 0)) ilv <- IndexLookupVol(space, c(1:100)) space(ilv)  # Get the associated NeuroSpace object #>  #>  NeuroSpace Object  #>  #>  >> Dimensions  #>   Grid Size: 64 x 64 x 64 #>   Memory:   5.9 KB #>  #>  >> Spatial Properties  #>   Spacing:   1.00 x 1.00 x 1.00 mm #>   Origin:    0.00 x 0.00 x 0.00 mm #>  #>  >> Anatomical Orientation  #>   X: Left-to-Right  |  Y: Posterior-to-Anterior  |  Z: Inferior-to-Superior  #>  #>  >> World Transformation  #>   Forward (Voxel to World):  #>     1.000  0.000  0.000  0.000 #> 0.000  1.000  0.000  0.000 #> 0.000  0.000  1.000  0.000 #> 0.000  0.000  0.000  1.000  #>   Inverse (World to Voxel):  #>     1.000  0.000  0.000  0.000 #> 0.000  1.000  0.000  0.000 #> 0.000  0.000  1.000  0.000 #> 0.000  0.000  0.000  1.000  #>  #>  >> Bounding Box  #>   Min Corner: 0.0, 0.0, 0.0 mm #>   Max Corner: 63.0, 63.0, 63.0 mm #>  #> =================================================="},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/spacing-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Voxel Dimensions of an Image — spacing","title":"Extract Voxel Dimensions of an Image — spacing","text":"function extracts voxel dimensions image represented input object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/spacing-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Voxel Dimensions of an Image — spacing","text":"","code":"spacing(x)  # S4 method for class 'ROICoords' spacing(x)  # S4 method for class 'NeuroObj' spacing(x)  # S4 method for class 'NeuroSpace' spacing(x)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/spacing-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Voxel Dimensions of an Image — spacing","text":"x object representing image.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/spacing-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Voxel Dimensions of an Image — spacing","text":"numeric vector specifying voxel dimensions x.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/spacing-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Voxel Dimensions of an Image — spacing","text":"","code":"bspace <- NeuroSpace(c(10, 10, 10), c(2, 2, 2)) all.equal(spacing(bspace), c(2, 2, 2)) #> [1] TRUE"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/spatial-filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Spatial Filtering Methods for Neuroimaging Data — spatial-filter","title":"Spatial Filtering Methods for Neuroimaging Data — spatial-filter","text":"Methods applying spatial filters neuroimaging data","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/spherical_roi.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Spherical Region of Interest — spherical_roi","title":"Create a Spherical Region of Interest — spherical_roi","text":"Creates Spherical ROI based centroid.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/spherical_roi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Spherical Region of Interest — spherical_roi","text":"","code":"spherical_roi(   bvol,   centroid,   radius,   fill = NULL,   nonzero = FALSE,   use_cpp = TRUE )"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/spherical_roi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Spherical Region of Interest — spherical_roi","text":"bvol NeuroVol NeuroSpace instance centroid center sphere positive-coordinate (,j,k) voxel space. radius radius real units (e.g. millimeters) spherical ROI fill optional value(s) store data nonzero TRUE, keep nonzero elements bvol use_cpp whether use compiled c++ code","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/spherical_roi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Spherical Region of Interest — spherical_roi","text":"instance class ROIVol","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/spherical_roi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Spherical Region of Interest — spherical_roi","text":"","code":"sp1 <- NeuroSpace(c(10,10,10), c(1,2,3))  # create an ROI centered around the integer-valued positive voxel coordinate: i=5, j=5, k=5  cube <- spherical_roi(sp1, c(5,5,5), 3.5)  vox <- coords(cube)  cds <- coords(cube, real=TRUE)  ## fill in ROI with value of 6  cube1 <- spherical_roi(sp1, c(5,5,5), 3.5, fill=6)  all(cube1 == 6) #> [1] TRUE   ## Create multiple spherical ROIs at once (preferred):  centers <- rbind(c(5,5,5), c(3,3,3), c(7,7,7))  vols <- spherical_roi_set(bvol = sp1,                           centroids = centers, radius = 3.5, fill = 1)  length(vols)  # 3 #> [1] 3   ## Equivalent, less efficient lapply variant:  vols2 <- lapply(seq_len(nrow(centers)), function(i) {    spherical_roi(sp1, centers[i,], radius = 3.5, fill = 1)  })   # create an ROI centered around the real-valued coordinates: x=5, y=5, z=5  vox <- coord_to_grid(sp1, c(5, 5, 5))  cube <- spherical_roi(sp1, vox, 3.5)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/spherical_roi_set.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Multiple Spherical Regions of Interest — spherical_roi_set","title":"Create Multiple Spherical Regions of Interest — spherical_roi_set","text":"function generates multiple spherical ROIs simultaneously, centered provided voxel coordinates. efficient calling spherical_roi multiple times need create many ROIs.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/spherical_roi_set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Multiple Spherical Regions of Interest — spherical_roi_set","text":"","code":"spherical_roi_set(bvol, centroids, radius, fill = NULL, nonzero = FALSE)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/spherical_roi_set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Multiple Spherical Regions of Interest — spherical_roi_set","text":"bvol NeuroVol NeuroSpace instance centroids matrix voxel coordinates row represents centroid (,j,k) radius radius real units (e.g. millimeters) spherical ROIs fill Optional value(s) store data. provided, must either single value vector length equal number ROIs nonzero TRUE, keep nonzero elements bvol","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/spherical_roi_set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Multiple Spherical Regions of Interest — spherical_roi_set","text":"list ROIVolWindow objects, one centroid","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/spherical_roi_set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Multiple Spherical Regions of Interest — spherical_roi_set","text":"","code":"# Create a NeuroSpace object sp1 <- NeuroSpace(c(10,10,10), c(1,2,3))  # Create multiple ROIs centered at different voxel coordinates centroids <- matrix(c(5,5,5, 3,3,3, 7,7,7), ncol=3, byrow=TRUE) rois <- spherical_roi_set(sp1, centroids, 3.5)  # Create ROIs with specific fill values rois <- spherical_roi_set(sp1, centroids, 3.5, fill=c(1,2,3))"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/split_blocks-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Cut a vector-valued object into a list of sub-blocks — split_blocks","title":"Cut a vector-valued object into a list of sub-blocks — split_blocks","text":"Splits vector-valued object list sub-blocks defined vector indices.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/split_blocks-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cut a vector-valued object into a list of sub-blocks — split_blocks","text":"","code":"split_blocks(x, indices, ...)  # S4 method for class 'NeuroVec,integer' split_blocks(x, indices, ...)  # S4 method for class 'NeuroVec,factor' split_blocks(x, indices, ...)  # S4 method for class 'NeuroVec,factor' split_blocks(x, indices, ...)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/split_blocks-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cut a vector-valued object into a list of sub-blocks — split_blocks","text":"x vector-valued object indices vector indices defining sub-blocks. Must match length input vector. ... additional arguments","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/split_blocks-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cut a vector-valued object into a list of sub-blocks — split_blocks","text":"list sub-blocks, sub-block contains elements x corresponding matching indices.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/split_blocks-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cut a vector-valued object into a list of sub-blocks — split_blocks","text":"","code":"# Create a 4D neuroimaging vector with 20 timepoints space <- NeuroSpace(c(10,10,10,20), c(1,1,1)) vec <- NeuroVec(array(rnorm(10*10*10*20), c(10,10,10,20)), space)  # Split into 4 blocks by assigning timepoints to blocks 1-4 repeatedly block_indices <- rep(1:4, length.out=20) blocks <- split_blocks(vec, block_indices)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/split_clusters-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Cut an object into a list of spatial or spatiotemporal clusters — split_clusters","title":"Cut an object into a list of spatial or spatiotemporal clusters — split_clusters","text":"function cuts object list sub-objects based vector cluster indices. resulting list contains clusters separate objects. methods split NeuroVec object multiple ROIVec objects based cluster assignments.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/split_clusters-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cut an object into a list of spatial or spatiotemporal clusters — split_clusters","text":"","code":"split_clusters(x, clusters, ...)  # S4 method for class 'NeuroVec,ClusteredNeuroVol' split_clusters(x, clusters, ...)  # S4 method for class 'NeuroVec,integer' split_clusters(x, clusters, ...)  # S4 method for class 'NeuroVol,ClusteredNeuroVol' split_clusters(x, clusters)  # S4 method for class 'NeuroVol,integer' split_clusters(x, clusters)  # S4 method for class 'NeuroVol,numeric' split_clusters(x, clusters)  # S4 method for class 'ClusteredNeuroVol,missing' split_clusters(x, clusters)  # S4 method for class 'NeuroVec,integer' split_clusters(x, clusters, ...)  # S4 method for class 'NeuroVec,numeric' split_clusters(x, clusters, ...)  # S4 method for class 'NeuroVec,ClusteredNeuroVol' split_clusters(x, clusters, ...)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/split_clusters-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cut an object into a list of spatial or spatiotemporal clusters — split_clusters","text":"x NeuroVec object split. clusters Either ClusteredNeuroVol object integer vector cluster assignments. ... Additional arguments passed methods.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/split_clusters-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cut an object into a list of spatial or spatiotemporal clusters — split_clusters","text":"list sub-objects, sub-object corresponds unique cluster index. deflist (lazy-loading list) ROIVec objects, element corresponds cluster.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/split_clusters-methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cut an object into a list of spatial or spatiotemporal clusters — split_clusters","text":"two methods splitting clusters: Using ClusteredNeuroVol object: method uses pre-defined clusters ClusteredNeuroVol object. Using integer vector: method allows custom cluster assignments. methods return deflist, lazy-loading list ROIVec objects.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/split_clusters-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cut an object into a list of spatial or spatiotemporal clusters — split_clusters","text":"","code":"# \\donttest{   # Create a synthetic 3D volume and its NeuroSpace   space <- NeuroSpace(c(10, 10, 10,4))   vol_data <- array(rnorm(10 * 10 * 10 * 4), dim = c(10, 10, 10,4))   neuro_vec <- NeuroVec(vol_data, space)    # Create a binary mask (e.g., select voxels with values > 0)   mask_data <- as.logical(neuro_vec[[1]] > .5)   mask_vol <- LogicalNeuroVol(mask_data, NeuroSpace(c(10, 10, 10)))    # Extract indices and coordinates for the masked voxels   mask_idx <- which(mask_data)   coords <- index_to_coord(mask_vol, mask_idx)    # Perform k-means clustering on the coordinates (e.g., 3 clusters)   set.seed(123)  # for reproducibility   k_res <- kmeans(coords, centers = 3)    # Create a ClusteredNeuroVol using the mask and k-means cluster assignments   clustered_vol <- ClusteredNeuroVol(mask_vol, k_res$cluster)    # Split the NeuroVec by clusters using the ClusteredNeuroVol method   split_result_clust <- split_clusters(neuro_vec, clustered_vol)    # Calculate and print the mean value for each cluster   means_clust <- sapply(split_result_clust, function(x) mean(values(x)))   print(means_clust) #> [1] 0.3152042 0.2522715 0.3607277    # Alternatively, create an integer vector of cluster assignments:   cluster_assignments <- numeric(prod(dim(space)[1:3]))   cluster_assignments[mask_idx] <- k_res$cluster   split_result_int <- split_clusters(neuro_vec, as.integer(cluster_assignments))    # Verify that both splitting methods yield the same cluster means   means_int <- sapply(split_result_int, function(x) mean(values(x)))   print(all.equal(sort(means_clust), sort(means_int))) #> [1] TRUE # }   # Create a simple example space and data space <- NeuroSpace(c(10, 10, 10,4)) data <- array(rnorm(1000*4), dim = c(10, 10, 10,4)) vec <- NeuroVec(data, space)  # Create a mask for clustering (e.g., values > 0) mask <- vec[,,,1] > 0 mask_vol <- LogicalNeuroVol(as.array(mask), NeuroSpace(c(10, 10, 10)))  # Get coordinates of masked voxels for clustering mask_idx <- which(mask) coords <- index_to_coord(mask_vol, mask_idx)  # Perform clustering on the coordinates (3 clusters for example) set.seed(123) # for reproducibility kmeans_result <- kmeans(coords, centers = 3)  # Create a ClusteredNeuroVol clustered_vol <- ClusteredNeuroVol(mask_vol, kmeans_result$cluster)  # Split the NeuroVec by clusters split_result <- split_clusters(vec, clustered_vol)  # Calculate mean value for each cluster cluster_means <- sapply(split_result, function(x) mean(values(x))) print(cluster_means) #> [1] 0.1735834 0.1777742 0.2143060  # Alternative: using integer cluster assignments cluster_indices <- numeric(prod(dim(space)[1:3])) cluster_indices[mask_idx] <- kmeans_result$cluster split_result2 <- split_clusters(vec, as.integer(cluster_indices))  # Verify both methods give same results cluster_means2 <- sapply(split_result2, function(x) mean(values(x))) print(all.equal(sort(cluster_means), sort(cluster_means2))) #> [1] TRUE"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/split_fill-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Fill Disjoint Sets of Values with the Output of a Function — split_fill","title":"Fill Disjoint Sets of Values with the Output of a Function — split_fill","text":"function splits object disjoint sets values based factor, applies specified function set, returns new object original values replaced function's output.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/split_fill-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fill Disjoint Sets of Values with the Output of a Function — split_fill","text":"","code":"split_fill(x, fac, FUN)  # S4 method for class 'NeuroVol,factor,function' split_fill(x, fac, FUN)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/split_fill-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fill Disjoint Sets of Values with the Output of a Function — split_fill","text":"x object split. fac factor split . FUN function used summarize sets.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/split_fill-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fill Disjoint Sets of Values with the Output of a Function — split_fill","text":"object class x, values replaced output FUN.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/split_fill-methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fill Disjoint Sets of Values with the Output of a Function — split_fill","text":"FUN function can either return scalar input vector vector equal length input vector. returns scalar, every voxel set filled value output vector.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/split_fill-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fill Disjoint Sets of Values with the Output of a Function — split_fill","text":"","code":"## Summarize with mean -- FUN returns a scalar x <- NeuroSpace(c(10, 10, 10), c(1, 1, 1)) vol <- NeuroVol(rnorm(10 * 10 * 10), x) fac <- factor(rep(1:10, length.out=1000)) ovol.mean <- split_fill(vol, fac, mean) identical(dim(ovol.mean), dim(vol)) #> [1] TRUE length(unique(as.vector(ovol.mean))) == 10 #> [1] TRUE  ## Transform by reversing vector -- FUN returns a vector ovol2 <- split_fill(vol, fac, rev)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/split_reduce-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize Subsets of an Object by Splitting by Row and Applying a Summary Function — split_reduce","title":"Summarize Subsets of an Object by Splitting by Row and Applying a Summary Function — split_reduce","text":"function summarizes subsets numeric matrix matrix-like object first splitting object row applying summary function.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/split_reduce-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize Subsets of an Object by Splitting by Row and Applying a Summary Function — split_reduce","text":"","code":"split_reduce(x, fac, FUN)  # S4 method for class 'matrix,integer,function' split_reduce(x, fac, FUN)  # S4 method for class 'matrix,factor,missing' split_reduce(x, fac)  # S4 method for class 'matrix,factor,function' split_reduce(x, fac, FUN)  # S4 method for class 'NeuroVec,factor,function' split_reduce(x, fac, FUN)  # S4 method for class 'NeuroVec,factor,missing' split_reduce(x, fac, FUN)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/split_reduce-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize Subsets of an Object by Splitting by Row and Applying a Summary Function — split_reduce","text":"x numeric matrix matrix-like object. fac factor define subsets object. FUN summary function apply subset. provided, mean sub-matrix column computed.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/split_reduce-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize Subsets of an Object by Splitting by Row and Applying a Summary Function — split_reduce","text":"matrix (matrix-like object) containing summarized values applying FUN.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/split_reduce-methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summarize Subsets of an Object by Splitting by Row and Applying a Summary Function — split_reduce","text":"'FUN' supplied, must take vector return single scalar value. returns one value, error occur. 'x' NeuroVec instance, voxels (dimensions 1:3) treated columns time-series (dimension 4) rows. summary function applied groups voxels. However, goal apply function groups time-points.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/split_reduce-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize Subsets of an Object by Splitting by Row and Applying a Summary Function — split_reduce","text":"","code":"mat = matrix(rnorm(100*100), 100, 100) fac = factor(sample(1:3, nrow(mat), replace=TRUE)) ## Compute column means of each sub-matrix ms <- split_reduce(mat, fac) all.equal(row.names(ms), levels(fac)) #> [1] TRUE  ## Compute column medians of each sub-matrix ms <- split_reduce(mat, fac, median)  ## Compute time-series means grouped over voxels. ## Here, 'length(fac)' must equal the number of voxels: 'prod(dim(bvec)[1:3])' bvec <- NeuroVec(array(rnorm(24*24*24*24), c(24,24,24,24)), NeuroSpace(c(24,24,24,24), c(1,1,1))) fac <- factor(sample(1:3, prod(dim(bvec)[1:3]), replace=TRUE)) ms <- split_reduce(bvec, fac) ms2 <- split_reduce(bvec, fac, mean) all.equal(row.names(ms), levels(fac)) #> [1] TRUE all.equal(ms, ms2) #> [1] TRUE"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/split_scale-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Center and/or Scale Row-subsets of a Matrix or Matrix-like Object — split_scale","title":"Center and/or Scale Row-subsets of a Matrix or Matrix-like Object — split_scale","text":"function centers /scales row-subsets numeric matrix matrix-like object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/split_scale-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Center and/or Scale Row-subsets of a Matrix or Matrix-like Object — split_scale","text":"","code":"split_scale(x, f, center, scale)  # S4 method for class 'matrix,factor,logical,logical' split_scale(x, f, center = TRUE, scale = TRUE)  # S4 method for class 'matrix,factor,missing,missing' split_scale(x, f)  # S4 method for class 'DenseNeuroVec,factor,missing,missing' split_scale(x, f)  # S4 method for class 'DenseNeuroVec,factor,logical,missing' split_scale(x, f, center)  # S4 method for class 'DenseNeuroVec,factor,logical,logical' split_scale(x, f, center, scale)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/split_scale-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Center and/or Scale Row-subsets of a Matrix or Matrix-like Object — split_scale","text":"x numeric matrix matrix-like object. f splitting object, typically factor set integer indices. Must equal number rows matrix. center values within submatrix centered? TRUE, mean removed column submatrix. scale values scaled? TRUE, vector divided standard deviation column submatrix.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/split_scale-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Center and/or Scale Row-subsets of a Matrix or Matrix-like Object — split_scale","text":"object class x, row-subsets centered /scaled according f.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/split_scale-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Center and/or Scale Row-subsets of a Matrix or Matrix-like Object — split_scale","text":"","code":"M <- matrix(rnorm(1000), 10, 100) fac <- factor(rep(1:2, each=5)) Ms <- split_scale(M, fac)  ## Correctly centered all(abs(apply(Ms[fac == 1,], 2, mean)) < .000001) #> [1] TRUE all(abs(apply(Ms[fac == 2,], 2, mean)) < .000001) #> [1] TRUE  ## Correctly scaled all.equal(apply(Ms[fac == 1,], 2, sd), rep(1, ncol(Ms))) #> [1] TRUE all.equal(apply(Ms[fac == 2,], 2, sd), rep(1, ncol(Ms))) #> [1] TRUE"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/square_roi.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a square region of interest — square_roi","title":"Create a square region of interest — square_roi","text":"function creates square region interest (ROI) 3D volume, z-dimension fixed one voxel coordinate. ROI defined within given NeuroVol NeuroSpace instance.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/square_roi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a square region of interest — square_roi","text":"","code":"square_roi(bvol, centroid, surround, fill = NULL, nonzero = FALSE, fixdim = 3)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/square_roi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a square region of interest — square_roi","text":"bvol NeuroVol NeuroSpace instance representing 3D volume space. centroid numeric vector length 3, representing center square ROI voxel coordinates. surround non-negative integer specifying number voxels either side central voxel. fill optional value values assign data slot resulting ROI. provided, data assigned. nonzero logical value indicating whether keep nonzero elements bvol. bvol NeuroSpace instance, argument ignored. fixdim logical value indicating whether fixed dimension third, z, dimension. Default TRUE.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/square_roi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a square region of interest — square_roi","text":"instance class ROIVol representing square ROI.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/square_roi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a square region of interest — square_roi","text":"","code":"sp1 <- NeuroSpace(c(10, 10, 10), c(1, 1, 1)) square <- square_roi(sp1, c(5, 5, 5), 1) vox <- coords(square) ## a 3 X 3 X 1 grid nrow(vox) == 9 #> [1] TRUE"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/strip_extension-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic function to strip extension from file name, given a FileFormat instance. — strip_extension","title":"Generic function to strip extension from file name, given a FileFormat instance. — strip_extension","text":"Removes file extension given file name based FileFormat specifications.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/strip_extension-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic function to strip extension from file name, given a FileFormat instance. — strip_extension","text":"","code":"strip_extension(x, file_name)  # S4 method for class 'FileFormat,character' strip_extension(x, file_name)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/strip_extension-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic function to strip extension from file name, given a FileFormat instance. — strip_extension","text":"x FileFormat object specifying format requirements file_name character string specifying file name strip extension ","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/strip_extension-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic function to strip extension from file name, given a FileFormat instance. — strip_extension","text":"character string file_name without extension. character string representing file name without extension","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/strip_extension-methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generic function to strip extension from file name, given a FileFormat instance. — strip_extension","text":"function performs following steps: file_name matches header file format, removes header     extension. file_name matches data file format, removes data     extension. file_name match either format, throws error.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/strip_extension-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic function to strip extension from file name, given a FileFormat instance. — strip_extension","text":"","code":"# Create a FileFormat for NIFTI files fmt <- new(\"FileFormat\",            header_extension = \"nii\",            data_extension = \"nii\")  # Strip extension from a NIFTI file strip_extension(fmt, \"brain_scan.nii\")  # Returns \"brain_scan\" #> [1] \"brain_scan\""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/sub-AbstractSparseNeuroVec-numeric-numeric-ANY-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Extractor Method for AbstractSparseNeuroVec — [,AbstractSparseNeuroVec,numeric,numeric,ANY-method","title":"Extractor Method for AbstractSparseNeuroVec — [,AbstractSparseNeuroVec,numeric,numeric,ANY-method","text":"Extracts subset data sparse four-dimensional brain image based provided indices.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/sub-AbstractSparseNeuroVec-numeric-numeric-ANY-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extractor Method for AbstractSparseNeuroVec — [,AbstractSparseNeuroVec,numeric,numeric,ANY-method","text":"","code":"# S4 method for class 'AbstractSparseNeuroVec,numeric,numeric,ANY' x[i, j, k, m, ..., drop = TRUE]"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/sub-AbstractSparseNeuroVec-numeric-numeric-ANY-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extractor Method for AbstractSparseNeuroVec — [,AbstractSparseNeuroVec,numeric,numeric,ANY-method","text":"x object class AbstractSparseNeuroVec Numeric vector specifying indices first dimension j Numeric vector specifying indices second dimension k Numeric vector specifying indices third dimension (optional) m Numeric vector specifying indices fourth dimension (optional) ... Additional arguments passed methods drop Logical indicating whether drop dimensions length one (default: TRUE)","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/sub-AbstractSparseNeuroVec-numeric-numeric-ANY-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extractor Method for AbstractSparseNeuroVec — [,AbstractSparseNeuroVec,numeric,numeric,ANY-method","text":"array containing extracted subset","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/sub-sub-NeuroVec-numeric-method.html","id":null,"dir":"Reference","previous_headings":"","what":"[[ — [[,NeuroVec,numeric-method","title":"[[ — [[,NeuroVec,numeric-method","text":"function extracts single volume NeuroVec object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/sub-sub-NeuroVec-numeric-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[[ — [[,NeuroVec,numeric-method","text":"","code":"# S4 method for class 'NeuroVec,numeric' x[[i]]"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/sub-sub-NeuroVec-numeric-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[[ — [[,NeuroVec,numeric-method","text":"x NeuroVec object. volume index extract.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/sub-sub-NeuroVec-numeric-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"[[ — [[,NeuroVec,numeric-method","text":"DenseNeuroVol object","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/sub_vector-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic function to extract a sub-vector from a NeuroVec object. — sub_vector","title":"Generic function to extract a sub-vector from a NeuroVec object. — sub_vector","text":"Extracts subset volumes file-backed neuroimaging vector returns dense (-memory) vector. Extracts subsequence volumes NeuroVecSeq object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/sub_vector-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic function to extract a sub-vector from a NeuroVec object. — sub_vector","text":"","code":"sub_vector(x, i, ...)  # S4 method for class 'FileBackedNeuroVec,numeric' sub_vector(x, i)  # S4 method for class 'NeuroVec,numeric' sub_vector(x, i)  # S4 method for class 'NeuroVecSeq,numeric' sub_vector(x, i)  # S4 method for class 'NeuroVecSeq,numeric' sub_vector(x, i)  # S4 method for class 'SparseNeuroVec,numeric' sub_vector(x, i)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/sub_vector-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic function to extract a sub-vector from a NeuroVec object. — sub_vector","text":"x NeuroVecSeq object Numeric vector indices specifying time points extract ... additional arguments","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/sub_vector-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic function to extract a sub-vector from a NeuroVec object. — sub_vector","text":"NeuroVec object sub-sequence supplied object. NeuroVecSeq object containing extracted subsequence","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/sub_vector-methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generic function to extract a sub-vector from a NeuroVec object. — sub_vector","text":"method efficiently reads requested volumes disk, converting -memory representation. spatial metadata preserved adjusted reflect new number volumes. Memory usage proportional number volumes requested, size full dataset.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/sub_vector-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic function to extract a sub-vector from a NeuroVec object. — sub_vector","text":"","code":"bvec <- NeuroVec(array(rnorm(24*24*24*24), c(24,24,24,24)), NeuroSpace(c(24,24,24,24), c(1,1,1))) vec <- sub_vector(bvec,1:2) all.equal(2, dim(vec)[4]) #> [1] TRUE  vec <- sub_vector(bvec, c(1,3,5,7)) all.equal(4, dim(vec)[4]) #> [1] TRUE  mask <- LogicalNeuroVol(rep(TRUE, 24*24*24), NeuroSpace(c(24,24,24), c(1,1,1))) svec <- SparseNeuroVec(array(rnorm(24*24*24*24), c(24,24,24,24)), NeuroSpace(c(24,24,24,24), c(1,1,1)), mask) vec <- sub_vector(svec, c(1,3,5)) all.equal(3, dim(vec)[4]) #> [1] TRUE"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/theme_neuro.html","id":null,"dir":"Reference","previous_headings":"","what":"A minimal, publication-friendly theme for image slices — theme_neuro","title":"A minimal, publication-friendly theme for image slices — theme_neuro","text":"Quiet axes, thin panel border, grid, generous margins, slim legend.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/theme_neuro.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A minimal, publication-friendly theme for image slices — theme_neuro","text":"","code":"theme_neuro(base_size = 10, base_family = \"\")"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/theme_neuro.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A minimal, publication-friendly theme for image slices — theme_neuro","text":"base_size Base font size. base_family Base font family.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/trans-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract image coordinate transformation — trans","title":"Extract image coordinate transformation — trans","text":"Extract image coordinate transformation Get transformation matrix","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/trans-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract image coordinate transformation — trans","text":"","code":"trans(x)  # S4 method for class 'MetaInfo' trans(x)  # S4 method for class 'NeuroObj' trans(x)  # S4 method for class 'NeuroSpace' trans(x)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/trans-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract image coordinate transformation — trans","text":"x object transformation","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/trans-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract image coordinate transformation — trans","text":"numeric 4x4 matrix maps grid coordinates real-world coordinates.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/trans-methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract image coordinate transformation — trans","text":"function returns transformation can used go \"grid coordinates\" \"real world coordinates\" millimeters. see NeuroSpace","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/trans-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract image coordinate transformation — trans","text":"","code":"bspace <- NeuroSpace(c(10,10,10), c(2,2,2)) trans(bspace) #>      [,1] [,2] [,3] [,4] #> [1,]    2    0    0    0 #> [2,]    0    2    0    0 #> [3,]    0    0    2    0 #> [4,]    0    0    0    1 all.equal(dim(trans(bspace)), c(4,4)) #> [1] TRUE"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/values-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Data Values of an Object — values","title":"Extract Data Values of an Object — values","text":"Extract Data Values Object","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/values-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Data Values of an Object — values","text":"","code":"values(x, ...)  # S4 method for class 'ClusteredNeuroVec' values(x)  # S4 method for class 'DenseNeuroVol' values(x)  # S4 method for class 'SparseNeuroVol' values(x)  # S4 method for class 'ROIVol' values(x, ...)  # S4 method for class 'ROIVec' values(x, ...)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/values-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Data Values of an Object — values","text":"x object get values ... additional arguments","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/values-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Data Values of an Object — values","text":"vector array containing values extracted x.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/values-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Data Values of an Object — values","text":"","code":"x <- NeuroSpace(c(10,10,10), c(1,1,1)) vol <- NeuroVol(rnorm(10 * 10 * 10), x) values(vol) #> , , 1 #>  #>             [,1]       [,2]       [,3]        [,4]       [,5]        [,6] #>  [1,]  1.8918641 -1.7194232  0.1702594  0.63967366 -0.7963003  0.83783565 #>  [2,] -2.1161098 -2.6788791  1.9927158 -0.08953230  0.9705245 -2.50392059 #>  [3,]  0.2800136 -0.4857234 -0.3496921  0.11876704  0.5301042  0.46080128 #>  [4,] -0.6088704  0.9246844 -0.7581685  0.05612087  0.9602208 -1.44615980 #>  [5,] -0.6602557 -0.3155493 -0.7571585 -0.09448582 -0.4299773 -0.24123161 #>  [6,] -2.0983611 -0.3704547  0.6195315  1.10093664  2.1382664  1.38322355 #>  [7,]  0.2771002  0.5273108 -1.0625265  1.69843068  1.4344680  0.94715885 #>  [8,]  2.4326936 -0.1171373  0.8421213 -0.92426127  0.9605686 -0.51120516 #>  [9,] -1.4880183  0.3093024  0.8112767  0.42725407  0.2235129 -0.06680052 #> [10,] -1.3435145 -0.3388444 -0.3729760  0.92614145 -0.6495468 -0.47791918 #>             [,7]       [,8]       [,9]      [,10] #>  [1,]  0.4676029  0.9784294  0.4355761  1.1108797 #>  [2,]  0.6181733  0.5346340 -0.2712131 -1.4338155 #>  [3,] -0.9738618 -0.9712529  0.7058618 -0.5852931 #>  [4,] -1.4310774  0.7264957 -0.1950493 -0.9027710 #>  [5,]  1.6919539  2.3978227  1.4477851  1.2746610 #>  [6,]  0.1311029  1.0204940 -0.0303311 -0.2712654 #>  [7,]  1.2632074  0.2563994 -2.2099888 -0.4282785 #>  [8,]  0.5264464 -0.6874177 -0.8626741 -1.1446006 #>  [9,] -0.1759880 -2.2855761 -0.9237061 -0.7196209 #> [10,] -0.8450952  2.2287077 -1.5188796  0.4656355 #>  #> , , 2 #>  #>             [,1]       [,2]       [,3]        [,4]        [,5]        [,6] #>  [1,]  1.6012561  0.7075803  1.3376937  2.75731470 -0.02800018 -0.10843300 #>  [2,]  0.2077200  1.2898269 -1.0192266 -0.01258936  0.49450345 -0.15347417 #>  [3,]  0.3044442  0.1542115 -2.4937649  0.64094654 -0.49858670 -0.29263456 #>  [4,] -1.5218850  0.1247524 -0.1832670  0.88809758  0.94528724  0.58243961 #>  [5,] -0.7135452 -0.2657803 -0.1630684 -0.72007066 -1.08345244  0.07973033 #>  [6,] -1.1330311  2.4751800 -0.5335177  0.52958732 -0.60100961  0.36325067 #>  [7,]  0.5368662 -0.8510816 -1.1269152  0.02977542 -0.20333641  1.95431838 #>  [8,] -3.0618457 -1.0795466  2.2282294 -2.41570961  0.68435338  1.05474983 #>  [9,] -2.5279739 -0.2516147 -1.0953548 -1.19242877 -0.78234164  0.54511413 #> [10,]  2.2170893  0.1259971  0.1905263  2.17000097  0.41632132 -0.93543590 #>              [,7]       [,8]        [,9]      [,10] #>  [1,]  0.99917733 -0.3542112  2.42730592 -0.2471207 #>  [2,] -0.48003853  0.8467675  0.81388619  0.3443896 #>  [3,] -0.72281367 -1.7808501 -0.34593963 -2.9117738 #>  [4,]  0.43651960 -0.7741087 -1.77111730  0.3004721 #>  [5,] -0.73805676  1.3872743  1.63718273 -1.5916579 #>  [6,]  0.86502546  2.3142363 -0.82252577 -1.8686381 #>  [7,] -0.05143252  1.1259016 -1.53746434 -1.9527855 #>  [8,] -0.32573076  2.3409294 -0.41627901  0.3382471 #>  [9,] -0.21452808 -2.2519449 -0.04349184  0.5404542 #> [10,] -0.56589493 -0.9743269 -1.38924423  1.7077902 #>  #> , , 3 #>  #>             [,1]         [,2]       [,3]       [,4]        [,5]       [,6] #>  [1,] -1.3997914  0.188317503  1.2610657  0.2066232 -0.15252537 -0.7492328 #>  [2,] -0.3152654 -0.008077669 -1.5573351  0.2543980  0.09191307 -2.0764703 #>  [3,]  1.3743367  0.965157063 -1.4428198  2.6812885  0.12218490 -0.8039381 #>  [4,] -0.7437608 -0.123943670  0.9920752 -0.4196747 -0.47447598  0.4575860 #>  [5,]  1.1191803  0.955467290  0.2483195 -1.1874727 -1.28483942  1.2426498 #>  [6,]  0.2522011  0.194524605  0.7331855  0.7694301 -1.05478676 -0.1709003 #>  [7,] -1.7601948  0.569942468 -0.4316946 -0.2579357 -0.31459097 -1.6465180 #>  [8,]  0.9994905  1.383525248  0.5358189 -0.1792076 -1.68527341 -1.4294986 #>  [9,] -0.8658995  0.943611774 -0.9702660 -0.6153313  0.86652572  0.2068155 #> [10,]  0.2148146 -0.107798003  1.6811725 -1.2364111  1.49751819  2.0087276 #>             [,7]        [,8]        [,9]        [,10] #>  [1,] -0.5384479 -0.03366573 -1.65431964  1.011860396 #>  [2,] -1.5972498 -1.99632249 -0.08015954 -0.315131814 #>  [3,] -0.4144214  0.01117092  0.06618716  1.779758202 #>  [4,]  1.9733939  0.24920267 -0.75377341 -1.438400831 #>  [5,] -0.1031058  0.41756199  0.98093656 -0.698349219 #>  [6,] -3.0650497  0.08878182 -0.93575322 -0.937818047 #>  [7,]  0.2491600 -0.33896691  2.50361901  1.002451318 #>  [8,]  2.1621790  0.30767213 -0.24622055  0.001295293 #>  [9,] -1.4290494 -1.69396764  0.98629531 -0.056990112 #> [10,] -1.7059689  0.71877231  0.17452365  0.288161442 #>  #> , , 4 #>  #>             [,1]       [,2]       [,3]       [,4]       [,5]       [,6] #>  [1,] -0.2721513  1.2325516 -0.1927869 -0.7028035 -0.3979254  0.1796883 #>  [2,] -1.0030401 -0.3240513  0.5897805  2.4845490 -0.2446595  0.7173236 #>  [3,]  1.6067759 -0.1451337  0.3134763 -0.7341857  1.3024179 -1.4740101 #>  [4,]  0.4019235  1.4545095  0.2790863  0.4560426 -0.2388736  0.5577914 #>  [5,] -0.9349349  2.8430389  0.1526944  0.7310566  1.2762170 -0.6359788 #>  [6,]  0.4386473  0.1380872  1.1514588 -0.3609497  1.9351829 -1.1526596 #>  [7,]  0.2275063  0.1764612  0.4020459  1.1378827  0.1959221 -0.5825488 #>  [8,] -0.8071833 -0.3470859  0.5113108  0.6018429 -0.4240808 -0.6592797 #>  [9,] -1.6225680 -0.7852843 -1.6371421 -1.3227058  1.1581459 -1.0711004 #> [10,]  0.6455260  0.9171958  2.5009764 -1.4401883  3.7083541  0.5470428 #>             [,7]       [,8]       [,9]        [,10] #>  [1,] -1.5617781 -1.4202556 -1.2515302 -1.609226808 #>  [2,]  0.7243523  1.0664433 -0.7982382 -0.004521679 #>  [3,] -0.4255101  0.1424098  1.0608517  2.358951260 #>  [4,]  0.5201047 -1.7804322 -1.4351282  0.123884722 #>  [5,] -0.3937545 -0.3317808 -2.8417054 -0.494976204 #>  [6,] -3.0020394 -1.2322037 -1.2785354  1.056935096 #>  [7,]  1.7149432 -1.8527897 -1.4355826 -0.745558123 #>  [8,]  1.1944380  2.0316982  0.6103024 -1.721254654 #>  [9,] -1.6212310  0.3601970  0.8888299  1.623915030 #> [10,]  0.3038527 -1.6739086  0.2412424 -1.086900834 #>  #> , , 5 #>  #>             [,1]         [,2]       [,3]       [,4]       [,5]        [,6] #>  [1,] -0.8976699 -0.958823784  0.5168985 -1.5901563 -0.3947077 -1.69137890 #>  [2,] -0.9037773 -0.385218733 -0.7948859 -0.7515662 -0.1414462 -0.01755865 #>  [3,] -0.1720363 -0.797407551 -1.0096592 -2.2455904 -1.4392430 -0.21943573 #>  [4,] -2.5090197  1.118298169 -2.1256878  0.4614853  1.4570891  1.40276524 #>  [5,] -1.2310736 -0.470203715 -0.2134839  1.5096254 -1.6191653 -0.41027012 #>  [6,]  1.0559330 -0.673468432 -0.1621770 -1.2587041 -1.9059529 -1.07138073 #>  [7,] -0.4641517 -1.082041724 -0.6789080  1.4912672 -0.2102201 -1.07811495 #>  [8,]  0.8181720  0.732676132 -2.0142284 -1.5678741 -0.9280672 -0.04717510 #>  [9,] -0.8188360  2.189561439 -0.6998378  0.4355497 -0.9529500  0.56118273 #> [10,]  1.0418531 -0.008524283  1.7246722  0.6290358  1.3224751  1.49712776 #>             [,7]        [,8]       [,9]      [,10] #>  [1,] -0.5832187 -0.83311638 -1.0248071 -0.7853670 #>  [2,] -0.4740639 -1.13426321 -1.3328764 -1.2553140 #>  [3,]  1.1318360  1.20530443 -1.2522207 -1.0100844 #>  [4,]  1.1529478  0.77844514 -1.1372220 -0.4268859 #>  [5,]  0.7650532  0.31804984  1.8360409 -1.2773148 #>  [6,]  0.4514062 -0.09478890  0.4420197 -0.5848397 #>  [7,]  0.4033988 -0.54935327  0.2420953 -0.1112865 #>  [8,]  1.2085821  1.15649844  0.2912490 -1.1637980 #>  [9,] -0.3955860  0.11006056 -2.0436810 -0.4841679 #> [10,]  1.2581168 -0.03609231  0.5289343  0.8268946 #>  #> , , 6 #>  #>             [,1]       [,2]       [,3]       [,4]       [,5]        [,6] #>  [1,] -0.6251139 -0.5757244 -0.6761039 -2.0649220  0.6452952  0.73611464 #>  [2,]  0.8713048  0.1640617  0.9191183 -0.8462890 -0.8138596 -0.27530906 #>  [3,]  1.0986568 -0.6070292  1.2516927  2.1538937 -1.2215090  1.74333415 #>  [4,]  0.2794692  0.9409054 -1.0685564  0.3073686  0.7375583  0.10365224 #>  [5,]  0.1878769 -0.4219109 -0.5127848 -1.7094275  0.3287655  0.25251555 #>  [6,]  0.8145166  0.3711703 -0.1466805 -0.3826213  0.3895331 -1.20951094 #>  [7,]  0.2162811  0.9841529 -1.1304621  0.9775357  1.0432765 -0.32521681 #>  [8,]  0.4492245  0.4046304  1.2091727 -0.8164747 -0.2596903 -1.33102546 #>  [9,] -0.4522667 -1.1718089 -1.0599035  1.3788189 -2.4752325 -1.20484050 #> [10,] -2.2494842 -0.1728467  0.6962236  0.4682512 -0.8554475  0.03602201 #>              [,7]        [,8]        [,9]      [,10] #>  [1,] -1.36024373  0.35313713  0.08708639  0.8437333 #>  [2,]  1.51559757 -0.08344335  0.10172088 -1.5175888 #>  [3,] -0.07638655 -1.93683715 -1.11901037  1.1064136 #>  [4,]  1.54648497 -1.19834318  0.29952471  1.8557344 #>  [5,]  1.01679156  0.77303477 -1.25695034  1.5067139 #>  [6,]  0.38357086 -0.66748068  2.31685402 -2.0043191 #>  [7,] -0.77759612  0.16419535  1.26294887  0.4476022 #>  [8,] -1.58598632 -1.29164540 -0.28858265  1.6850739 #>  [9,]  0.67641761 -0.76053190 -1.26739290  0.9095823 #> [10,]  0.49316966  0.27033681  1.32384483  0.1429241 #>  #> , , 7 #>  #>              [,1]       [,2]        [,3]        [,4]        [,5]       [,6] #>  [1,] -0.83688649  0.3235424  1.23031906 -0.15968923  0.25098642 -1.0305054 #>  [2,] -0.59466226  1.7234816 -0.86737556  1.54366120 -0.06801315 -0.1434154 #>  [3,]  0.79219626  0.7750956 -0.38694718  0.66080413  0.94633937  2.3546036 #>  [4,] -0.60319502 -0.7512021  0.04130528 -0.35457268  1.53035138 -0.7808747 #>  [5,]  0.01001087  0.5000236 -0.33644831  1.35540258 -0.85025475 -0.8784717 #>  [6,] -0.73082927  0.5245298  0.23845733  0.82925893  0.16399805 -1.1701184 #>  [7,] -0.71800609  1.0881535 -0.90455878 -0.70084138 -0.64531096  0.2746677 #>  [8,]  2.21233169 -0.4521502 -1.47718118 -0.17067869  1.26318280  0.1234626 #>  [9,]  1.80386295  0.8560994 -0.01486677  0.08518351 -0.05925216  1.0226172 #> [10,] -0.49281321  0.2211037  0.17945432 -0.44406678  0.78953116  0.8769759 #>              [,7]        [,8]       [,9]       [,10] #>  [1,] -0.71352531  0.71802917  0.2790499  0.57913125 #>  [2,]  1.55790440 -0.58766069  0.4945700  0.33272244 #>  [3,] -0.03060215  1.36204377 -0.9579067 -1.18113623 #>  [4,] -0.12938087 -0.31230205  0.3817545  0.21601368 #>  [5,]  0.85652863 -0.64969969 -1.7864200 -0.02700779 #>  [6,] -1.12954882  0.01174299  0.3786176 -0.51249485 #>  [7,] -0.65418883  0.98855053 -0.5809585  1.22908317 #>  [8,] -0.32148238 -1.15666567 -0.5370029  0.46062239 #>  [9,] -0.12585278  0.25914195 -0.1142211 -0.44820041 #> [10,]  1.95323854  1.47801245 -0.6662416 -0.57090823 #>  #> , , 8 #>  #>             [,1]       [,2]       [,3]       [,4]         [,5]        [,6] #>  [1,] -1.0748290 -0.8441616 -1.2684885 -1.9742894 -0.680907496 -0.20814881 #>  [2,]  0.8542814 -1.2269258  1.6680768 -0.6129456 -0.008066809  0.58396044 #>  [3,]  0.5550887  0.2763905  0.2971226  1.0231452 -0.255636931  0.44802781 #>  [4,]  0.4793627  1.2598751 -1.8557811  0.1309805 -1.145750696  0.25628462 #>  [5,]  0.4650759  1.9028942 -0.9069673  0.7189401 -0.826033458  0.04579016 #>  [6,] -0.8966535  0.1592690 -1.7880808  3.1428460 -0.046094229  1.08911840 #>  [7,] -1.1163278 -0.3372214 -0.2086074 -1.3132189 -0.135898696 -0.86506237 #>  [8,] -2.8608866 -0.6844149  1.2329076  0.6885802 -0.149157938 -1.56335356 #>  [9,]  0.7775288  0.8245831 -1.7760032  0.8357608  0.420629168  2.26561035 #> [10,] -0.4539931  0.1914870  0.1940603 -0.3290647  1.418107648 -0.99936827 #>             [,7]        [,8]        [,9]       [,10] #>  [1,]  0.7450209 -0.68241721 -0.73464700  0.11616358 #>  [2,]  0.5823071  0.93236710  0.85120413 -0.05936149 #>  [3,] -1.5203092 -0.08141578  0.23704718 -2.30592594 #>  [4,] -1.5463585  0.63044171 -1.80663002 -0.19771193 #>  [5,]  0.6417132  0.20528730  0.21209055  0.51785222 #>  [6,] -0.2003322 -2.18705962 -0.86770779 -0.79068896 #>  [7,]  0.1216181 -1.24567027  0.31625295  3.01007838 #>  [8,] -0.5245604  0.52810547 -0.08787074 -0.21240316 #>  [9,]  1.4932394 -1.18246778 -0.85352965  0.03344579 #> [10,]  1.3257438 -0.25975323  0.26126450  0.45537352 #>  #> , , 9 #>  #>              [,1]        [,2]        [,3]         [,4]       [,5]        [,6] #>  [1,] -0.51813981 -0.09329682 -1.46855662 -3.192964645 -2.2643026  0.22882960 #>  [2,]  1.10248406 -0.17072018 -0.37056268 -0.541591035  0.1271348 -0.16031492 #>  [3,]  0.08909674  1.05542192  0.11301898  0.006899599 -0.7739394 -0.01186631 #>  [4,] -0.21837127 -0.00329432  0.71561595 -1.363412198 -0.5188131  1.39269059 #>  [5,]  2.07902366 -0.72858757 -0.18741789  1.651586739 -1.0294675 -1.76587292 #>  [6,] -0.57497501  0.49446011  0.04153445  1.304835461 -1.3258402  0.60571035 #>  [7,] -0.61868421 -0.12486758 -1.59810616  1.438117528  0.2611224  0.09696845 #>  [8,]  0.28899880  2.39412058  0.30043814 -0.484760211 -0.5964174 -0.86399133 #>  [9,] -0.47963450  0.26859837 -0.25953411  1.207699364  1.0496557  0.50309423 #> [10,]  0.03800318 -1.92983381 -0.23425046 -0.437067815  1.2962829 -0.49496943 #>              [,7]       [,8]       [,9]       [,10] #>  [1,]  2.30892675  0.2065539  0.4828720 -1.09005911 #>  [2,]  0.30771781  1.7483869  1.0349068  0.06170881 #>  [3,]  0.23419193 -0.7161065  1.1463213  1.27247210 #>  [4,]  0.22720544 -1.0093797  0.4872698 -1.25266441 #>  [5,] -0.23700156 -2.1930147 -1.0881740 -0.39490273 #>  [6,] -0.05288518 -1.6651412  0.9015334 -0.29260018 #>  [7,]  0.90311769 -1.0310218 -1.4441583  0.11886809 #>  [8,]  0.91167474  0.1566725  0.8825580 -0.65297774 #>  [9,]  1.52118035 -0.6607638  0.3428051 -0.86297341 #> [10,]  0.97675601  1.5039640 -0.2755053 -1.81850935 #>  #> , , 10 #>  #>               [,1]       [,2]        [,3]       [,4]         [,5]        [,6] #>  [1,] -0.479549117 -1.1373649 -1.09716389  0.6302154 -0.006485067  0.02342362 #>  [2,]  0.690369266  0.5847883 -0.24251170  0.1937355  0.126581534 -0.92589771 #>  [3,]  0.949947712 -0.8262808  0.06656473 -0.2345497 -1.266803556 -0.60579758 #>  [4,]  0.643753914 -0.7582884 -1.27618211  1.3165006 -0.251645577  0.70999955 #>  [5,] -1.638051960  0.5494183  0.13981391  1.6149282 -1.891548660  1.57383643 #>  [6,] -0.087343856  0.3525345 -1.75289535 -0.5053656 -1.935614706  1.35790492 #>  [7,] -0.108936816 -0.5564434  0.72413560  0.1816772 -0.586659901 -0.92477862 #>  [8,] -1.894777523 -1.8300203  0.83233774 -0.6907843  0.149467148 -1.47504415 #>  [9,]  0.003250801 -0.1877452 -0.57446020  0.5186624  1.548241251 -0.45349601 #> [10,] -0.515298596  1.1165086 -0.33958550 -1.1796170  0.172344184 -0.06693667 #>              [,7]       [,8]        [,9]       [,10] #>  [1,]  0.87120816  0.4741611  0.73675006  0.03543674 #>  [2,] -1.10087696  1.6340949 -0.63986618 -0.78187941 #>  [3,]  1.46694541 -1.8679996  0.43296214 -0.73519752 #>  [4,] -0.23471568 -1.6761807  1.06157906  0.50669158 #>  [5,] -0.25528650 -0.7835959 -0.79081163 -0.46738434 #>  [6,] -0.62388234 -0.4665510  0.04944622  0.71447622 #>  [7,] -0.02409087 -0.6748856 -0.89307842 -1.59868675 #>  [8,] -1.61360303  0.5401374  0.50786668 -0.52980659 #>  [9,] -1.34119041  0.1732238  0.58494650 -0.86114515 #> [10,]  1.45886041  0.0508400  1.09484772  0.29606559 #>"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/vec_from_vols.html","id":null,"dir":"Reference","previous_headings":"","what":"Create NeuroVec from list of NeuroVol objects — vec_from_vols","title":"Create NeuroVec from list of NeuroVol objects — vec_from_vols","text":"Factory function create NeuroVec object list NeuroVol objects. convenience wrapper around NeuroVec constructor combines multiple 3D volumes single 4D NeuroVec.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/vec_from_vols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create NeuroVec from list of NeuroVol objects — vec_from_vols","text":"","code":"vec_from_vols(vols, mask = NULL)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/vec_from_vols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create NeuroVec from list of NeuroVol objects — vec_from_vols","text":"vols list NeuroVol objects. volumes must identical spatial dimensions. mask optional logical array LogicalNeuroVol object defining subset voxels include. provided, SparseNeuroVec created.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/vec_from_vols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create NeuroVec from list of NeuroVol objects — vec_from_vols","text":"NeuroVec object (either DenseNeuroVec SparseNeuroVec   depending whether mask provided).","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/vec_from_vols.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create NeuroVec from list of NeuroVol objects — vec_from_vols","text":"","code":"# Create a simple NeuroVec from list of volumes spc <- NeuroSpace(c(10, 10, 10)) vol1 <- NeuroVol(rnorm(10*10*10), spc) vol2 <- NeuroVol(rnorm(10*10*10), spc) vec <- vec_from_vols(list(vol1, vol2)) print(dim(vec))  # Should be c(10, 10, 10, 2) #> [1] 10 10 10  2"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/vectors-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract an ordered list of 1D vectors. — vectors","title":"Extract an ordered list of 1D vectors. — vectors","text":"function extracts ordered list 1D vectors object supplies vector data. subset argument specifies subset vectors extract, can vector indices logical vector. return value list containing extracted vectors order specified indices.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/vectors-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract an ordered list of 1D vectors. — vectors","text":"","code":"vectors(x, subset, ...)  # S4 method for class 'NeuroVec,missing' vectors(x)  # S4 method for class 'DenseNeuroVec,missing' vectors(x)  # S4 method for class 'NeuroVec,numeric' vectors(x, subset)  # S4 method for class 'NeuroVec,logical' vectors(x, subset)  # S4 method for class 'NeuroVecSeq,missing' vectors(x)  # S4 method for class 'NeuroVecSeq,numeric' vectors(x, subset)  # S4 method for class 'NeuroVecSeq,logical' vectors(x, subset)  # S4 method for class 'ROIVec,missing' vectors(x)  # S4 method for class 'matrix,missing' vectors(x)  # S4 method for class 'ROIVec,integer' vectors(x, subset)  # S4 method for class 'matrix,integer' vectors(x, subset)  # S4 method for class 'matrix,numeric' vectors(x, subset)  # S4 method for class 'ROIVec,numeric' vectors(x, subset)  # S4 method for class 'ROIVec,logical' vectors(x, subset)  # S4 method for class 'SparseNeuroVec,missing' vectors(x, nonzero = FALSE)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/vectors-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract an ordered list of 1D vectors. — vectors","text":"x object supplies vector data. subset subset vectors extract. ... additional arguments passed methods. nonzero include nonzero vectors output list","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/vectors-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract an ordered list of 1D vectors. — vectors","text":"list containing extracted vectors x order subset. deflist object element function returns time series         voxel. length deflist equals total number voxels.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/vectors-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract an ordered list of 1D vectors. — vectors","text":"","code":"file_name <- system.file(\"extdata\", \"global_mask_v4.nii\", package=\"neuroim2\") vec <- read_vec(file_name) v <- vectors(vec) mean(v[[1]]) #> [1] 0"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/vols-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract an ordered series of 3D volumes. — vols","title":"Extract an ordered series of 3D volumes. — vols","text":"function extracts ordered series 3D volumes object supplies volume data. indices argument specifies subset volumes extract, can vector indices logical vector. return value list containing extracted volumes order specified indices.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/vols-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract an ordered series of 3D volumes. — vols","text":"","code":"vols(x, indices, ...)  # S4 method for class 'NeuroVec,numeric' vols(x, indices)  # S4 method for class 'NeuroVec,missing' vols(x)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/vols-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract an ordered series of 3D volumes. — vols","text":"x object supplies volume data. indices subset volumes extract. ... additional arguments passed methods.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/vols-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract an ordered series of 3D volumes. — vols","text":"list containing extracted 3D volumes x order indices.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/vols-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract an ordered series of 3D volumes. — vols","text":"","code":"vec <- read_vec(system.file(\"extdata\", \"global_mask_v4.nii\", package=\"neuroim2\")) vs <- vols(vec) length(vs) == dim(vec)[4] #> [1] TRUE  vs <- vols(vec, indices=1:3) length(vs) == 3 #> [1] TRUE"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/voxels-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"extract voxel coordinates — voxels","title":"extract voxel coordinates — voxels","text":"extract voxel coordinates","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/voxels-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"extract voxel coordinates — voxels","text":"","code":"voxels(x, ...)  # S4 method for class 'Kernel' voxels(x, center_voxel = NULL)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/voxels-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"extract voxel coordinates — voxels","text":"x object extract voxels ... additional arguments function center_voxel absolute location center voxel, default (0,0,0)","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/voxels-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"extract voxel coordinates — voxels","text":"matrix vector representing voxel coordinates x.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/voxels-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"extract voxel coordinates — voxels","text":"","code":"# Create a 3D kernel with dimensions 3x3x3 and voxel size 1x1x1 kern <- Kernel(kerndim = c(3,3,3), vdim = c(1,1,1))  # Get voxel coordinates centered at origin (0,0,0) vox <- voxels(kern) # Returns a matrix where each row is a voxel coordinate # relative to the kernel center  # Get voxel coordinates centered at specific point (5,5,5) vox_centered <- voxels(kern, center_voxel = c(5,5,5)) # Returns coordinates shifted to be centered at (5,5,5)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/which_dim-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Find Dimensions of a Given Axis — which_dim","title":"Find Dimensions of a Given Axis — which_dim","text":"function returns dimension specified axis given object, matrix array.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/which_dim-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find Dimensions of a Given Axis — which_dim","text":"","code":"which_dim(x, axis)  # S4 method for class 'NeuroSpace,NamedAxis' which_dim(x, axis)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/which_dim-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find Dimensions of a Given Axis — which_dim","text":"x NeuroSpace object axis NamedAxis find","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/which_dim-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find Dimensions of a Given Axis — which_dim","text":"integer representing dimension index specified axis object x.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/which_dim-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find Dimensions of a Given Axis — which_dim","text":"","code":"x <- NeuroSpace(c(10,10,10), spacing=c(1,1,1)) which_dim(x, x@axes@j) == 2 #> [1] TRUE"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/write_elements-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a sequence of elements from an input source — write_elements","title":"Write a sequence of elements from an input source — write_elements","text":"Write sequence elements input source","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/write_elements-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a sequence of elements from an input source — write_elements","text":"","code":"write_elements(x, els)  # S4 method for class 'BinaryWriter,numeric' write_elements(x, els)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/write_elements-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write a sequence of elements from an input source — write_elements","text":"x output channel els elements write","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/write_elements-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write a sequence of elements from an input source — write_elements","text":"Invisibly returns NULL writing elements.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/write_elements-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write a sequence of elements from an input source — write_elements","text":"","code":"# Create a temporary binary file for writing tmp <- tempfile() writer <- BinaryWriter(tmp, byte_offset = 0L,                       data_type = \"DOUBLE\", bytes_per_element = 8L)  # Write some random data data <- rnorm(100) write_elements(writer, data) close(writer)  # Read back the data to verify reader <- BinaryReader(tmp, byte_offset = 0L,                       data_type = \"double\", bytes_per_element = 8L) read_data <- read_elements(reader, 100) close(reader)  # Verify data was written correctly all.equal(data, read_data) #> [1] TRUE  # Clean up unlink(tmp) # \\donttest{ # Create a temporary binary file for writing tmp <- tempfile() writer <- BinaryWriter(tmp, byte_offset = 0L,                       data_type = \"DOUBLE\", bytes_per_element = 8L) # Write some data write_elements(writer, rnorm(100)) close(writer)  # Clean up unlink(tmp) # }"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/write_vec-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a 4d image vector to disk — write_vec","title":"Write a 4d image vector to disk — write_vec","text":"Write 4d image vector disk","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/write_vec-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a 4d image vector to disk — write_vec","text":"","code":"write_vec(x, file_name, format, data_type, ...)  # S4 method for class 'ROIVec,character,missing,missing' write_vec(x, file_name)  # S4 method for class 'NeuroVec,character,missing,missing' write_vec(x, file_name)  # S4 method for class 'NeuroVec,character,character,missing' write_vec(   x,   file_name,   format,   nbit = FALSE,   compression = 5,   chunk_dim = c(10, 10, 10, dim(x)[4]) )  # S4 method for class 'NeuroVec,character,missing,character' write_vec(x, file_name, data_type)  # S4 method for class 'ROIVec,character,missing,missing' write_vec(x, file_name)  # S4 method for class 'NeuroVec,character,missing,missing' write_vec(x, file_name)  # S4 method for class 'NeuroVec,character,character,missing' write_vec(   x,   file_name,   format,   nbit = FALSE,   compression = 5,   chunk_dim = c(10, 10, 10, dim(x)[4]) )  # S4 method for class 'NeuroVec,character,missing,character' write_vec(x, file_name, data_type)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/write_vec-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write a 4d image vector to disk — write_vec","text":"x image object, typically NeuroVec instance. file_name output file name. format file format string. Since \"NIFTI\" currently supported format, parameter can safely ignored omitted. data_type numeric data type. specified character vector : \"BINARY\", \"UBYTE\", \"SHORT\", \"INT\", \"FLOAT\", \"DOUBLE\". Otherwise output format inferred R datatype image. ... extra args nbit set nbit compression compression compression level 1 9 chunk_dim dimensions chunk","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/write_vec-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write a 4d image vector to disk — write_vec","text":"Invisibly returns NULL writing vector disk.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/write_vec-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write a 4d image vector to disk — write_vec","text":"","code":"bvec <- NeuroVec(array(0, c(10,10,10,10)), NeuroSpace(c(10,10,10,10), c(1,1,1))) # \\donttest{ # Create temporary files tmp1 <- tempfile(fileext = \".nii\")  # Write vectors to temporary files write_vec(bvec, tmp1)  # Clean up unlink(tmp1) # }"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/write_vol-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a 3d image volume to disk — write_vol","title":"Write a 3d image volume to disk — write_vol","text":"Write 3d image volume disk","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/write_vol-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a 3d image volume to disk — write_vol","text":"","code":"write_vol(x, file_name, format, data_type)  # S4 method for class 'NeuroVol,character,missing,missing' write_vol(x, file_name)  # S4 method for class 'ClusteredNeuroVol,character,missing,missing' write_vol(x, file_name)  # S4 method for class 'NeuroVol,character,character,missing' write_vol(x, file_name, format)  # S4 method for class 'ROIVol,character,character,missing' write_vol(x, file_name, format)  # S4 method for class 'NeuroVol,character,missing,character' write_vol(x, file_name, data_type)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/write_vol-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write a 3d image volume to disk — write_vol","text":"x image object, typically NeuroVol instance. file_name output file name format file format string. Since \"NIFTI\" currently supported format, parameter can safely ignored omitted. data_type output data type, specified character vector : \"BINARY\", \"UBYTE\", \"SHORT\", \"INT\", \"FLOAT\", \"DOUBLE\". Otherwise output format inferred R datatype image.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/write_vol-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write a 3d image volume to disk — write_vol","text":"Invisibly returns NULL writing volume disk.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/write_vol-methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Write a 3d image volume to disk — write_vol","text":"output format inferred file extension. output format inferred file extension.  write_vol(x, \".nii\") outputs NIFTI file.  write_vol(x, \".nii.gz\") outputs gzipped NIFTI file. file output formats currently supported.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/write_vol-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write a 3d image volume to disk — write_vol","text":"","code":"bvol <- NeuroVol(array(0, c(10,10,10)), NeuroSpace(c(10,10,10), c(1,1,1))) # \\donttest{ tmp1 <- tempfile(fileext = \".nii\") write_vol(bvol, tmp1) unlink(tmp1) # }"},{"path":"https://bbuchsbaum.github.io/neuroim2/news/index.html","id":"neuroim2-082-development","dir":"Changelog","previous_headings":"","what":"neuroim2 0.8.2 (development)","title":"neuroim2 0.8.2 (development)","text":"README refreshed: CRAN/R-universe install, CI/coverage badges, website & cheatsheet links. Docs: spherical_roi() now cross-links spherical_roi_set(); ROI vignette shows multi-ROI creation. New validity checks catch data/mask/space shape mismatches (#5). Robust .matrix.SparseNeuroVec() implementation (#2). New resample_to() wrapper readable interpolation names; delegates existing resample() methods.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/news/index.html","id":"neuroim2-081","dir":"Changelog","previous_headings":"","what":"neuroim2 0.8.1","title":"neuroim2 0.8.1","text":"CRAN release: 2025-04-10 Initial CRAN submission.","code":""}]
