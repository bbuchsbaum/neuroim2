[{"path":"https://bbuchsbaum.github.io/neuroim2/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 neuroim2 authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/ImageVolumes.html","id":"reading-a-nifti-formatted-image-volume","dir":"Articles","previous_headings":"","what":"Reading a NIFTI formatted image volume","title":"Working with Image Volumes","text":"way read volumetric image file use read_vol:","code":"library(neuroim2) #> Loading required package: Matrix #>  #> Attaching package: 'neuroim2' #> The following object is masked from 'package:base': #>  #>     scale     file_name <- system.file(\"extdata\", \"global_mask2.nii.gz\", package=\"neuroim2\")     vol <- read_vol(file_name)"},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/ImageVolumes.html","id":"working-with-image-volumes","dir":"Articles","previous_headings":"","what":"Working with image volumes","title":"Working with Image Volumes","text":"Information geometry image volume shown : read_vol returns object class NeuroVol object extends R array 3 dimensions (x,y,z). Arithmetic can performed images ordinary arrays: numeric image volume can converted binary image follows: can also create NeuroVol instance array numeric vector. First consruct standard R array: Now reate NeuroSpace instance describes geometry image including, minimum, dimensions voxel spacing. usually create NeuroSpace objects, geometric information image automatically determined information stored image file header. Thus, NeuroSpace objects usually copied existing images using space extractor function needed:","code":"print(vol) #>  #>  === NeuroVol Object ===  #>  #> * Basic Information  #>   Type:      DenseNeuroVol #>   Dimensions: 64 x 64 x 25 (406.6 Kb) #>   Total Voxels: 102,400 #>  #> * Data Properties #>   Value Range: [0.00, 1.00] #>  #> * Spatial Properties #>   Spacing: 3.50 x 3.50 x 3.70 mm #>   Origin:  112.0, -108.5, -46.2 mm #>   Axes:    Right-to-Left x Posterior-to-Anterior x Inferior-to-Superior #>  #> ====================================== #>  #>  Access Methods:  #>   .  Get Slice:   slice(object, zlevel=10)  #>   .  Get Value:   object[i, j, k]  #>   .  Plot:       plot(object)  # shows multiple slices class(vol) #> [1] \"DenseNeuroVol\" #> attr(,\"package\") #> [1] \"neuroim2\"          is.array(vol) #> [1] TRUE          dim(vol) #> [1] 64 64 25          vol[1,1,1] #> [1] 0          vol[64,64,24] #> [1] 0 vol2 <- vol + vol     sum(vol2) == 2 * sum(vol) #> [1] TRUE          vol3 <- vol2 - 2*vol     all(vol3 == 0) #> [1] TRUE vol2 <- as.logical(vol)     class(vol2) #> [1] \"LogicalNeuroVol\" #> attr(,\"package\") #> [1] \"neuroim2\"     print(vol2[1,1,1]) #> [1] FALSE x <- array(0, c(64,64,64)) bspace <- NeuroSpace(dim=c(64,64,64), spacing=c(1,1,1))     vol <- NeuroVol(x, bspace)     vol #>  #>  === NeuroVol Object ===  #>  #> * Basic Information  #>   Type:      DenseNeuroVol #>   Dimensions: 64 x 64 x 64 (2 Mb) #>   Total Voxels: 262,144 #>  #> * Data Properties #>   Value Range: [0.00, 0.00] #>  #> * Spatial Properties #>   Spacing: 1.00 x 1.00 x 1.00 mm #>   Origin:  0.0, 0.0, 0.0 mm #>   Axes:    Left-to-Right x Posterior-to-Anterior x Inferior-to-Superior #>  #> ====================================== #>  #>  Access Methods:  #>   .  Get Slice:   slice(object, zlevel=10)  #>   .  Get Value:   object[i, j, k]  #>   .  Plot:       plot(object)  # shows multiple slices vol2 <- NeuroVol((vol+1)*25, space(vol))     max(vol2) #> [1] 25     space(vol2) #>  #>  NeuroSpace Object  #>  #>  >> Dimensions  #>   Grid Size: 64 x 64 x 64 #>   Memory:   5.9 KB #>  #>  >> Spatial Properties  #>   Spacing:   1.00 x 1.00 x 1.00 mm #>   Origin:    0.00 x 0.00 x 0.00 mm #>  #>  >> Anatomical Orientation  #>   X: Left-to-Right  |  Y: Posterior-to-Anterior  |  Z: Inferior-to-Superior  #>  #>  >> World Transformation  #>   Forward (Voxel to World):  #>     1.000  0.000  0.000  0.000 #> 0.000  1.000  0.000  0.000 #> 0.000  0.000  1.000  0.000 #> 0.000  0.000  0.000  1.000  #>   Inverse (World to Voxel):  #>     1.000  0.000  0.000  0.000 #> 0.000  1.000  0.000  0.000 #> 0.000  0.000  1.000  0.000 #> 0.000  0.000  0.000  1.000  #>  #>  >> Bounding Box  #>   Min Corner: 0.0, 0.0, 0.0 mm #>   Max Corner: 63.0, 63.0, 63.0 mm #>  #> =================================================="},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/ImageVolumes.html","id":"writing-a-nifti-formatted-image-volume","dir":"Articles","previous_headings":"","what":"Writing a NIFTI formatted image volume","title":"Working with Image Volumes","text":"’re ready write image volume disk, use write_vol can also display NeuroVol instance. Lets download MNI image web plot . Now can display using plot command. show every 15th slice.","code":"write_vol(vol2, \"output.nii\")          ## adding a '.gz' extension results ina gzipped file.     write_vol(vol2, \"output.nii.gz\") temp <- tempfile()     uri = \"http://www.bic.mni.mcgill.ca/~vfonov/nihpd/obj1/nihpd_asym_07.5-13.5_nifti.zip\"     download.file(uri,temp)     cmd <- paste(\"unzip \", \"-d\", dirname(temp), temp)     system(cmd)     vol <- read_vol(paste0(dirname(temp), \"/nihpd_asym_07.5-13.5_t1w.nii\")) plot(vol, zlevels=seq(1, dim(vol)[3], by=15))"},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/NeuroVector.html","id":"working-with-neuroimaging-time-series-data","dir":"Articles","previous_headings":"","what":"Working with neuroimaging time-series data","title":"Four dimensional neuroimaging data","text":"neuroim2 package contains data structures functions reading, accessing, processing 4-dimensional neuroimaging data.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/NeuroVector.html","id":"reading-a-four-dimensional-nifti-image-with-read_vec","dir":"Articles","previous_headings":"Working with neuroimaging time-series data","what":"Reading a four-dimensional NifTI image with read_vec","title":"Four dimensional neuroimaging data","text":"read 4D image consisting 5 time points, Now imagine set 4d images. can read read_vec. (just using three versions file example). extract subset volumes can use sub_vector function:","code":"library(purrr)       library(ggplot2)       file_name <- system.file(\"extdata\", \"global_mask_v4.nii\", package=\"neuroim2\")       vec <- read_vec(file_name)       dim(vec) #> [1] 64 64 25  4       vec #>  #> DenseNeuroVec (3.13 bytes MB) #>  #> - Spatial Info --------------------------- #> | Dimensions    : 64 x 64 x 25 (4 timepoints) #> | Total Voxels  : 102,400 #> | Spacing       : 3.5 x 3.5 x 3.7 #>  #> - Properties --------------------------- #> | Origin        : 112 x -108 x -46.2 #> | Orientation   : Right-to-Left Posterior-to-Anterior Inferior-to-Superior #>  #> - Statistics --------------------------- #>     Mean +/- SD    : 0.288 +/- 0.453 #>  #> Label: /home/runner/work/_temp/Library/neuroim2/extdata/global_mask_v4.nii file_name <- system.file(\"extdata\", \"global_mask_v4.nii\", package=\"neuroim2\")       vec <- read_vec(c(file_name, file_name, file_name))       dim(vec) #> [1] 64 64 25 12              vec2 <- read_vec(rep(file_name, 10))       vec2 #>  #> NeuroVecSeq (10 vectors) #>  #> += Sequence Info --------------------------- #> | Length        : 10 #> | Total Time    : 40 points #>  #> += Spatial Info --------------------------- #> | Dimensions    : 64 x 64 x 25 #> | Spacing       : 3.5 x 3.5 x 3.7 #> | Origin        : 112 x -108 x -46.2 #> | Orientation   : Right-to-Left Posterior-to-Anterior Inferior-to-Superior #>  #> += Vector Details -------------------------- #>   1. DenseNeuroVec (4 timepoints) #>   2. DenseNeuroVec (4 timepoints) #>   3. DenseNeuroVec (4 timepoints) #>   4. DenseNeuroVec (4 timepoints) #>   5. DenseNeuroVec (4 timepoints) #>   6. DenseNeuroVec (4 timepoints) #>   7. DenseNeuroVec (4 timepoints) #>   8. DenseNeuroVec (4 timepoints) #>   9. DenseNeuroVec (4 timepoints) #>   10. DenseNeuroVec (4 timepoints) vec_1_6 <- sub_vector(vec, 1:6)       dim(vec_1_6) #> [1] 64 64 25  6       vec_1_6 #>  #> NeuroVecSeq (2 vectors) #>  #> += Sequence Info --------------------------- #> | Length        : 2 #> | Total Time    : 6 points #>  #> += Spatial Info --------------------------- #> | Dimensions    : 64 x 64 x 25 #> | Spacing       : 3.5 x 3.5 x 3.7 #> | Origin        : 112 x -108 x -46.2 #> | Orientation   : Right-to-Left Posterior-to-Anterior Inferior-to-Superior #>  #> += Vector Details -------------------------- #>   1. DenseNeuroVec (4 timepoints) #>   2. DenseNeuroVec (2 timepoints)"},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/NeuroVector.html","id":"extracting-time-series-data-using-the-series-and-series_roi-functions","dir":"Articles","previous_headings":"Working with neuroimaging time-series data","what":"Extracting time-series data using the series and series_roi functions","title":"Four dimensional neuroimaging data","text":"get time-series voxel (1,1,1) can use series function: can extract 4d region interest series_roi follows: can also extract ROI using 1d indices: can extract plain matrix using series function: can also use coordinate indexing using voxel coordinates. First load binary mask spatial dimensions NeuroVec: Now convert indices voxels extract matrix values specified locations: using series_roi:","code":"series(vec_1_6, 1,1,1) #> [1] 0 0 0 0 0 0 file_name <- system.file(\"extdata\", \"global_mask_v4.nii\", package=\"neuroim2\")       vol <- read_vol(file_name)       roi <- spherical_roi(vol, c(12,12,12), radius=8)       rvec1 <- series_roi(vec, roi)              ## or alternatively as a pipeline       rvec2 <- read_vol(file_name) %>% spherical_roi(c(12,12,12), radius=8) %>% series_roi(vec,.)       rvec2 #>  #>  === ROIVec Object ===  #>  #> - Structure  #>   Points:     49 #>   Features:   3 (147 total) #>   Memory:     12.7 Kb #>  #> - Spatial Properties #>   Parent Space: 64 x 64 x 25 x 12 #>   Centroid:     [13.0, 13.0, 13.0 mm] #>  #> - Value Properties #>   Range:    [0.00, 0.00] #>  #> ====================================== #>  #>  Access Methods:  #>   .  Get Points:   coords(object)  #>   .  Get Values:   as.matrix(object)  #>   .  Subset:       object[1:10, ]              ## we can extract the ROI values with the `values` method.       assertthat::assert_that(all(values(rvec1) == values(rvec2))) #> [1] TRUE       assertthat::assert_that(all(coords(rvec1) == coords(rvec2))) #> [1] TRUE r1 <- series_roi(vec, 1:100) r1 #>  #>  === ROIVec Object ===  #>  #> - Structure  #>   Points:     100 #>   Features:   3 (300 total) #>   Memory:     17.5 Kb #>  #> - Spatial Properties #>   Parent Space: 64 x 64 x 25 x 12 #>   Centroid:     [27.5, 1.4, 1.0 mm] #>  #> - Value Properties #>   Range:    [0.00, 0.00] #>  #> ====================================== #>  #>  Access Methods:  #>   .  Get Points:   coords(object)  #>   .  Get Values:   as.matrix(object)  #>   .  Subset:       object[1:10, ] r2 <- series(vec, 1:100) dim(r2) #> [1]  12 100 mask <- read_vol(system.file(\"extdata\", \"global_mask_v4.nii\", package=\"neuroim2\")) vox <- index_to_grid(mask, 1:100)  r3 <- series(vec, vox) dim(r3) #> [1]  12 100 r4 <- series_roi(vec,vox) r4 #>  #>  === ROIVec Object ===  #>  #> - Structure  #>   Points:     100 #>   Features:   3 (300 total) #>   Memory:     18.7 Kb #>  #> - Spatial Properties #>   Parent Space: 64 x 64 x 25 x 12 #>   Centroid:     [27.5, 1.4, 1.0 mm] #>  #> - Value Properties #>   Range:    [0.00, 0.00] #>  #> ====================================== #>  #>  Access Methods:  #>   .  Get Points:   coords(object)  #>   .  Get Values:   as.matrix(object)  #>   .  Subset:       object[1:10, ]"},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/pipelines.html","id":"pipelining-operations-using-a-functional-approach","dir":"Articles","previous_headings":"","what":"Pipelining operations using a functional approach","title":"Pipelines","text":"neuroim2 packages provides set functions allows one split image data various ways processing data split parts. breaking dataset pieces, can also easily parallelize certain operations.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/pipelines.html","id":"splitting-an-image-into-connected-components","dir":"Articles","previous_headings":"Pipelining operations using a functional approach","what":"Splitting an image into connected components","title":"Pipelines","text":"First load example volume, assign random values, find connected components threshold .9  Now want find average value connected components using split_clusters function. Since conn_comp returns ClusteredNeuroVol containing cluster indices, use split original volume list ROIVols compute mean one. Suppose want compute local standard deviation within 4mm radius voxel. can use searchlight function construct list spherical ROIs centered every voxel input set.  Another thing might compute k nearest neighbors searchlight replace center voxel average intensity neighbors:  need access searchlight coordinates (voxel space), can use searchlight_coords function. , simply replace center voxel average neighbors searchlight space:","code":"library(purrr)       library(ggplot2)       file_name <- system.file(\"extdata\", \"global_mask_v4.nii\", package=\"neuroim2\")       vol <- read_vol(file_name)       mask.idx <- which(vol>0)              vol2 <- vol       vol2[mask.idx] <- runif(length(mask.idx))       comp <- conn_comp(vol2, threshold=.8)              plot(comp$index, zlevels=seq(1,25,by=3), cmap=rainbow(255)) mvals <- vol2 %>% split_clusters(comp$index) %>% map_dbl( ~ mean(.)) sdvol <- vol %>% searchlight(radius=5, eager=TRUE) %>% map_dbl( ~ sd(.))  sdvol <- NeuroVol(sdvol, space=space(vol), indices=which(vol!=0)) plot(sdvol, cmap=rainbow(255)) k <- 12 knnfvol <- vol2 %>% searchlight(radius=6, eager=TRUE) %>% map_dbl(function(x) {   ind <- order((x[x@center_index] - values(x)^2))[1:k]   mean(x[ind])   mean(x) }) %>% NeuroVol(space=space(vol), indices=which(vol!=0)) plot(knnfvol, cmap=rainbow(255)) avgvol <- vol %>% searchlight_coords(radius=12, nonzero=TRUE) %>% map_dbl(function(x) {   vals <- vol[x]   mean(vals[vals!=0]) }) %>% NeuroVol(space=space(vol), indices=which(vol!=0)) plot(avgvol, cmap=rainbow(2), zlevels=seq(1,25,by=3))"},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/pipelines.html","id":"mapping-a-function-over-every-slice-of-a-neurovol","dir":"Articles","previous_headings":"Pipelining operations using a functional approach","what":"Mapping a function over every slice of a NeuroVol","title":"Pipelines","text":"Suppose want split image volume slice apply function slice. can use slices function achieve follows:","code":"slice_means <- vol %>% slices %>% map_dbl(~ mean(.)) plot(slice_means, type='l', ylab=\"mean intensity\", xlab=\"slice number\")"},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/pipelines.html","id":"mapping-a-function-over-each-volume-of-a-neurovec-object","dir":"Articles","previous_headings":"Pipelining operations using a functional approach","what":"Mapping a function over each volume of a NeuroVec object","title":"Pipelines","text":"","code":"vec <- concat(vol,vol,vol,vol,vol) vec #>  #> DenseNeuroVec (3.91 bytes MB) #>  #> - Spatial Info --------------------------- #> | Dimensions    : 64 x 64 x 25 (5 timepoints) #> | Total Voxels  : 102,400 #> | Spacing       : 3.5 x 3.5 x 3.7 #>  #> - Properties --------------------------- #> | Origin        : 112 x -108 x -46.2 #> | Orientation   : Right-to-Left Posterior-to-Anterior Inferior-to-Superior #>  #> - Statistics --------------------------- #>     Mean +/- SD    : 0.288 +/- 0.453 #>  #> Label: none mean_vec <- vec %>% vols %>% map_dbl(~ mean(.)) sd_vec <- vec %>% vols %>% map_dbl(~ sd(.)) assert_that(length(mean_vec) == dim(vec)[4]) #> [1] TRUE assert_that(length(sd_vec) == dim(vec)[4]) #> [1] TRUE"},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/pipelines.html","id":"mapping-a-function-over-each-vector-of-a-neurovec-object","dir":"Articles","previous_headings":"Pipelining operations using a functional approach","what":"Mapping a function over each vector of a NeuroVec object","title":"Pipelines","text":"","code":"vec <- concat(vol,vol,vol,vol,vol) vec #>  #> DenseNeuroVec (3.91 bytes MB) #>  #> - Spatial Info --------------------------- #> | Dimensions    : 64 x 64 x 25 (5 timepoints) #> | Total Voxels  : 102,400 #> | Spacing       : 3.5 x 3.5 x 3.7 #>  #> - Properties --------------------------- #> | Origin        : 112 x -108 x -46.2 #> | Orientation   : Right-to-Left Posterior-to-Anterior Inferior-to-Superior #>  #> - Statistics --------------------------- #>     Mean +/- SD    : 0.288 +/- 0.453 #>  #> Label: none mean_vol <- vec %>% vectors() %>% map_dbl(~ mean(.)) %>% NeuroVol(., space=space(vol)) assert_that(all(dim(mean_vol) == dim(vol))) #> [1] TRUE"},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/regionOfInterest.html","id":"creating-a-spherical-roi","dir":"Articles","previous_headings":"Regions of interest","what":"Creating a spherical ROI","title":"Regions of Interest","text":"neuroim2 basic support creating regions interest (ROI). create spherical ROI around central point, need existing object type NeuroVol NeuroSpace. create spherical region interest 5mm radius around central voxel =20, j=20, k=20, first read image. Next, create spherical ROI centered around voxel coordinates [20,20,20] 5mm radius, filling values ROI 100.","code":"library(neuroim2)               file_name <- system.file(\"extdata\", \"global_mask2.nii.gz\", package=\"neuroim2\")       vol <- read_vol(file_name) sphere <- spherical_roi(vol, c(20,20,20), radius=5, fill=100, use_cpp=FALSE) #>  #>  ROIVol Object  #>  #> Properties:  #>   Dimensions: 11 x 3 #>   ROI Points: 11 #>   Value Range: [100.00, 100.00]"},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/regionOfInterest.html","id":"creating-a-spherical-roi-around-a-real-valued-coordinate","dir":"Articles","previous_headings":"Regions of interest","what":"Creating a Spherical ROI around a real-valued coordinate","title":"Regions of Interest","text":"create spherical ROI centered around real coordinate millimeters, need first convert real-valued coordinates voxel-based coordinate. Suppose real-world coordinate -50, -28, 10 coordinate space. function spherical_roi takes coordinate voxel units, need convert real-world coordinate (.e. millimeter units) voxel coordinates. Now convert back real-world coordinates","code":"rpoint <- c(-34,-28,10) vox <- coord_to_grid(vol, rpoint)     sphere <- spherical_roi(vol, vox, radius=10, fill=1)     dim(coords(sphere)) #> [1] 85  3 coords <- index_to_coord(vol, indices(sphere))     center_of_mass <- colMeans(coords)     center_of_mass #> [1] -36.75 -22.75  14.80"},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/regionOfInterest.html","id":"converting-an-roi-to-a-sparseneurovol","dir":"Articles","previous_headings":"Regions of interest","what":"Converting an ROI to a SparseNeuroVol","title":"Regions of Interest","text":"may want convert region interest NeuroVol instance. don’t want store every value dense array. can make use SparseNeuroVol class stores non-zero values using Matrix::sparseVector hood. Now construct SparseNeuroVol fill values stored ROI:","code":"sphere <- spherical_roi(vol, c(50,10,10), radius=10, fill=1)     sphere #>  #>  ROIVol Object  #>  #> Properties:  #>   Dimensions: 85 x 3 #>   ROI Points: 85 #>   Value Range: [1.00, 1.00] sparsevol <- SparseNeuroVol(sphere, space(vol),indices=indices(sphere))     sum(sparsevol) == sum(sphere) #> [1] TRUE     all(dim(sparsevol) == dim(vol)) #> [1] TRUE"},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/regionOfInterest.html","id":"carrying-out-simple-searchlight-roi-analyses","dir":"Articles","previous_headings":"Regions of interest","what":"Carrying out simple “searchlight” ROI analyses","title":"Regions of Interest","text":"-called roving “searchlight” often used perform multivariate statistical analyses local neighborhood voxel image. Several functions neuroim2 can used carry searchlight analyses. functions produces lists ROIVol instances encapsulate local neighborhood around voxel. , compute mean value exhaustive set spherical searchlights image volume. can also use “randomized searchlight”, samples voxels without replacement voxels included least one searchlight. Another related method involves using “parcellation” clustering define successive regions interest analysis. show similar way . First must define ‘clustering’ voxel space: Now create ClusteredNeuroVol map mean function clusters:","code":"library(purrr)  ## generate a list of searchlight ROIs slist <- searchlight(vol, eager=TRUE, radius=8)  ## compute the mean value in each searchlight ROI. ret <- slist %>% purrr::map(~ mean(vol[coords(.)])) ret <- vol %>% random_searchlight(radius=8) %>% purrr::map(~ mean(vol[coords(.)])) grid <- index_to_coord(vol, which(vol > 0)) kres <- kmeans(grid, centers=50, iter.max=500) kvol <- ClusteredNeuroVol(vol, kres$cluster) ret <- vol %>% clustered_searchlight(cvol=kvol) %>% purrr::map(~ mean(vol[coords(.)]))"},{"path":"https://bbuchsbaum.github.io/neuroim2/articles/regionOfInterest.html","id":"working-with-image-patches","dir":"Articles","previous_headings":"Regions of interest","what":"Working with image patches","title":"Regions of Interest","text":"Another type ROI analysis, similar ‘searchlight’, involves working sets square cuboid image “patches”. patch_set function can used generate set equally-sized patches span image space (mask covering space). patches guaranteed equal size. means edges, ‘patches’ padded value image extremes. create patch set consistting 3 3 1 square patches span image. Now limit patches set patch centers within mask.","code":"pset <- patch_set(vol, dims=c(3,3,1)) length(pset) #> [1] 102400 ret <- pset %>% purrr::map(~ mean(.)) pset <- patch_set(vol, dims=c(3,3,1), mask=as.logical(vol)) length(pset) #> [1] 29532 ret <- pset %>% purrr::map(~ mean(.))"},{"path":"https://bbuchsbaum.github.io/neuroim2/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Bradley R Buchsbaum. Author, maintainer, copyright holder.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Buchsbaum BR (2025). neuroim2: Data Structures IO Neuroimaging Data Emphasis Functional Magnetic Resonance Imaging (FMRI). R package version 0.8.1, https://bbuchsbaum.github.io/neuroim2/, https://github.com/bbuchsbaum/neuroim2.","code":"@Manual{,   title = {neuroim2: Data Structures and IO for Neuroimaging Data with an Emphasis on Functional Magnetic Resonance Imaging (FMRI)},   author = {Bradley R Buchsbaum},   year = {2025},   note = {R package version 0.8.1,     https://bbuchsbaum.github.io/neuroim2/},   url = {https://github.com/bbuchsbaum/neuroim2}, }"},{"path":"https://bbuchsbaum.github.io/neuroim2/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Data Structures and IO for Neuroimaging Data with an Emphasis on Functional Magnetic Resonance Imaging (FMRI)","text":"can install development version neuroim2 (v. 0.1.0) Github :","code":"# install.packages(\"devtools\") devtools::install_github(\"bbuchsbaum/neuroim2\")"},{"path":"https://bbuchsbaum.github.io/neuroim2/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Data Structures and IO for Neuroimaging Data with an Emphasis on Functional Magnetic Resonance Imaging (FMRI)","text":"read volumetric NIFTI formatted image, use read_vol function: Now, vol can treated three-dimensional array: can create 4D image, concatenating several 3D volumes:","code":"library(neuroim2) ## Loading required package: Matrix fname <- system.file(\"extdata\", \"global_mask_v4.nii\", package=\"neuroim2\") vol <- read_vol(fname) v1 <- vol[1,1,1] vol2 <- vol + vol vol3 <- vol2 - vol all(vol == vol3) ## [1] TRUE vec <- concat(vol, vol, vol2) series1 <- vec[1,1,1,] length(series1) ## [1] 3"},{"path":"https://bbuchsbaum.github.io/neuroim2/index.html","id":"vignettes","dir":"","previous_headings":"","what":"Vignettes","title":"Data Structures and IO for Neuroimaging Data with an Emphasis on Functional Magnetic Resonance Imaging (FMRI)","text":"See examples use neuroim2 vignettes.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/AFNIMetaInfo.html","id":null,"dir":"Reference","previous_headings":"","what":"Create AFNI Format Metadata Object — AFNIMetaInfo","title":"Create AFNI Format Metadata Object — AFNIMetaInfo","text":"Creates AFNIMetaInfo object containing format-specific metadata   AFNI format neuroimaging files.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/AFNIMetaInfo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create AFNI Format Metadata Object — AFNIMetaInfo","text":"","code":"AFNIMetaInfo(descriptor, afni_header)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/AFNIMetaInfo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create AFNI Format Metadata Object — AFNIMetaInfo","text":"descriptor AFNIFormat object specifying file format details afni_header List containing AFNI header information","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/AFNIMetaInfo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create AFNI Format Metadata Object — AFNIMetaInfo","text":"AFNIMetaInfo object","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/AFNIMetaInfo.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create AFNI Format Metadata Object — AFNIMetaInfo","text":"Create AFNIMetaInfo Object AFNIMetaInfo object extends MetaInfo AFNI-specific features: AFNI brick structure Sub-brick labels scaling Space transformation Statistical parameters function handles: Dimension extraction validation Label generation sub-bricks Transformation AFNI NIFTI space Data type scaling setup","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/AFNIMetaInfo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create AFNI Format Metadata Object — AFNIMetaInfo","text":"","code":"if (FALSE) { # \\dontrun{ # Read AFNI header header <- read_afni_header(\"brain+orig.HEAD\")  # Create format descriptor fmt <- AFNIFormat()  # Create metadata meta <- AFNIMetaInfo(fmt, header)  # Check dimensions dim(meta) } # }"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/AbstractSparseNeuroVec-class.html","id":null,"dir":"Reference","previous_headings":"","what":"AbstractSparseNeuroVec Class — AbstractSparseNeuroVec-class","title":"AbstractSparseNeuroVec Class — AbstractSparseNeuroVec-class","text":"abstract base class sparse four-dimensional brain image representations. class provides foundation efficient storage manipulation large, sparse neuroimaging data.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/AbstractSparseNeuroVec-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"AbstractSparseNeuroVec Class — AbstractSparseNeuroVec-class","text":"AbstractSparseNeuroVec class serves template implementing various sparse representations 4D brain images. combines spatial properties NeuroVec efficiency sparse data structures.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/AbstractSparseNeuroVec-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"AbstractSparseNeuroVec Class — AbstractSparseNeuroVec-class","text":"mask object class LogicalNeuroVol defining sparse domain brain image. mask indicates voxels contain non-zero data. map object class IndexLookupVol used map spatial coordinates index/row coordinates sparse representation.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/AbstractSparseNeuroVec-class.html","id":"subclasses","dir":"Reference","previous_headings":"","what":"Subclasses","title":"AbstractSparseNeuroVec Class — AbstractSparseNeuroVec-class","text":"Concrete implementations abstract class provide specific data storage mechanisms methods efficient access manipulation sparse 4D brain image data.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/AbstractSparseNeuroVec-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"AbstractSparseNeuroVec Class — AbstractSparseNeuroVec-class","text":"","code":"if (FALSE) { # \\dontrun{ # This is an abstract class and should not be instantiated directly. # Instead, use one of its concrete subclasses, such as SparseNeuroVec. } # }"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/Arith-NeuroVec-NeuroVol-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Arithmetic Operations for NeuroVec and NeuroVol — Arith,NeuroVec,NeuroVol-method","title":"Arithmetic Operations for NeuroVec and NeuroVol — Arith,NeuroVec,NeuroVol-method","text":"function performs arithmetic operations NeuroVec object NeuroVol object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/Arith-NeuroVec-NeuroVol-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Arithmetic Operations for NeuroVec and NeuroVol — Arith,NeuroVec,NeuroVol-method","text":"","code":"# S4 method for class 'NeuroVec,NeuroVol' Arith(e1, e2)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/Arith-NeuroVec-NeuroVol-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Arithmetic Operations for NeuroVec and NeuroVol — Arith,NeuroVec,NeuroVol-method","text":"e1 NeuroVec object. e2 NeuroVol object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/Arith-NeuroVec-NeuroVol-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Arithmetic Operations for NeuroVec and NeuroVol — Arith,NeuroVec,NeuroVol-method","text":"DenseNeuroVec object resulting arithmetic operation.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/Arith-NeuroVol-NeuroVec-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Arithmetic Operations for NeuroVol and NeuroVec — Arith,NeuroVol,NeuroVec-method","title":"Arithmetic Operations for NeuroVol and NeuroVec — Arith,NeuroVol,NeuroVec-method","text":"function performs arithmetic operations NeuroVol object NeuroVec object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/Arith-NeuroVol-NeuroVec-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Arithmetic Operations for NeuroVol and NeuroVec — Arith,NeuroVol,NeuroVec-method","text":"","code":"# S4 method for class 'NeuroVol,NeuroVec' Arith(e1, e2)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/Arith-NeuroVol-NeuroVec-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Arithmetic Operations for NeuroVol and NeuroVec — Arith,NeuroVol,NeuroVec-method","text":"e1 NeuroVol object. e2 NeuroVec object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/Arith-NeuroVol-NeuroVec-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Arithmetic Operations for NeuroVol and NeuroVec — Arith,NeuroVol,NeuroVec-method","text":"DenseNeuroVec object resulting arithmetic operation.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/Arith-ROIVol-ROIVol-method.html","id":null,"dir":"Reference","previous_headings":"","what":"This function performs arithmetic operations on two ROIVol objects. — Arith,ROIVol,ROIVol-method","title":"This function performs arithmetic operations on two ROIVol objects. — Arith,ROIVol,ROIVol-method","text":"function performs arithmetic operations two ROIVol objects.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/Arith-ROIVol-ROIVol-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This function performs arithmetic operations on two ROIVol objects. — Arith,ROIVol,ROIVol-method","text":"","code":"# S4 method for class 'ROIVol,ROIVol' Arith(e1, e2)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/Arith-ROIVol-ROIVol-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This function performs arithmetic operations on two ROIVol objects. — Arith,ROIVol,ROIVol-method","text":"e1 ROIVol object. e2 ROIVol object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/Arith-ROIVol-ROIVol-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This function performs arithmetic operations on two ROIVol objects. — Arith,ROIVol,ROIVol-method","text":"ROIVol object resulting arithmetic operation.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/Arith-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Arithmetic Operations — Arith-methods","title":"Arithmetic Operations — Arith-methods","text":"Methods performing arithmetic operations neuroimaging objects method performs arithmetic operations two ROIVol objects (e1 e2) using generic arithmetic function. dimensions objects checked compatibility performing operation. Perform arithmetic operation two SparseNeuroVec objects. input SparseNeuroVec objects must dimensions NeuroSpace objects. method computes union masks performs arithmetic operation non-zero values. result returned new SparseNeuroVec object. Perform arithmetic operation SparseNeuroVol object NeuroVol object. input SparseNeuroVol NeuroVol objects must dimensions. method performs arithmetic operation non-zero values SparseNeuroVol corresponding values NeuroVol. result returned new DenseNeuroVol object. Perform arithmetic operation NeuroVol object SparseNeuroVol object. input NeuroVol SparseNeuroVol objects must dimensions. method performs arithmetic operation values NeuroVol non-zero values SparseNeuroVol. result returned new DenseNeuroVol object. Perform arithmetic operation two NeuroVec objects. input NeuroVec objects must dimensions. method performs arithmetic operation elements NeuroVec objects. result returned new DenseNeuroVec object. Perform arithmetic operation NeuroVol object SparseNeuroVol object. input NeuroVol SparseNeuroVol objects must dimensions. method performs arithmetic operation values NeuroVol non-zero values SparseNeuroVol. result returned new DenseNeuroVol object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/Arith-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Arithmetic Operations — Arith-methods","text":"","code":"# S4 method for class 'SparseNeuroVol,SparseNeuroVol' Arith(e1, e2)  # S4 method for class 'DenseNeuroVol,DenseNeuroVol' Arith(e1, e2)  # S4 method for class 'DenseNeuroVec,DenseNeuroVec' Arith(e1, e2)  # S4 method for class 'SparseNeuroVol,NeuroVol' Arith(e1, e2)  # S4 method for class 'NeuroVol,SparseNeuroVol' Arith(e1, e2)  # S4 method for class 'NeuroVec,NeuroVec' Arith(e1, e2)  # S4 method for class 'NeuroVol,SparseNeuroVol' Arith(e1, e2)  # S4 method for class 'SparseNeuroVec,SparseNeuroVec' Arith(e1, e2)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/Arith-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Arithmetic Operations — Arith-methods","text":"e1 NeuroVol object. e2 SparseNeuroVol object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/Arith-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Arithmetic Operations — Arith-methods","text":"DenseNeuroVol object representing result arithmetic operation. ROIVol object containing result arithmetic operation e1 e2. SparseNeuroVec object representing result arithmetic operation. DenseNeuroVol object representing result arithmetic operation. DenseNeuroVol object representing result arithmetic operation. DenseNeuroVec object representing result arithmetic operation. DenseNeuroVol object representing result arithmetic operation.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ArrayLike3D-class.html","id":null,"dir":"Reference","previous_headings":"","what":"ArrayLike3D Class — ArrayLike3D-class","title":"ArrayLike3D Class — ArrayLike3D-class","text":"virtual class representing three-dimensional array-like objects. provides common interface 3D array operations.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ArrayLike4D-class.html","id":null,"dir":"Reference","previous_headings":"","what":"ArrayLike4D Class — ArrayLike4D-class","title":"ArrayLike4D Class — ArrayLike4D-class","text":"virtual class representing four-dimensional array-like objects. intended serve base class 4D array representations.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ArrayLike5D-class.html","id":null,"dir":"Reference","previous_headings":"","what":"ArrayLike5D Class — ArrayLike5D-class","title":"ArrayLike5D Class — ArrayLike5D-class","text":"virtual class representing five-dimensional array-like objects. class serves interface objects mimic 5D arrays.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/AxisSet-class.html","id":null,"dir":"Reference","previous_headings":"","what":"AxisSet — AxisSet-class","title":"AxisSet — AxisSet-class","text":"Virtual base class representing ordered set named axes.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/AxisSet-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"AxisSet — AxisSet-class","text":"ndim number axes (dimensions)","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/AxisSet1D-class.html","id":null,"dir":"Reference","previous_headings":"","what":"AxisSet1D — AxisSet1D-class","title":"AxisSet1D — AxisSet1D-class","text":"one-dimensional axis set","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/AxisSet1D-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"AxisSet1D — AxisSet1D-class","text":"first axis","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/AxisSet2D-class.html","id":null,"dir":"Reference","previous_headings":"","what":"AxisSet2D — AxisSet2D-class","title":"AxisSet2D — AxisSet2D-class","text":"two-dimensional axis set representing ordered pair named axes.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/AxisSet2D-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"AxisSet2D — AxisSet2D-class","text":"first axis, inherited AxisSet1D j second axis, class \"NamedAxis\"","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/AxisSet2D-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"AxisSet2D — AxisSet2D-class","text":"","code":"# Create an AxisSet2D object axis1 <- new(\"NamedAxis\", axis = \"x\", direction = 1) axis2 <- new(\"NamedAxis\", axis = \"y\", direction = 1) axisSet2D <- new(\"AxisSet2D\", i = axis1, j = axis2, ndim = 2L)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/AxisSet3D-class.html","id":null,"dir":"Reference","previous_headings":"","what":"AxisSet3D Class — AxisSet3D-class","title":"AxisSet3D Class — AxisSet3D-class","text":"class representing three-dimensional axis set, extending AxisSet2D class additional third axis.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/AxisSet3D-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"AxisSet3D Class — AxisSet3D-class","text":"k NamedAxis object representing third axis.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/AxisSet3D-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"AxisSet3D Class — AxisSet3D-class","text":"","code":"# Create NamedAxis objects for each dimension x_axis <- new(\"NamedAxis\", axis = \"x\", direction = 1) y_axis <- new(\"NamedAxis\", axis = \"y\", direction = 1) z_axis <- new(\"NamedAxis\", axis = \"z\", direction = 1)  # Create an AxisSet3D object axis_set_3d <- new(\"AxisSet3D\", i = x_axis, j = y_axis, k = z_axis, ndim = 3L)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/AxisSet4D-class.html","id":null,"dir":"Reference","previous_headings":"","what":"AxisSet4D Class — AxisSet4D-class","title":"AxisSet4D Class — AxisSet4D-class","text":"class representing four-dimensional axis set, extending AxisSet3D class additional fourth axis.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/AxisSet4D-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"AxisSet4D Class — AxisSet4D-class","text":"l NamedAxis object representing fourth axis.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/AxisSet4D-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"AxisSet4D Class — AxisSet4D-class","text":"","code":"# Create NamedAxis objects for each dimension x_axis <- new(\"NamedAxis\", axis = \"x\", direction = 1) y_axis <- new(\"NamedAxis\", axis = \"y\", direction = 1) z_axis <- new(\"NamedAxis\", axis = \"z\", direction = 1) t_axis <- new(\"NamedAxis\", axis = \"t\", direction = 1)  # Create an AxisSet4D object axis_set_4d <- new(\"AxisSet4D\", i = x_axis, j = y_axis, k = z_axis,                    l = t_axis, ndim = 4L)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/AxisSet5D-class.html","id":null,"dir":"Reference","previous_headings":"","what":"AxisSet5D Class — AxisSet5D-class","title":"AxisSet5D Class — AxisSet5D-class","text":"class representing five-dimensional axis set, extending AxisSet4D class additional fifth axis.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/AxisSet5D-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"AxisSet5D Class — AxisSet5D-class","text":"m NamedAxis object representing fifth axis.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/AxisSet5D-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"AxisSet5D Class — AxisSet5D-class","text":"","code":"# Create NamedAxis objects for each dimension x_axis <- new(\"NamedAxis\", axis = \"x\", direction = 1) y_axis <- new(\"NamedAxis\", axis = \"y\", direction = 1) z_axis <- new(\"NamedAxis\", axis = \"z\", direction = 1) t_axis <- new(\"NamedAxis\", axis = \"t\", direction = 1) v_axis <- new(\"NamedAxis\", axis = \"v\", direction = 1)  # Create an AxisSet5D object axis_set_5d <- new(\"AxisSet5D\", i = x_axis, j = y_axis, k = z_axis,                    l = t_axis, m = v_axis, ndim = 5L)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/BigNeuroVec-class.html","id":null,"dir":"Reference","previous_headings":"","what":"BigNeuroVec Class — BigNeuroVec-class","title":"BigNeuroVec Class — BigNeuroVec-class","text":"class representing sparse four-dimensional brain image backed disk-based big matrix. BigNeuroVec objects designed efficient handling large-scale brain imaging data exceeds available memory.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/BigNeuroVec-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"BigNeuroVec Class — BigNeuroVec-class","text":"BigNeuroVec leverages file-backed storage manage large 4D neuroimaging datasets typically exceed available RAM. combines sparse representation framework AbstractSparseNeuroVec disk-based storage capabilities FBM, allowing --core computations massive datasets.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/BigNeuroVec-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"BigNeuroVec Class — BigNeuroVec-class","text":"data instance class FBM bigstatsr package, containing time-series data. FBM (File-Backed Big Matrix) matrix-like structure stored disk, enabling efficient handling large-scale data.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/BigNeuroVec-class.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"BigNeuroVec Class — BigNeuroVec-class","text":"BigNeuroVec inherits : NeuroVec: Base class 4D brain images AbstractSparseNeuroVec: Provides sparse representation framework ArrayLike4D: Interface 4D array-like operations","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/BigNeuroVec-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"BigNeuroVec Class — BigNeuroVec-class","text":"","code":"if (FALSE) { # \\dontrun{ # Create a BigNeuroVec object library(bigstatsr)  # Create a file-backed big matrix fbm <- FBM(10000, 1000, init = rnorm(10000000))  # Create a mask for sparse representation mask <- LogicalNeuroVol(array(runif(100*100*100) > 0.7, dim=c(100,100,100)))  # Create a BigNeuroVec object big_vec <- BigNeuroVec(data = fbm, mask = mask, space = NeuroSpace(dim=c(100,100,100)))  # Access a subset of the data subset <- big_vec[,,, 1:10] } # }"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/BigNeuroVec-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Memory-Mapped Neuroimaging Vector — BigNeuroVec","title":"Create a Memory-Mapped Neuroimaging Vector — BigNeuroVec","text":"Creates BigNeuroVec object, represents large neuroimaging vector using memory-mapped file storage. allows working neuroimaging data large fit memory.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/BigNeuroVec-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Memory-Mapped Neuroimaging Vector — BigNeuroVec","text":"","code":"BigNeuroVec(   data,   space,   mask,   label = \"\",   type = c(\"double\", \"float\", \"integer\"),   backingfile = tempfile() )"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/BigNeuroVec-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Memory-Mapped Neuroimaging Vector — BigNeuroVec","text":"data input data stored space NeuroSpace object defining spatial properties mask logical mask indicating voxels contain data label Optional character string label vector type Storage type, one \"double\", \"float\", \"integer\" backingfile Path file used memory mapping (defaults tempfile())","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/BigNeuroVec-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Memory-Mapped Neuroimaging Vector — BigNeuroVec","text":"new BigNeuroVec object","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/BigNeuroVec-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Memory-Mapped Neuroimaging Vector — BigNeuroVec","text":"","code":"if (FALSE) { # \\dontrun{ # Load an example 4D brain image example_file <- system.file(\"extdata\", \"global_mask_v4.nii\", package = \"neuroim2\") example_4d_image <- read_vec(example_file)  # Create a mask (e.g., selecting voxels with values > 0) mask <- array(as.vector(example_4d_image[,,,1]) > 0,              dim = dim(example_4d_image)[1:3])  if(requireNamespace(\"bigstatsr\", quietly = TRUE)) {   # Create a BigNeuroVec with memory mapping   big_vec <- BigNeuroVec(data = example_4d_image@.Data,                          space = space(example_4d_image),                          mask = mask,                          label = \"Example BigNeuroVec\")   print(big_vec) } } # }"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/BinaryReader-class.html","id":null,"dir":"Reference","previous_headings":"","what":"BinaryReader Class — BinaryReader-class","title":"BinaryReader Class — BinaryReader-class","text":"Class supporting reading bulk binary data connection","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/BinaryReader-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"BinaryReader Class — BinaryReader-class","text":"input binary input connection byte_offset number bytes skip start input data_type data type binary elements bytes_per_element number bytes data element (e.g. 4 8 floating point numbers) endian endianness binary input connection signed Logical indicating whether data type signed","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/BinaryReader.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Binary Reader Object — BinaryReader","title":"Create Binary Reader Object — BinaryReader","text":"Create new instance BinaryReader class reading bulk binary data.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/BinaryReader.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Binary Reader Object — BinaryReader","text":"","code":"BinaryReader(   input,   byte_offset,   data_type,   bytes_per_element,   endian = .Platform$endian,   signed = TRUE )"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/BinaryReader.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Binary Reader Object — BinaryReader","text":"input Character string (file name) connection object read byte_offset Integer specifying bytes skip start input data_type Character string specifying R data type ('integer', 'double', etc.) bytes_per_element Integer specifying bytes per data element (e.g., 4 8) endian Character string specifying endianness ('big' 'little', default: platform-specific) signed Logical indicating data type signed (default: TRUE)","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/BinaryReader.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Binary Reader Object — BinaryReader","text":"object class BinaryReader","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/BinaryReader.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Binary Reader Object — BinaryReader","text":"","code":"if (FALSE) { # \\dontrun{ # Create reader for double-precision data reader <- BinaryReader(\"data.bin\", byte_offset = 0L,                       data_type = \"double\", bytes_per_element = 8L)                        # Read from existing connection with offset con <- file(\"data.bin\", \"rb\") reader <- BinaryReader(con, byte_offset = 100L,                       data_type = \"integer\", bytes_per_element = 4L) } # }"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/BinaryWriter-class.html","id":null,"dir":"Reference","previous_headings":"","what":"BinaryWriter Class — BinaryWriter-class","title":"BinaryWriter Class — BinaryWriter-class","text":"class supports writing bulk binary data connection","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/BinaryWriter-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"BinaryWriter Class — BinaryWriter-class","text":"output binary output connection byte_offset number bytes skip start input data_type data type binary elements bytes_per_element number bytes data element (e.g. 4 8 floating point numbers) endian endianness binary output connection","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/BinaryWriter.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Binary Writer Object — BinaryWriter","title":"Create Binary Writer Object — BinaryWriter","text":"Create new instance BinaryWriter class writing bulk binary data.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/BinaryWriter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Binary Writer Object — BinaryWriter","text":"","code":"BinaryWriter(   output,   byte_offset,   data_type,   bytes_per_element,   endian = .Platform$endian )"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/BinaryWriter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Binary Writer Object — BinaryWriter","text":"output Character string (file name) connection object write byte_offset Integer specifying bytes skip start output data_type Character string specifying R data type ('integer', 'double', etc.) bytes_per_element Integer specifying bytes per data element (e.g., 4 8) endian Character string specifying endianness ('big' 'little', default: platform-specific)","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/BinaryWriter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Binary Writer Object — BinaryWriter","text":"object class BinaryWriter","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/BinaryWriter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Binary Writer Object — BinaryWriter","text":"","code":"if (FALSE) { # \\dontrun{ # Create writer for double-precision data writer <- BinaryWriter(\"output.bin\", byte_offset = 0L,                       data_type = \"double\", bytes_per_element = 8L)                        # Write to existing connection with offset con <- file(\"output.bin\", \"wb\") writer <- BinaryWriter(con, byte_offset = 100L,                       data_type = \"integer\", bytes_per_element = 4L) } # }"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ClusteredNeuroVol-class.html","id":null,"dir":"Reference","previous_headings":"","what":"ClusteredNeuroVol Class — ClusteredNeuroVol-class","title":"ClusteredNeuroVol Class — ClusteredNeuroVol-class","text":"class represents three-dimensional brain image divided N disjoint partitions clusters. extends SparseNeuroVol class provide efficient storage manipulation clustered neuroimaging data. Construct ClusteredNeuroVol instance","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ClusteredNeuroVol-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ClusteredNeuroVol Class — ClusteredNeuroVol-class","text":"","code":"ClusteredNeuroVol(mask, clusters, label_map = NULL, label = \"\")"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ClusteredNeuroVol-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ClusteredNeuroVol Class — ClusteredNeuroVol-class","text":"mask instance class LogicalNeuroVol clusters vector clusters ids length equal number nonzero voxels mask mask label_map optional list maps cluster id cluster label, e.g. (1 -> \"FFA\", 2 -> \"PPA\") label optional character string used label volume","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ClusteredNeuroVol-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ClusteredNeuroVol Class — ClusteredNeuroVol-class","text":"ClusteredNeuroVol instance","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ClusteredNeuroVol-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ClusteredNeuroVol Class — ClusteredNeuroVol-class","text":"ClusteredNeuroVol class designed efficient representation manipulation brain images distinct, non-overlapping regions clusters. combines memory efficiency sparse representations additional structures managing cluster information. use case ClusteredNeuroVol store volumetric data clustered discrete sets voxels, associated id. example, class can used represent parcellated neuroimaging volumes.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ClusteredNeuroVol-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"ClusteredNeuroVol Class — ClusteredNeuroVol-class","text":"mask LogicalNeuroVol object representing logical mask indicating spatial domain set clusters. clusters integer vector representing cluster number voxel mask. label_map named list element represents cluster name. cluster_map environment object maps cluster id set 1D spatial indices belonging cluster.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ClusteredNeuroVol-class.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"ClusteredNeuroVol Class — ClusteredNeuroVol-class","text":"class inherits methods SparseNeuroVol class. Additional methods specific cluster operations may available.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ClusteredNeuroVol-class.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ClusteredNeuroVol Class — ClusteredNeuroVol-class","text":"ClusteredNeuroVol objects particularly useful : Representing parcellated brain images Storing results clustering algorithms applied neuroimaging data Efficient manipulation analysis region-based neuroimaging data","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ClusteredNeuroVol-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ClusteredNeuroVol Class — ClusteredNeuroVol-class","text":"","code":"if (FALSE) { # \\dontrun{ # Create a simple clustered brain volume dim <- c(10L, 10L, 10L) mask_data <- array(rep(c(TRUE, FALSE), 500), dim) mask <- new(\"LogicalNeuroVol\", .Data = mask_data,             space = NeuroSpace(dim = dim, origin = c(0,0,0), spacing = c(1,1,1)))  clusters <- as.integer(runif(sum(mask_data)) * 5) label_map <- list(\"Cluster1\" = 1, \"Cluster2\" = 2, \"Cluster3\" = 3,                   \"Cluster4\" = 4, \"Cluster5\" = 5)  cluster_map <- new.env() for (i in 1:5) {   cluster_map[[as.character(i)]] <- which(clusters == i) }  clustered_vol <- new(\"ClusteredNeuroVol\",                      mask = mask,                      clusters = clusters,                      label_map = label_map,                      cluster_map = cluster_map) } # }   # Create a simple space and volume space <- NeuroSpace(c(16, 16, 16), spacing = c(1, 1, 1)) vol_data <- array(rnorm(16^3), dim = c(16, 16, 16)) vol <- NeuroVol(vol_data, space)  # Create a binary mask (e.g., values > 0) mask_data <- vol_data > 0 mask_vol <- LogicalNeuroVol(mask_data, space)  # Get coordinates of masked voxels mask_idx <- which(mask_data) coords <- index_to_coord(mask_vol, mask_idx)  # Cluster the coordinates into 10 groups set.seed(123)  # for reproducibility kmeans_result <- kmeans(coords, centers = 10)  # Create the clustered volume clustered_vol <- ClusteredNeuroVol(mask_vol, kmeans_result$cluster)  # Print information about the clusters print(clustered_vol) #>  #> ClusteredNeuroVol  #> ============================================================  #>  #>  > Type:           Clustered Volume  #>  > Dimensions:     16 x 16 x 16  #>  > Spacing:        1 x 1 x 1   mm  #>  > Origin:         0 x 0 x 0   mm  #>  > Orientation:    Left-to-Right Posterior-to-Anterior Inferior-to-Superior  #>  #>  Cluster Information  #> ----------------------------------------  #>  > Total Clusters: 10  #>  > Active Voxels:  2033   (49.6% of volume)  #>  #>  Region Labels  #> ----------------------------------------  #>  >  Clus_1               [1]  #>  >  Clus_2               [2]  #>  >  Clus_3               [3]  #>  >  Clus_4               [4]  #>  >  Clus_5               [5]  #>    ... and 5 more regions #>"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ColumnReader-class.html","id":null,"dir":"Reference","previous_headings":"","what":"ColumnReader — ColumnReader-class","title":"ColumnReader — ColumnReader-class","text":"class supports reading data matrix-like storage format, file database, column-wise manner.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ColumnReader-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"ColumnReader — ColumnReader-class","text":"nrow integer representing number rows matrix-like storage. ncol integer representing number columns matrix-like storage. reader function takes set column indices input returns matrix containing requested columns storage.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ColumnReader.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Column Reader Object — ColumnReader","title":"Create Column Reader Object — ColumnReader","text":"Create new instance ColumnReader class reading column-oriented data.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ColumnReader.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Column Reader Object — ColumnReader","text":"","code":"ColumnReader(nrow, ncol, reader)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ColumnReader.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Column Reader Object — ColumnReader","text":"nrow Integer specifying number rows data ncol Integer specifying number columns data reader Function takes column indices returns matrix","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ColumnReader.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Column Reader Object — ColumnReader","text":"object class ColumnReader","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ColumnReader.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Column Reader Object — ColumnReader","text":"","code":"if (FALSE) { # \\dontrun{ reader_func <- function(cols) {   matrix(rnorm(100 * length(cols)), 100, length(cols)) } col_reader <- ColumnReader(nrow = 100L, ncol = 10L, reader = reader_func) } # }"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/Compare-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Comparison Operations — Compare-methods","title":"Comparison Operations — Compare-methods","text":"Methods comparing neuroimaging objects method compares two NeuroVec objects (e1 e2) using generic comparison function. dimensions objects checked compatibility performing comparison.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/Compare-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Comparison Operations — Compare-methods","text":"","code":"# S4 method for class 'SparseNeuroVol,numeric' Compare(e1, e2)  # S4 method for class 'numeric,SparseNeuroVol' Compare(e1, e2)  # S4 method for class 'NeuroVec,NeuroVec' Compare(e1, e2)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/Compare-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Comparison Operations — Compare-methods","text":"e1 NeuroVec object compared. e2 NeuroVec object compared.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/Compare-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Comparison Operations — Compare-methods","text":"result comparison SparseNeuroVol object's data numeric value. result comparison e1 e2.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/DenseNeuroVec-class.html","id":null,"dir":"Reference","previous_headings":"","what":"DenseNeuroVec Class — DenseNeuroVec-class","title":"DenseNeuroVec Class — DenseNeuroVec-class","text":"class representing four-dimensional brain image, backed dense array. class designed neuroimaging data voxels contain non-zero values. function constructs DenseNeuroVec object, represents dense four-dimensional brain image. handles various input data formats ensures proper dimensionality.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/DenseNeuroVec-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DenseNeuroVec Class — DenseNeuroVec-class","text":"","code":"DenseNeuroVec(data, space, label = \"none\")"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/DenseNeuroVec-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DenseNeuroVec Class — DenseNeuroVec-class","text":"data image data. can : 4-dimensional array 2-dimensional matrix (either nvoxels x ntime-points         ntime-points x nvoxels) vector (reshaped match space dimensions) space NeuroSpace object defining spatial properties image. label character string providing label DenseNeuroVec object. Default empty string.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/DenseNeuroVec-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DenseNeuroVec Class — DenseNeuroVec-class","text":"concrete instance DenseNeuroVec class.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/DenseNeuroVec-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"DenseNeuroVec Class — DenseNeuroVec-class","text":"DenseNeuroVec objects store data dense array format, efficient operations require frequent access voxels. class inherits NeuroVec array classes, combining spatial information array-based storage. function performs several operations based input data type: matrix input: determines correct orientation (voxels x time time x voxels)     reshapes accordingly. necessary, adds 4th dimension space object. vector input: reshapes data match dimensions specified space object. array input: ensures dimensions match specified space object. Note label parameter currently used object creation, included potential future use consistency constructors.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/DenseNeuroVec-class.html","id":"validity","dir":"Reference","previous_headings":"","what":"Validity","title":"DenseNeuroVec Class — DenseNeuroVec-class","text":"DenseNeuroVec object considered valid : underlying data four-dimensional array.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/DenseNeuroVec-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DenseNeuroVec Class — DenseNeuroVec-class","text":"","code":"if (FALSE) { # \\dontrun{ # Create a simple 4D brain image data <- array(rnorm(64*64*32*10), dim = c(64, 64, 32, 10)) space <- NeuroSpace(dim = c(64, 64, 32,10), origin = c(0, 0, 0), spacing = c(3, 3, 4)) dense_vec <- new(\"DenseNeuroVec\", .Data = data, space = space)  # Access dimensions dim(dense_vec)  # Extract a single 3D volume first_volume <- dense_vec[[1]] } # }  # Create a simple 4D brain image dim <- c(64, 64, 32, 10)  # 64x64x32 volume with 10 time points data <- array(rnorm(prod(dim)), dim) space <- NeuroSpace(dim, spacing = c(3, 3, 4))  # Create a DenseNeuroVec object dense_vec <- DenseNeuroVec(data = data, space = space, label = \"Example\") print(dense_vec) #>  #> DenseNeuroVec (10.01 bytes MB) #>  #> - Spatial Info --------------------------- #> | Dimensions    : 64 x 64 x 32 (10 timepoints) #> | Total Voxels  : 131,072 #> | Spacing       : 3 x 3 x 4 #>  #> - Properties --------------------------- #> | Origin        : 0 x 0 x 0 #> | Orientation   : Left-to-Right Posterior-to-Anterior Inferior-to-Superior #>  #> - Statistics --------------------------- #>     Mean +/- SD    : 0.002 +/- 1 #>  #> Label: Example #>   # Create from a matrix (voxels x time) mat_data <- matrix(rnorm(prod(dim)), nrow = prod(dim[1:3]), ncol = dim[4]) dense_vec_mat <- DenseNeuroVec(data = mat_data, space = space) print(dense_vec_mat) #>  #> DenseNeuroVec (10.01 bytes MB) #>  #> - Spatial Info --------------------------- #> | Dimensions    : 64 x 64 x 32 (10 timepoints) #> | Total Voxels  : 131,072 #> | Spacing       : 3 x 3 x 4 #>  #> - Properties --------------------------- #> | Origin        : 0 x 0 x 0 #> | Orientation   : Left-to-Right Posterior-to-Anterior Inferior-to-Superior #>  #> - Statistics --------------------------- #>     Mean +/- SD    : -0.005 +/- 0.996 #>  #> Label: none #>"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/DenseNeuroVol-class.html","id":null,"dir":"Reference","previous_headings":"","what":"DenseNeuroVol Class — DenseNeuroVol-class","title":"DenseNeuroVol Class — DenseNeuroVol-class","text":"Represents three-dimensional brain image backed dense array. class combines spatial properties NeuroVol data storage capabilities array. Construct DenseNeuroVol instance","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/DenseNeuroVol-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DenseNeuroVol Class — DenseNeuroVol-class","text":"","code":"DenseNeuroVol(data, space, label = \"\", indices = NULL)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/DenseNeuroVol-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DenseNeuroVol Class — DenseNeuroVol-class","text":"data three-dimensional array space instance class NeuroSpace label character string indices optional 1-d index vector","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/DenseNeuroVol-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DenseNeuroVol Class — DenseNeuroVol-class","text":"DenseNeuroVol instance","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/DenseNeuroVol-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"DenseNeuroVol Class — DenseNeuroVol-class","text":"DenseNeuroVol objects used 3D brain images voxels contain meaningful data. provide efficient access individual voxel values suitable operations require frequent random access voxel data.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/DenseNeuroVol-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DenseNeuroVol Class — DenseNeuroVol-class","text":"","code":"# Create a simple 3D brain volume vol_data <- array(rnorm(64*64*64), c(64, 64, 64)) vol_space <- NeuroSpace(dim=c(64L, 64L, 64L), origin=c(0, 0, 0), spacing=c(1, 1, 1)) brain_vol <- new(\"DenseNeuroVol\", .Data=vol_data, space=vol_space)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/FileBackedNeuroVec-class.html","id":null,"dir":"Reference","previous_headings":"","what":"FileBackedNeuroVec Class — FileBackedNeuroVec-class","title":"FileBackedNeuroVec Class — FileBackedNeuroVec-class","text":"class representing four-dimensional brain image uses -demand loading memory-mapped file access. approach enables efficient handling large-scale brain imaging data loading required portions data memory needed. FileBackedNeuroVec class represents memory-efficient vector neuroimaging data stored disk rather memory. particularly useful large datasets memory constraints concern.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/FileBackedNeuroVec-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"FileBackedNeuroVec Class — FileBackedNeuroVec-class","text":"FileBackedNeuroVec objects provide memory-efficient solution working large 4D neuroimaging datasets. utilizing memory-mapped file access, class allows users work datasets exceed available RAM, loading necessary data segments memory accessed.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/FileBackedNeuroVec-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"FileBackedNeuroVec Class — FileBackedNeuroVec-class","text":"meta instance class FileMetaInfo containing file metadata file path, format, associated information.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/FileBackedNeuroVec-class.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"FileBackedNeuroVec Class — FileBackedNeuroVec-class","text":"FileBackedNeuroVec inherits : NeuroVec: Base class 4D brain images ArrayLike4D: Interface 4D array-like operations","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/FileBackedNeuroVec-class.html","id":"memory-management","dir":"Reference","previous_headings":"","what":"Memory Management","title":"FileBackedNeuroVec Class — FileBackedNeuroVec-class","text":"Data read disk -demand, reducing memory usage compared -memory storage. trade-slightly slower access times due disk /O operations.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/FileBackedNeuroVec-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"FileBackedNeuroVec Class — FileBackedNeuroVec-class","text":"","code":"if (FALSE) { # \\dontrun{ # Create a FileBackedNeuroVec object file_path <- \"/path/to/large/brain/image.nii.gz\" file_meta <- FileMetaInfo(file_path, format = \"NIFTI\") file_backed_vec <- FileBackedNeuroVec(meta = file_meta)  # Access a subset of the data (this will load only the required portion) subset <- file_backed_vec[,,, 1:10] } # }"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/FileBackedNeuroVec.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a File-Backed Neuroimaging Vector — FileBackedNeuroVec","title":"Create a File-Backed Neuroimaging Vector — FileBackedNeuroVec","text":"Constructs FileBackedNeuroVec instance, represents file-backed neuroimaging vector object. constructor provides memory-efficient access large neuroimaging datasets keeping data disk needed.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/FileBackedNeuroVec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a File-Backed Neuroimaging Vector — FileBackedNeuroVec","text":"","code":"FileBackedNeuroVec(file_name, label = basename(file_name))"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/FileBackedNeuroVec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a File-Backed Neuroimaging Vector — FileBackedNeuroVec","text":"file_name character string specifying path neuroimaging file. Supported formats include NIFTI (.nii) ANALYZE (.hdr/.img). label Optional character string providing label vector","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/FileBackedNeuroVec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a File-Backed Neuroimaging Vector — FileBackedNeuroVec","text":"new instance class FileBackedNeuroVec.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/FileBackedNeuroVec.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a File-Backed Neuroimaging Vector — FileBackedNeuroVec","text":"Create FileBackedNeuroVec Object function performs following operations: Reads header information specified file Validates dimensionality (must 4D data) Creates NeuroSpace object appropriate metadata Initializes file-backed vector minimal memory footprint","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/FileBackedNeuroVec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a File-Backed Neuroimaging Vector — FileBackedNeuroVec","text":"","code":"if (FALSE) { # \\dontrun{ # Create a file-backed vector from a NIFTI file fbvec <- FileBackedNeuroVec(\"path/to/fmri_data.nii\")  # Access specific volumes without loading entire dataset first_vol <- sub_vector(fbvec, 1) } # }"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/FileFormat-class.html","id":null,"dir":"Reference","previous_headings":"","what":"FileFormat Class — FileFormat-class","title":"FileFormat Class — FileFormat-class","text":"class represents neuroimaging file format descriptor, containing information file format, encoding, extensions header data components.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/FileFormat-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"FileFormat Class — FileFormat-class","text":"file_format character string specifying name file format (e.g., \"NIfTI\"). header_encoding character string specifying file encoding header file (e.g., \"raw\" binary, \"gzip\" gz compressed). header_extension character string specifying file extension header file (e.g., \"nii\" NIfTI single files). data_encoding character string specifying file encoding data file. data_extension character string specifying file extension data file (e.g., \"nii\" NIfTI single files).","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/FileFormat-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"FileFormat Class — FileFormat-class","text":"","code":"# Create a FileFormat object for NIfTI format nifti_format <- new(\"FileFormat\",                     file_format = \"NIfTI\",                     header_encoding = \"raw\",                     header_extension = \"nii\",                     data_encoding = \"raw\",                     data_extension = \"nii\")"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/FileFormat-operations.html","id":null,"dir":"Reference","previous_headings":"","what":"File Format Operations for Neuroimaging Data — FileFormat-operations","title":"File Format Operations for Neuroimaging Data — FileFormat-operations","text":"collection methods handling neuroimaging file formats separate header data files (e.g., ANALYZE, NIFTI). methods provide functionality file name validation, extension handling, file path manipulation.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/FileFormat-operations.html","id":"file-format-structure","dir":"Reference","previous_headings":"","what":"File Format Structure","title":"File Format Operations for Neuroimaging Data — FileFormat-operations","text":"Neuroimaging formats often use paired files: header file (e.g., '.hdr') containing metadata data file (e.g., '.img') containing actual image data","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/FileFormat-operations.html","id":"common-operations","dir":"Reference","previous_headings":"","what":"Common Operations","title":"File Format Operations for Neuroimaging Data — FileFormat-operations","text":"Validating file names format specifications Converting header data file names Checking file existence compatibility","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/FileMetaInfo-class.html","id":null,"dir":"Reference","previous_headings":"","what":"FileMetaInfo Class — FileMetaInfo-class","title":"FileMetaInfo Class — FileMetaInfo-class","text":"class extends MetaInfo include file-specific metadata neuroimaging data files. class extends FileMetaInfo NIfTI-specific metadata. class extends FileMetaInfo AFNI-specific metadata.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/FileMetaInfo-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"FileMetaInfo Class — FileMetaInfo-class","text":"header_file character string specifying name file containing meta information. data_file character string specifying name file containing image data. descriptor FileFormat object describing image file format. endian character string specifying byte order data ('little' 'big'). data_offset numeric value indicating number bytes preceding start image data data file. bytes_per_element integer specifying number bytes per data element. intercept numeric vector constant values added image data (one per sub-image). slope numeric vector multipliers image data (one per sub-image). header list format-specific attributes. nifti_header list attributes specific NIfTI file format. afni_header list attributes specific AFNI file format.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/FileSource-class.html","id":null,"dir":"Reference","previous_headings":"","what":"FileSource Class — FileSource-class","title":"FileSource Class — FileSource-class","text":"Base class representing data source images. purpose class provide layer low level IO image loading functionality.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/FileSource-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"FileSource Class — FileSource-class","text":"meta_info object class FileMetaInfo containing meta information data source.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/IndexLookupVol-class.html","id":null,"dir":"Reference","previous_headings":"","what":"IndexLookupVol Class — IndexLookupVol-class","title":"IndexLookupVol Class — IndexLookupVol-class","text":"three-dimensional brain image class serves map 1D grid indices table values. class primarily used conjunction SparseNeuroVec class efficiently represent access sparse neuroimaging data. IndexLookupVol class provides efficient indexing coordinate lookup functionality 3D neuroimaging data. maintains mapping linear indices 3D coordinates, optimizing memory usage access speed sparse volumes. Creates IndexLookupVol object, provides efficient bidirectional mapping linear indices 3D coordinates neuroimaging volume. particularly useful working masked sparse brain volumes.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/IndexLookupVol-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"IndexLookupVol Class — IndexLookupVol-class","text":"","code":"IndexLookupVol(space, indices)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/IndexLookupVol-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"IndexLookupVol Class — IndexLookupVol-class","text":"space NeuroSpace object defining 3D space dimensions, spacing, orientation. indices integer vector containing linear indices voxels include lookup volume. 1-based indices within range space.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/IndexLookupVol-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"IndexLookupVol Class — IndexLookupVol-class","text":"object class IndexLookupVol containing: mapping linear indices sparse positions original space information subset included voxel indices","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/IndexLookupVol-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"IndexLookupVol Class — IndexLookupVol-class","text":"IndexLookupVol class extends NeuroVol provides mechanism efficient lookup mapping sparse 3D neuroimaging data. stores indices non-zero voxels corresponding mappings, allowing memory-efficient representation large, sparse brain images. Create IndexLookupVol Object","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/IndexLookupVol-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"IndexLookupVol Class — IndexLookupVol-class","text":"space NeuroSpace object representing 3D space brain image. indices integer vector containing 1D indices non-zero voxels grid. map integer vector containing mapping 1D indices table values.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/IndexLookupVol-class.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"IndexLookupVol Class — IndexLookupVol-class","text":"class inherits methods NeuroVol. Additional methods specific index lookup mapping operations may available.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/IndexLookupVol-class.html","id":"implementation-details","dir":"Reference","previous_headings":"","what":"Implementation Details","title":"IndexLookupVol Class — IndexLookupVol-class","text":"class uses integer mapping array O(1) lookups linear indices corresponding positions sparse representation.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/IndexLookupVol-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"IndexLookupVol Class — IndexLookupVol-class","text":"","code":"# Create a NeuroSpace object space <- NeuroSpace(dim = c(2L, 2L, 2L), origin = c(0, 0, 0), spacing = c(1, 1, 1))  # Create a 3D mask mask <- array(c(TRUE, FALSE, TRUE, FALSE, FALSE, TRUE, FALSE, TRUE), dim = c(2, 2, 2))  # Create indices and map for the IndexLookupVol indices <- which(mask) map <- seq_along(indices)  # Create an IndexLookupVol object ilv <- IndexLookupVol(space = space, indices = as.integer(indices))  # Access the indices print(ilv@indices) #> [1] 1 3 6 8  # Access the map print(ilv@map) #> [1] 1 0 2 0 0 3 0 4  if (FALSE) { # \\dontrun{ # Create a 64x64x64 space space <- NeuroSpace(c(64, 64, 64), c(1, 1, 1), c(0, 0, 0))  # Create a lookup volume with random indices indices <- sample(1:262144, 10000)  # Select 10000 random voxels ilv <- IndexLookupVol(space, indices)  # Look up coordinates for specific indices coords <- coords(ilv, indices[1:10]) } # }"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/Kernel-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Kernel — Kernel-class","title":"Kernel — Kernel-class","text":"class representing image kernel image processing, convolution filtering operations brain images.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/Kernel-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Kernel — Kernel-class","text":"width numeric value representing width kernel voxels. width typically odd number maintain symmetry. weights numeric vector containing weights associated voxel kernel. voxels matrix containing relative voxel coordinates kernel. row represents voxel coordinate (x, y, z). coords matrix containing relative real-world coordinates kernel, corresponding voxel coordinates.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/Kernel.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Kernel object from a function of distance from kernel center — Kernel","title":"Create a Kernel object from a function of distance from kernel center — Kernel","text":"function creates Kernel object using kernel function (FUN) takes distance center kernel first argument.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/Kernel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Kernel object from a function of distance from kernel center — Kernel","text":"","code":"Kernel(kerndim, vdim, FUN = dnorm, ...)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/Kernel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Kernel object from a function of distance from kernel center — Kernel","text":"kerndim numeric vector representing dimensions voxels kernel. vdim numeric vector representing dimensions voxels real units. FUN kernel function taking first argument representing distance center kernel (default: dnorm). ... Additional parameters kernel function, FUN.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/Kernel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Kernel object from a function of distance from kernel center — Kernel","text":"Kernel object specified dimensions, voxel dimensions, kernel function.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/Kernel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Kernel object from a function of distance from kernel center — Kernel","text":"","code":"kdim <- c(3, 3, 3) vdim <- c(1, 1, 1) k <- Kernel(kerndim = kdim, vdim = vdim, FUN = dnorm, sd = 1)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/LogicalNeuroVol-class.html","id":null,"dir":"Reference","previous_headings":"","what":"LogicalNeuroVol Class — LogicalNeuroVol-class","title":"LogicalNeuroVol Class — LogicalNeuroVol-class","text":"class represents three-dimensional brain image values either TRUE FALSE. particularly useful creating managing binary masks brain images. function constructs LogicalNeuroVol instance.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/LogicalNeuroVol-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"LogicalNeuroVol Class — LogicalNeuroVol-class","text":"","code":"LogicalNeuroVol(data, space, label = \"\", indices = NULL)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/LogicalNeuroVol-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"LogicalNeuroVol Class — LogicalNeuroVol-class","text":"data three-dimensional array, 1D vector length equal prod(dim(space)), set indices elements TRUE. space instance class NeuroSpace. label character string. indices optional 1-d index vector.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/LogicalNeuroVol-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"LogicalNeuroVol Class — LogicalNeuroVol-class","text":"LogicalNeuroVol instance.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/LogicalNeuroVol-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"LogicalNeuroVol Class — LogicalNeuroVol-class","text":"LogicalNeuroVol class extends DenseNeuroVol class, inheriting spatial properties array-based storage. However, constrains values logical (TRUE FALSE), making ideal representing binary masks, regions interest (ROIs), segmentation results neuroimaging analyses.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/LogicalNeuroVol-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"LogicalNeuroVol Class — LogicalNeuroVol-class","text":".Data logical array containing binary volume data. space NeuroSpace object defining spatial properties volume.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/LogicalNeuroVol-class.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"LogicalNeuroVol Class — LogicalNeuroVol-class","text":"class inherits methods DenseNeuroVol. Additional methods specific logical operations may available.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/LogicalNeuroVol-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"LogicalNeuroVol Class — LogicalNeuroVol-class","text":"","code":"# Create a simple logical brain volume (e.g., a mask) dim <- c(64L, 64L, 64L) mask_data <- array(sample(c(TRUE, FALSE), prod(dim), replace = TRUE), dim) mask_space <- NeuroSpace(dim = dim, origin = c(0, 0, 0), spacing = c(1, 1, 1)) brain_mask <- new(\"LogicalNeuroVol\", .Data = mask_data, space = mask_space)  # Check the proportion of TRUE voxels true_proportion <- sum(brain_mask) / prod(dim(brain_mask)) print(paste(\"Proportion of TRUE voxels:\", true_proportion)) #> [1] \"Proportion of TRUE voxels: 0.498985290527344\"  # Load an example brain mask brain_mask <- read_vol(system.file(\"extdata\", \"global_mask_v4.nii\", package=\"neuroim2\"))  # Convert the brain mask to a LogicalNeuroVol logical_vol <- LogicalNeuroVol(brain_mask, space(brain_mask))"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/MappedNeuroVec-class.html","id":null,"dir":"Reference","previous_headings":"","what":"MappedNeuroVec Class — MappedNeuroVec-class","title":"MappedNeuroVec Class — MappedNeuroVec-class","text":"class representing four-dimensional brain image backed memory-mapped file. class provides efficient access large brain images without loading entire dataset memory. MappedNeuroVec class provides memory-efficient access large neuroimaging datasets memory mapping. allows processing datasets larger available RAM keeping data disk loading requested portions memory. Creates MappedNeuroVec object provides efficient, memory-mapped access large neuroimaging datasets. allows processing data larger available RAM keeping disk loading requested portions memory.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/MappedNeuroVec-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MappedNeuroVec Class — MappedNeuroVec-class","text":"","code":"MappedNeuroVec(file_name, label = basename(file_name))"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/MappedNeuroVec-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MappedNeuroVec Class — MappedNeuroVec-class","text":"file_name Character string specifying path neuroimaging file. Supported formats include NIFTI (.nii) ANALYZE (.hdr/.img). label Optional character string providing label vector","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/MappedNeuroVec-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MappedNeuroVec Class — MappedNeuroVec-class","text":"new MappedNeuroVec object providing: Memory-mapped access data Spatial temporal indexing Efficient data extraction Automatic memory management","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/MappedNeuroVec-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"MappedNeuroVec Class — MappedNeuroVec-class","text":"MappedNeuroVec objects use memory-mapped files store access large 4D brain images efficiently. approach allows rapid access specific portions data without requiring entire dataset loaded memory . Create Memory-Mapped Neuroimaging Vector function implements several key features: Zero-copy access file data Automatic memory management Support large datasets Efficient random access Proper cleanup object deletion Memory mapping particularly useful : Working large datasets portions data needed Random access required Multiple processes need share data","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/MappedNeuroVec-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"MappedNeuroVec Class — MappedNeuroVec-class","text":"filemap object class mmap representing memory-mapped file containing brain image data. offset integer representing byte offset within memory-mapped file brain image data starts.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/MappedNeuroVec-class.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"MappedNeuroVec Class — MappedNeuroVec-class","text":"class inherits methods NeuroVec implements ArrayLike4D interface. Additional methods specific memory-mapped operations may available.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/MappedNeuroVec-class.html","id":"implementation-details","dir":"Reference","previous_headings":"","what":"Implementation Details","title":"MappedNeuroVec Class — MappedNeuroVec-class","text":"class uses mmap package establish memory mapping file memory space. Key features include: Zero-copy access file data Automatic memory management Support large datasets Efficient random access","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/MappedNeuroVec-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"MappedNeuroVec Class — MappedNeuroVec-class","text":"","code":"if (FALSE) { # \\dontrun{ # Create a MappedNeuroVec object (pseudo-code) file_path <- \"/path/to/large/brain/image.dat\" mapped_vec <- MappedNeuroVec(file_path, dim = c(64, 64, 32, 100))  # Access a subset of the data subset <- mapped_vec[,,, 1:10] } # }  if (FALSE) { # \\dontrun{ # Create mapped vector from NIFTI file mvec <- MappedNeuroVec(\"path/to/fmri.nii\")  # Extract first volume vol1 <- mvec[[1]]  # Get dimensions dim(mvec)  # Access specific timepoint timepoint <- mvec[, , , 10] } # }"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/MappedNeuroVecSource-class.html","id":null,"dir":"Reference","previous_headings":"","what":"MappedNeuroVecSource Class — MappedNeuroVecSource-class","title":"MappedNeuroVecSource Class — MappedNeuroVecSource-class","text":"class used produce MappedNeuroVec instance. encapsulates necessary information create memory-mapped representation 4D neuroimaging dataset. Creates MappedNeuroVecSource object manages memory mapping neuroimaging file memory space. typically used internally MappedNeuroVec can created directly custom access patterns.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/MappedNeuroVecSource-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MappedNeuroVecSource Class — MappedNeuroVecSource-class","text":"","code":"MappedNeuroVecSource(file_name)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/MappedNeuroVecSource-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MappedNeuroVecSource Class — MappedNeuroVecSource-class","text":"file_name Character string specifying path neuroimaging file. Supported formats include NIFTI (.nii) ANALYZE (.hdr/.img).","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/MappedNeuroVecSource-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MappedNeuroVecSource Class — MappedNeuroVecSource-class","text":"new MappedNeuroVecSource object containing: Meta information dataset File format details Dimensional information","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/MappedNeuroVecSource-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"MappedNeuroVecSource Class — MappedNeuroVecSource-class","text":"MappedNeuroVecSource acts factory MappedNeuroVec objects. additional slots beyond parent class, specifies intent create memory-mapped representation neuroimaging data. class typically used data loading pipelines large datasets need accessed efficiently without loading entire dataset memory. Create Memory-Mapped Source Neuroimaging Data function performs several important checks: Validates file existence permissions Reads validates header information Ensures proper dimensionality (>= 3D) Verifies file format compatibility","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/MappedNeuroVecSource-class.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"MappedNeuroVecSource Class — MappedNeuroVecSource-class","text":"MappedNeuroVecSource inherits : NeuroVecSource: Base class NeuroVec source objects","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/MappedNeuroVecSource-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"MappedNeuroVecSource Class — MappedNeuroVecSource-class","text":"","code":"if (FALSE) { # \\dontrun{ # Create a MappedNeuroVecSource mapped_source <- new(\"MappedNeuroVecSource\")  # Use the source to create a MappedNeuroVec (pseudo-code) # file_path <- \"/path/to/large/brain/image.nii\" # mapped_vec <- create_mapped_neuro_vec(mapped_source, file_path) } # }  if (FALSE) { # \\dontrun{ # Create source from NIFTI file source <- MappedNeuroVecSource(\"path/to/fmri.nii\")  # Check dimensions dim(source@meta_info)  # View header information str(source@meta_info) } # }"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/MetaInfo-class.html","id":null,"dir":"Reference","previous_headings":"","what":"MetaInfo Class — MetaInfo-class","title":"MetaInfo Class — MetaInfo-class","text":"class encapsulates meta information neuroimaging data types, including spatial temporal characteristics, data type, labeling.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/MetaInfo-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"MetaInfo Class — MetaInfo-class","text":"MetaInfo class provides structured way store access essential metadata neuroimaging data. includes information data type, spatial temporal dimensions, voxel spacing, coordinate system origin.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/MetaInfo-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"MetaInfo Class — MetaInfo-class","text":"data_type character string specifying data type code (e.g., \"FLOAT\", \"INT\"). dims numeric vector representing image dimensions. spatial_axes AxisSet3D object representing image axes spatial dimensions (x, y, z). additional_axes AxisSet object representing axes dimensions beyond spatial (e.g., time, color band, direction). spacing numeric vector representing voxel dimensions real-world units. origin numeric vector representing coordinate origin. label character vector containing name(s) images data series.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/MetaInfo-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"MetaInfo Class — MetaInfo-class","text":"","code":"# Create a MetaInfo object meta_info <- new(\"MetaInfo\",                  data_type = \"FLOAT\",                  dims = c(64, 64, 32, 100),                  spatial_axes = new(\"AxisSet3D\"),                  additional_axes = new(\"AxisSet\"),                  spacing = c(3, 3, 4),                  origin = c(0, 0, 0),                  label = \"fMRI_run1\")"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/MetaInfo.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Neuroimaging Metadata Object — MetaInfo","title":"Create Neuroimaging Metadata Object — MetaInfo","text":"Creates MetaInfo object containing essential metadata neuroimaging data,   including dimensions, spacing, orientation, data type information.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/MetaInfo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Neuroimaging Metadata Object — MetaInfo","text":"","code":"MetaInfo(   Dim,   spacing,   origin = rep(0, length(spacing)),   data_type = \"FLOAT\",   label = \"\",   spatial_axes = OrientationList3D$AXIAL_LPI,   additional_axes = NullAxis )"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/MetaInfo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Neuroimaging Metadata Object — MetaInfo","text":"Dim Integer vector. Image dimensions (e.g., c(64, 64, 32) 3D). spacing Numeric vector. Voxel dimensions mm. origin Numeric vector. Coordinate origin. Default zero vector. data_type Character. Data type (e.g., \"FLOAT\", \"SHORT\"). Default \"FLOAT\". label Character. Image label(s). Default \"\". spatial_axes Object. Spatial orientation. Default OrientationList3D$AXIAL_LPI. additional_axes Object. Non-spatial axes. Default NullAxis.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/MetaInfo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Neuroimaging Metadata Object — MetaInfo","text":"MetaInfo object","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/MetaInfo.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create Neuroimaging Metadata Object — MetaInfo","text":"Create MetaInfo Object MetaInfo object fundamental : Spatial interpretation image data Data type handling conversion Memory allocation mapping File /O operations Input validation ensures: Dimensions positive integers Spacing values positive Origin coordinates finite Data type supported","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/MetaInfo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Neuroimaging Metadata Object — MetaInfo","text":"","code":"# Create metadata for 3D structural MRI meta <- MetaInfo(   Dim = c(256, 256, 180),   spacing = c(1, 1, 1),   data_type = \"FLOAT\",   label = \"T1w\" )  # Get image dimensions dim(meta) #> NULL  # Get transformation matrix trans(meta) #>      [,1] [,2] [,3] [,4] #> [1,]    1    0    0    0 #> [2,]    0    1    0    0 #> [3,]    0    0    1    0 #> [4,]    0    0    0    1"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NIFTIMetaInfo.html","id":null,"dir":"Reference","previous_headings":"","what":"Create NIFTI Format Metadata Object — NIFTIMetaInfo","title":"Create NIFTI Format Metadata Object — NIFTIMetaInfo","text":"Creates NIFTIMetaInfo object containing format-specific metadata   NIFTI format neuroimaging files.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NIFTIMetaInfo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create NIFTI Format Metadata Object — NIFTIMetaInfo","text":"","code":"NIFTIMetaInfo(descriptor, nifti_header)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NIFTIMetaInfo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create NIFTI Format Metadata Object — NIFTIMetaInfo","text":"descriptor NIFTIFormat object specifying file format details nifti_header List containing NIFTI header information","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NIFTIMetaInfo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create NIFTI Format Metadata Object — NIFTIMetaInfo","text":"NIFTIMetaInfo object","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NIFTIMetaInfo.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create NIFTI Format Metadata Object — NIFTIMetaInfo","text":"Create NIFTIMetaInfo Object NIFTIMetaInfo object extends MetaInfo NIFTI-specific features: NIFTI header fields (qform, sform matrices) Data scaling (slope, intercept) File organization (separate vs. single file) Orientation information Validation ensures: Valid NIFTI format Consistent dimensions Valid transformation matrices Proper data scaling","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NIFTIMetaInfo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create NIFTI Format Metadata Object — NIFTIMetaInfo","text":"","code":"if (FALSE) { # \\dontrun{ # Read NIFTI header header <- readNIftiHeader(\"brain.nii\")  # Create format descriptor fmt <- NIFTIFormat()  # Create metadata meta <- NIFTIMetaInfo(fmt, header)  # Check dimensions dim(meta) } # }"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NamedAxis-class.html","id":null,"dir":"Reference","previous_headings":"","what":"NamedAxis — NamedAxis-class","title":"NamedAxis — NamedAxis-class","text":"class represents axis name attribute","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NamedAxis-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"NamedAxis — NamedAxis-class","text":"axis name axis direction axis (-1,+1)","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroBucket-class.html","id":null,"dir":"Reference","previous_headings":"","what":"NeuroBucket — NeuroBucket-class","title":"NeuroBucket — NeuroBucket-class","text":"four-dimensional image consists sequence labeled image volumes backed list","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroBucket-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"NeuroBucket — NeuroBucket-class","text":"labels names sub-volumes contained bucket data list NeuroVol instances names corresponding volume labels","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroHyperVec-class.html","id":null,"dir":"Reference","previous_headings":"","what":"NeuroHyperVec Class — NeuroHyperVec-class","title":"NeuroHyperVec Class — NeuroHyperVec-class","text":"class representing five-dimensional brain image, first three dimensions spatial, fourth dimension typically time trials, fifth dimension represents features within trial. NeuroHyperVec class provides efficient container five-dimensional neuroimaging data spatial dimensions sparse. particularly suited analyses involving multiple features per trial/timepoint, basis functions, spectral components, multi-modal measurements.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroHyperVec-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NeuroHyperVec Class — NeuroHyperVec-class","text":"","code":"# S4 method for class 'NeuroHyperVec,ANY,ANY,ANY' x[i, j, k, l, m, ..., drop = TRUE]"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroHyperVec-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"NeuroHyperVec Class — NeuroHyperVec-class","text":"x NeuroHyperVec object , j, k, l, m Indices dimension ... Additional arguments (used) drop Whether drop dimensions length 1","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroHyperVec-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"NeuroHyperVec Class — NeuroHyperVec-class","text":"subset NeuroHyperVec data.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroHyperVec-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"NeuroHyperVec Class — NeuroHyperVec-class","text":"Five-Dimensional Sparse Neuroimaging Data Container class organizes data 5D structure: Dimensions 1-3: Spatial coordinates (x, y, z) Dimension 4: Trials timepoints Dimension 5: Features measurements Data stored internally three-dimensional array efficiency: Dimensions 1: Features (dimension 5) Dimensions 2: Trials (dimension 4) Dimensions 3: Voxels (flattened spatial) Key features: Memory-efficient sparse storage spatial dimensions Fast access feature vectors time series Flexible indexing across dimensions Maintains spatial relationships metadata","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroHyperVec-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"NeuroHyperVec Class — NeuroHyperVec-class","text":"mask object class LogicalNeuroVol defining sparse spatial domain brain image. data 3D array dimensions [features x trials x voxels] containing neuroimaging data. space NeuroSpace object representing dimensions voxel spacing neuroimaging data. lookup_map integer vector O(1) spatial index lookups. mask LogicalNeuroVol object defining spatial mask. data three-dimensional array dimensions [features x trials x voxels] containing data. space NeuroSpace object defining 5D space. lookup_map integer vector O(1) spatial index lookups.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroHyperVec-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"NeuroHyperVec Class — NeuroHyperVec-class","text":"","code":"if (FALSE) { # \\dontrun{ # Create a simple 5D dataset (10x10x10 spatial, 5 trials, 3 features) dims <- c(10, 10, 10) space <- NeuroSpace(c(dims, 5, 3))  # Create a sparse mask (20% of voxels) mask_data <- array(runif(prod(dims)) < 0.2, dims) mask <- LogicalNeuroVol(mask_data, NeuroSpace(dims))  # Generate random data for active voxels n_voxels <- sum(mask_data) data <- array(rnorm(3 * 5 * n_voxels), dim = c(3, 5, n_voxels))  # [features x trials x voxels]  # Create NeuroHyperVec object hvec <- NeuroHyperVec(data, space, mask)  # Access operations # Get data for specific voxel across all trials/features series(hvec, 5, 5, 5)  # Extract a 3D volume for specific trial and feature hvec[,,,2,1] } # }"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroHyperVec.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor for NeuroHyperVec class — NeuroHyperVec","title":"Constructor for NeuroHyperVec class — NeuroHyperVec","text":"Constructor NeuroHyperVec class","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroHyperVec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for NeuroHyperVec class — NeuroHyperVec","text":"","code":"NeuroHyperVec(data, space, mask)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroHyperVec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for NeuroHyperVec class — NeuroHyperVec","text":"data matrix three-dimensional array containing data. space NeuroSpace object defining spatial dimensions. mask mask volume (array, vector, LogicalNeuroVol).","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroHyperVec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor for NeuroHyperVec class — NeuroHyperVec","text":"new NeuroHyperVec object.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroObj-class.html","id":null,"dir":"Reference","previous_headings":"","what":"NeuroObj Class — NeuroObj-class","title":"NeuroObj Class — NeuroObj-class","text":"Base class neuroimaging data objects Cartesian spatial representation. class provides foundation specific neuroimaging data structures.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroObj-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"NeuroObj Class — NeuroObj-class","text":"space object class NeuroSpace representing geometry image object.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroSlice-class.html","id":null,"dir":"Reference","previous_headings":"","what":"NeuroSlice Class — NeuroSlice-class","title":"NeuroSlice Class — NeuroSlice-class","text":"Represents two-dimensional brain image slice. class extends array class data storage NeuroObj class spatial information.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroSlice-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"NeuroSlice Class — NeuroSlice-class","text":"NeuroSlice objects typically used represent individual slices 3D brain volumes 2D projections 3D data. inherit spatial properties NeuroObj data storage capabilities array.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroSlice-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"NeuroSlice Class — NeuroSlice-class","text":"","code":"# Create a simple 2D brain slice slice_data <- matrix(rnorm(64*64), 64, 64) slice_space <- NeuroSpace(dim=c(64L, 64L), origin=c(0, 0), spacing=c(1, 1)) brain_slice <- new(\"NeuroSlice\", .Data=slice_data, space=slice_space)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroSlice.html","id":null,"dir":"Reference","previous_headings":"","what":"NeuroSlice: 2D Neuroimaging Data Container — NeuroSlice","title":"NeuroSlice: 2D Neuroimaging Data Container — NeuroSlice","text":"Creates NeuroSlice object representing two-dimensional slice neuroimaging data associated spatial information. class particularly useful working individual slices volumetric neuroimaging data visualizing 2D cross-sections.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroSlice.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NeuroSlice: 2D Neuroimaging Data Container — NeuroSlice","text":"","code":"NeuroSlice(data, space, indices = NULL)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroSlice.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"NeuroSlice: 2D Neuroimaging Data Container — NeuroSlice","text":"data vector matrix containing slice data values. space object class NeuroSpace defining spatial properties (dimensions, spacing, origin) slice. indices Optional integer vector. data provided 1D vector, indices specifies linear indices data values placed 2D slice. Useful creating sparse slices. Default NULL.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroSlice.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"NeuroSlice: 2D Neuroimaging Data Container — NeuroSlice","text":"new object class NeuroSlice.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroSlice.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"NeuroSlice: 2D Neuroimaging Data Container — NeuroSlice","text":"Two-Dimensional Neuroimaging Data Slice","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroSlice.html","id":"input-validation","dir":"Reference","previous_headings":"","what":"Input Validation","title":"NeuroSlice: 2D Neuroimaging Data Container — NeuroSlice","text":"function performs several validation checks: Verifies space 2-dimensional Ensures data dimensions compatible space Validates indices provided sparse initialization","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroSlice.html","id":"data-handling","dir":"Reference","previous_headings":"","what":"Data Handling","title":"NeuroSlice: 2D Neuroimaging Data Container — NeuroSlice","text":"function supports two initialization modes: Dense mode (indices = NULL): Data reshaped necessary match space dimensions Dimensions must match exactly reshaping Sparse mode (indices provided): Creates zero-initialized matrix matching space dimensions Places data values specified indices","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroSlice.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"NeuroSlice: 2D Neuroimaging Data Container — NeuroSlice","text":"","code":"# Create a 64x64 slice space slice_space <- NeuroSpace(c(64, 64), spacing = c(2, 2))  # Example 1: Dense slice from matrix slice_data <- matrix(rnorm(64*64), 64, 64) dense_slice <- NeuroSlice(slice_data, slice_space)  # Example 2: Dense slice from vector vec_data <- rnorm(64*64) vec_slice <- NeuroSlice(vec_data, slice_space)  # Example 3: Sparse slice with specific values n_points <- 100 sparse_data <- rnorm(n_points) sparse_indices <- sample(1:(64*64), n_points) sparse_slice <- NeuroSlice(sparse_data, slice_space, indices = sparse_indices)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroSpace-class.html","id":null,"dir":"Reference","previous_headings":"","what":"NeuroSpace Class — NeuroSpace-class","title":"NeuroSpace Class — NeuroSpace-class","text":"NeuroSpace class represents geometric properties brain image, including dimensions, origin, spacing, axes, coordinate transformations. provides comprehensive framework handling spatial information neuroimaging data analysis.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroSpace-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"NeuroSpace Class — NeuroSpace-class","text":"dim integer vector representing grid dimensions image. origin numeric vector representing coordinates spatial origin. spacing numeric vector representing dimensions (mm) grid units (voxels). axes named AxisSet object representing set spatial axes untransformed native grid space. trans matrix representing affine transformation converts grid coordinates real-world coordinates. inverse matrix representing inverse transformation converts real-world coordinates grid coordinates.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroSpace-class.html","id":"validity","dir":"Reference","previous_headings":"","what":"Validity","title":"NeuroSpace Class — NeuroSpace-class","text":"NeuroSpace object considered valid : length dim slot equal lengths spacing, origin, number axes axes slots. dim slot contains non-negative values.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroSpace-class.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"NeuroSpace Class — NeuroSpace-class","text":"following methods available NeuroSpace objects: dim: Get dimensions space. origin: Get set origin space. spacing: Get set spacing space. axes: Get axes space. trans: Apply affine transformation coordinates.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroSpace-class.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NeuroSpace Class — NeuroSpace-class","text":"NeuroSpace class fundamental representing manipulating spatial properties neuroimaging data. used extensively throughout package operations require spatial information, image registration, resampling, coordinate transformations.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroSpace-class.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"NeuroSpace Class — NeuroSpace-class","text":"information spatial transformations neuroimaging: Brett, M., Johnsrude, . S., & Owen, . M. (2002). problem functional localization human brain. Nature Reviews Neuroscience, 3(3), 243-249.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroSpace-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"NeuroSpace Class — NeuroSpace-class","text":"","code":"# Create a NeuroSpace object space <- NeuroSpace(dim = c(64L, 64L, 64L),                     origin = c(0, 0, 0),                     spacing = c(1, 1, 1))  # Get the dimensions dim(space) #> [1] 64 64 64"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroSpace.html","id":null,"dir":"Reference","previous_headings":"","what":"NeuroSpace: Spatial Reference System for Neuroimaging Data — NeuroSpace","title":"NeuroSpace: Spatial Reference System for Neuroimaging Data — NeuroSpace","text":"NeuroSpace class defines spatial properties coordinate system neuroimaging data. encapsulates information needed map voxel indices real-world coordinates, including dimensions, voxel spacing, origin, axis orientation, coordinate transformations.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroSpace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NeuroSpace: Spatial Reference System for Neuroimaging Data — NeuroSpace","text":"","code":"NeuroSpace(dim, spacing = NULL, origin = NULL, axes = NULL, trans = NULL)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroSpace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"NeuroSpace: Spatial Reference System for Neuroimaging Data — NeuroSpace","text":"dim integer vector specifying dimensions image grid. Must positive. spacing numeric vector specifying physical size voxel (typically millimeters). Must positive. NULL, defaults ones. origin numeric vector specifying real-world coordinates first voxel. NULL, defaults zeros. axes AxisSet object defining orientation ordering coordinate axes. NULL, defaults standard neurological convention (Left-Posterior-Inferior 3D). trans transformation matrix mapping voxel indices world coordinates. NULL, constructed spacing origin.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroSpace.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"NeuroSpace: Spatial Reference System for Neuroimaging Data — NeuroSpace","text":"new NeuroSpace object","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroSpace.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"NeuroSpace: Spatial Reference System for Neuroimaging Data — NeuroSpace","text":"Spatial Reference System Neuroimaging Data","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroSpace.html","id":"coordinate-systems","dir":"Reference","previous_headings":"","what":"Coordinate Systems","title":"NeuroSpace: Spatial Reference System for Neuroimaging Data — NeuroSpace","text":"NeuroSpace manages two coordinate systems: Voxel coordinates: Zero-based indices image grid World coordinates: Real-world coordinates (typically millimeters) transformation systems defined : Voxel spacing (physical size voxels) Origin (world coordinates first voxel) Axis orientation (image axes map anatomical directions)","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroSpace.html","id":"validation","dir":"Reference","previous_headings":"","what":"Validation","title":"NeuroSpace: Spatial Reference System for Neuroimaging Data — NeuroSpace","text":"constructor performs extensive validation: dimensions must positive integers spacing values must positive Origin spacing must matching lengths Transformation matrix must invertible","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroSpace.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"NeuroSpace: Spatial Reference System for Neuroimaging Data — NeuroSpace","text":"details neuroimaging coordinate systems: Brett, M., Johnsrude, . S., & Owen, . M. (2002).     problem functional localization human brain.     Nature Reviews Neuroscience, 3(3), 243-249. Evans, . C., et al. (1993). 3D statistical neuroanatomical models     305 MRI volumes. Nuclear Science Symposium Medical Imaging Conference.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroSpace.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"NeuroSpace: Spatial Reference System for Neuroimaging Data — NeuroSpace","text":"","code":"# Create a standard 3D space (64x64x40 voxels, 2mm isotropic) space_3d <- NeuroSpace(   dim = c(64L, 64L, 40L),   spacing = c(2, 2, 2),   origin = c(-90, -126, -72) )  # Check properties dim(space_3d)           # Image dimensions #> [1] 64 64 40 spacing(space_3d)       # Voxel sizes #> [1] 2 2 2 origin(space_3d)        # World-space origin #> [1]  -90 -126  -72  # Create a 2D slice space space_2d <- NeuroSpace(   dim = c(128L, 128L),   spacing = c(1.5, 1.5),   origin = c(-96, -96) )  # Convert between coordinate systems world_coords <- c(0, 0, 0) vox_idx <- coord_to_index(space_3d, world_coords) back_to_world <- index_to_coord(space_3d, vox_idx)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroVec-class.html","id":null,"dir":"Reference","previous_headings":"","what":"NeuroVec Class — NeuroVec-class","title":"NeuroVec Class — NeuroVec-class","text":"S4 class represents four-dimensional brain image, used store process time series neuroimaging data fMRI 4D functional connectivity maps. class extends basic functionality NeuroObj. NeuroVec class represents vectorized form neuroimaging data, supporting -memory file-backed data modes. provides efficient data storage access methods integrates spatial reference system provided NeuroSpace.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroVec-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NeuroVec Class — NeuroVec-class","text":"","code":"NeuroVec(data, space = NULL, mask = NULL, label = \"\")"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroVec-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"NeuroVec Class — NeuroVec-class","text":"data image data. can : matrix (voxels x time points) 4D array list NeuroVol objects list NeuroVol objects provided, geometric space (NeuroSpace) inferred constituent volumes, must identical. space optional NeuroSpace object defining spatial properties image. required data list NeuroVol objects. mask optional logical array specifying voxels include. provided, SparseNeuroVec object created. label character string providing label NeuroVec object. Default empty string.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroVec-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"NeuroVec Class — NeuroVec-class","text":"concrete instance NeuroVec class: mask provided: SparseNeuroVec object Otherwise: DenseNeuroVec object","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroVec-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"NeuroVec Class — NeuroVec-class","text":"NeuroVec objects designed handle 4D neuroimaging data, first three dimensions represent spatial coordinates, fourth dimension typically represents time another series dimension. structure particularly useful storing analyzing functional MRI data, time series brain states, multiple 3D volumes single object. function performs several operations: data list NeuroVol objects, combines single 4D array. checks dimensions data match provided space. Depending whether mask provided, creates either DenseNeuroVec     SparseNeuroVec object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroVec-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"NeuroVec Class — NeuroVec-class","text":"space NeuroSpace object defining spatial properties image. label character string providing label NeuroVec object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroVec-class.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"NeuroVec Class — NeuroVec-class","text":"Methods specific NeuroVec objects may include operations time series analysis, 4D data manipulation, extraction 3D volumes time courses.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroVec-class.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NeuroVec Class — NeuroVec-class","text":"create NeuroVec object, use constructor function NeuroVec(). function handle appropriate initialization 4D data structure associated spatial information.","code":""},{"path":[]},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroVecSeq-class.html","id":null,"dir":"Reference","previous_headings":"","what":"NeuroVecSeq Class — NeuroVecSeq-class","title":"NeuroVecSeq Class — NeuroVecSeq-class","text":"concatenated sequence NeuroVec instances.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroVecSeq-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"NeuroVecSeq Class — NeuroVecSeq-class","text":"vecs sequences NeuroVec instances lens number volumes NeuroVec sequence","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroVecSeq-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Element from NeuroVecSeq — [[,NeuroVecSeq,numeric-method","title":"Extract Element from NeuroVecSeq — [[,NeuroVecSeq,numeric-method","text":"Extracts single volume NeuroVecSeq object specified time point.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroVecSeq-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Element from NeuroVecSeq — [[,NeuroVecSeq,numeric-method","text":"","code":"# S4 method for class 'NeuroVecSeq,numeric' x[[i]]"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroVecSeq-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Element from NeuroVecSeq — [[,NeuroVecSeq,numeric-method","text":"x NeuroVecSeq object Numeric index specifying time point extract","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroVecSeq-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Element from NeuroVecSeq — [[,NeuroVecSeq,numeric-method","text":"NeuroVol object representing extracted volume","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroVecSeq.html","id":null,"dir":"Reference","previous_headings":"","what":"NeuroVecSeq: A Container for Sequential NeuroVec Objects — NeuroVecSeq","title":"NeuroVecSeq: A Container for Sequential NeuroVec Objects — NeuroVecSeq","text":"NeuroVecSeq class provides container managing sequence NeuroVec objects, particularly useful handling time series multi-session neuroimaging data segment may different lengths. Constructs NeuroVecSeq object represent variable-length sequence NeuroVec objects. particularly useful managing time series data different segments may different lengths.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroVecSeq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NeuroVecSeq: A Container for Sequential NeuroVec Objects — NeuroVecSeq","text":"","code":"NeuroVecSeq(...)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroVecSeq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"NeuroVecSeq: A Container for Sequential NeuroVec Objects — NeuroVecSeq","text":"... One instances type NeuroVec.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroVecSeq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"NeuroVecSeq: A Container for Sequential NeuroVec Objects — NeuroVecSeq","text":"NeuroVecSeq object containing: provided NeuroVec objects Associated space information Length information vector","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroVecSeq.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"NeuroVecSeq: A Container for Sequential NeuroVec Objects — NeuroVecSeq","text":"NeuroVecSeq objects store: list NeuroVec objects, potentially different time dimensions lengths constituent NeuroVec combined NeuroSpace object representing total space class provides methods : Accessing individual time points across vectors Extracting subsequences Computing statistics across sequence Linear access underlying data function performs several validations: Ensures inputs NeuroVec objects Verifies spatial compatibility Combines spatial information appropriately","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroVecSeq.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"NeuroVecSeq: A Container for Sequential NeuroVec Objects — NeuroVecSeq","text":"[[ Extract single volume specified time point length Get total number time points sub_vector Extract subsequence volumes linear_access Access data linearly across vectors","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroVecSeq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"NeuroVecSeq: A Container for Sequential NeuroVec Objects — NeuroVecSeq","text":"","code":"if (FALSE) { # \\dontrun{ # Create some example NeuroVec objects v1 <- NeuroVec(array(0, c(5, 5, 5, 2)),                space = NeuroSpace(dim = c(5, 5, 5, 2))) v2 <- NeuroVec(array(1, c(5, 5, 5, 4)),                space = NeuroSpace(dim = c(5, 5, 5, 4))) v3 <- NeuroVec(array(2, c(5, 5, 5, 6)),                space = NeuroSpace(dim = c(5, 5, 5, 6)))  # Combine them into a sequence vs <- NeuroVecSeq(v1, v2, v3)  # Access properties length(vs)  # Total time points vs[[5]]     # Get the 5th volume  # Extract a subsequence sub_seq <- sub_vector(vs, 1:5) } # }  if (FALSE) { # \\dontrun{ # Create sample vectors v1 <- NeuroVec(array(0, c(5, 5, 5, 2)),                space = NeuroSpace(dim = c(5, 5, 5, 2))) v2 <- NeuroVec(array(0, c(5, 5, 5, 4)),                space = NeuroSpace(dim = c(5, 5, 5, 4)))  # Combine into sequence vs <- NeuroVecSeq(v1, v2) print(vs) } # }"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroVecSource-class.html","id":null,"dir":"Reference","previous_headings":"","what":"NeuroVecSource Class — NeuroVecSource-class","title":"NeuroVecSource Class — NeuroVecSource-class","text":"class used produce NeuroVec instance.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroVecSource-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"NeuroVecSource Class — NeuroVecSource-class","text":"indices integer vector representing indices volumes loaded.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroVecSource.html","id":null,"dir":"Reference","previous_headings":"","what":"NeuroVecSource — NeuroVecSource","title":"NeuroVecSource — NeuroVecSource","text":"function constructs NeuroVecSource object, represents source four-dimensional brain image.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroVecSource.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NeuroVecSource — NeuroVecSource","text":"","code":"NeuroVecSource(file_name, indices = NULL, mask = NULL)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroVecSource.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"NeuroVecSource — NeuroVecSource","text":"file_name name 4-dimensional image file. indices optional integer vector specifying subset volume indices load. provided, volumes loaded. mask optional logical array NeuroVol object defining subset voxels load. provided, SparseNeuroVecSource object created.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroVecSource.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"NeuroVecSource — NeuroVecSource","text":"instance NeuroVecSource class.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroVecSource.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"NeuroVecSource — NeuroVecSource","text":"mask supplied, LogicalNeuroVol NeuroVol instance. latter, mask defined nonzero elements volume.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroVol-class.html","id":null,"dir":"Reference","previous_headings":"","what":"NeuroVol Class — NeuroVol-class","title":"NeuroVol Class — NeuroVol-class","text":"Base class representing 3D volumetric neuroimaging data. class extends NeuroObj provide foundation various types 3D brain images.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroVol-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"NeuroVol Class — NeuroVol-class","text":"NeuroVol serves abstract base class specific 3D neuroimaging data structures. inherits spatial properties NeuroObj specify particular data storage method.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroVol.html","id":null,"dir":"Reference","previous_headings":"","what":"NeuroVol: 3D Neuroimaging Volume Class — NeuroVol","title":"NeuroVol: 3D Neuroimaging Volume Class — NeuroVol","text":"NeuroVol class encapsulates 3D volumetric neuroimaging data. provides methods accessing slices, performing spatial transformations, integrating spatial reference provided NeuroSpace.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroVol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NeuroVol: 3D Neuroimaging Volume Class — NeuroVol","text":"","code":"NeuroVol(data, space, label = \"\", indices = NULL)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroVol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"NeuroVol: 3D Neuroimaging Volume Class — NeuroVol","text":"data 3D array containing volumetric data. space object class NeuroSpace defining spatial properties. label character string providing label volume (default: \"\"). indices optional vector indices sparse representation (default: NULL).","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroVol.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"NeuroVol: 3D Neuroimaging Volume Class — NeuroVol","text":"NeuroVol object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroVol.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"NeuroVol: 3D Neuroimaging Volume Class — NeuroVol","text":"","code":"bspace <- NeuroSpace(c(64,64,64), spacing=c(1,1,1)) dat <- array(rnorm(64*64*64), c(64,64,64)) bvol <- NeuroVol(dat,bspace, label=\"test\")"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroVolSource-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor for NeuroVolSource — NeuroVolSource","title":"Constructor for NeuroVolSource — NeuroVolSource","text":"Constructor NeuroVolSource","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroVolSource-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for NeuroVolSource — NeuroVolSource","text":"","code":"NeuroVolSource(input, index = 1)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroVolSource-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for NeuroVolSource — NeuroVolSource","text":"input input file name index image subvolume index","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NeuroVolSource-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor for NeuroVolSource — NeuroVolSource","text":"new instance type NeuroVolSource","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/None.html","id":null,"dir":"Reference","previous_headings":"","what":"Pre-defined null axis — None","title":"Pre-defined null axis — None","text":"Pre-defined null axis","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/None.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pre-defined null axis — None","text":"","code":"None"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/None.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Pre-defined null axis — None","text":"object class NamedAxis length 1.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NullAxis.html","id":null,"dir":"Reference","previous_headings":"","what":"Pre-defined null axis set — NullAxis","title":"Pre-defined null axis set — NullAxis","text":"Pre-defined null axis set","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NullAxis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pre-defined null axis set — NullAxis","text":"","code":"NullAxis"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/NullAxis.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Pre-defined null axis set — NullAxis","text":"object class AxisSet length 1.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/OrientationList2D.html","id":null,"dir":"Reference","previous_headings":"","what":"Pre-defined 2D orientation configurations — OrientationList2D","title":"Pre-defined 2D orientation configurations — OrientationList2D","text":"list standard 2D anatomical orientations used neuroimaging. orientation defines pair anatomical axes.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/OrientationList2D.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pre-defined 2D orientation configurations — OrientationList2D","text":"","code":"OrientationList2D"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/OrientationList2D.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Pre-defined 2D orientation configurations — OrientationList2D","text":"object class list length 24.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/OrientationList3D.html","id":null,"dir":"Reference","previous_headings":"","what":"Pre-defined 3D orientation configurations — OrientationList3D","title":"Pre-defined 3D orientation configurations — OrientationList3D","text":"list standard 3D anatomical orientations used neuroimaging. orientation defines triplet anatomical axes.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/OrientationList3D.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pre-defined 3D orientation configurations — OrientationList3D","text":"","code":"OrientationList3D"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/OrientationList3D.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Pre-defined 3D orientation configurations — OrientationList3D","text":"object class list length 48.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ROI-class.html","id":null,"dir":"Reference","previous_headings":"","what":"ROI — ROI-class","title":"ROI — ROI-class","text":"Base marker class region interest (ROI)","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ROICoords-class.html","id":null,"dir":"Reference","previous_headings":"","what":"ROICoords — ROICoords-class","title":"ROICoords — ROICoords-class","text":"class representing region interest (ROI) brain image, defined set coordinates. class stores geometric space image coordinates voxels within ROI.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ROICoords-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"ROICoords — ROICoords-class","text":"space instance class NeuroSpace representing geometric space image data. coords matrix containing coordinates voxels within ROI. row represents coordinate , e.g. (,   j,  k).","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ROICoords.html","id":null,"dir":"Reference","previous_headings":"","what":"Create ROI Coordinates Object — ROICoords","title":"Create ROI Coordinates Object — ROICoords","text":"Creates ROICoords object matrix coordinates representing points 3D space.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ROICoords.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create ROI Coordinates Object — ROICoords","text":"","code":"ROICoords(coords)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ROICoords.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create ROI Coordinates Object — ROICoords","text":"coords matrix 3 columns representing (x, y, z) coordinates","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ROICoords.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create ROI Coordinates Object — ROICoords","text":"ROICoords object","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ROICoords.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create ROI Coordinates Object — ROICoords","text":"ROI Coordinates","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ROICoords.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create ROI Coordinates Object — ROICoords","text":"","code":"coords <- matrix(c(1,2,3, 4,5,6), ncol=3, byrow=TRUE) roi_coords <- ROICoords(coords)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ROIVec-class.html","id":null,"dir":"Reference","previous_headings":"","what":"ROIVec — ROIVec-class","title":"ROIVec — ROIVec-class","text":"class representing vector-valued volumetric region interest (ROI) brain image.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ROIVec-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"ROIVec — ROIVec-class","text":"coords matrix containing 3D coordinates voxels within ROI. row represents voxel coordinate (x, y, z). .Data matrix containing data values associated voxel ROI. row corresponds unique vector value, number rows match number rows coords matrix.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ROIVec-class.html","id":"validity","dir":"Reference","previous_headings":"","what":"Validity","title":"ROIVec — ROIVec-class","text":"object class ROIVec considered valid : - coords slot matrix 3 columns. - .Data slot matrix. - number rows .Data matrix equal number rows coords matrix.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ROIVec.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an instance of class ROIVec — ROIVec","title":"Create an instance of class ROIVec — ROIVec","text":"function constructs instance ROIVec class, represents region interest (ROI) 4D volume. class stores NeuroSpace object, voxel coordinates, data values ROI.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ROIVec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an instance of class ROIVec — ROIVec","text":"","code":"ROIVec(vspace, coords, data = rep(nrow(coords), 1))"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ROIVec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an instance of class ROIVec — ROIVec","text":"vspace instance class NeuroSpace four dimensions, represents dimensions, voxel spacing, time points 4D volume. coords 3-column matrix voxel coordinates region interest. data matrix data values associated region interest, row representing voxel column representing time point. default, matrix number rows equal number rows `coords` matrix single column filled ones.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ROIVec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an instance of class ROIVec — ROIVec","text":"instance class ROIVec, containing NeuroSpace object,   voxel coordinates, data values region interest.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ROIVec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an instance of class ROIVec — ROIVec","text":"","code":"# Create a NeuroSpace object vspace <- NeuroSpace(dim = c(5, 5, 5, 10), spacing = c(1, 1, 1))  # Define voxel coordinates for the ROI coords <- matrix(c(1, 2, 3, 2, 2, 2, 3, 3, 3), ncol = 3)  # Create a data matrix for the ROI data <- matrix(rnorm(30), nrow = 10, ncol = 3)  # Create a ROIVec object roi_vec <- ROIVec(vspace, coords, data)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ROIVecWindow-class.html","id":null,"dir":"Reference","previous_headings":"","what":"ROIVecWindow — ROIVecWindow-class","title":"ROIVecWindow — ROIVecWindow-class","text":"class representing spatially windowed, vector-valued volumetric region interest (ROI) brain image.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ROIVecWindow-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"ROIVecWindow — ROIVecWindow-class","text":"coords matrix containing 3D coordinates voxels within ROI. row represents voxel coordinate (x, y, z). .Data matrix containing data values associated voxel ROI. row corresponds unique vector value, number rows match number rows coords matrix. parent_index integer representing 1D index center voxel parent space. center_index integer representing location coordinate matrix center voxel window.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ROIVecWindow-class.html","id":"validity","dir":"Reference","previous_headings":"","what":"Validity","title":"ROIVecWindow — ROIVecWindow-class","text":"object class ROIVecWindow considered valid : - coords slot matrix 3 columns. - .Data slot matrix. - number rows .Data matrix equal number rows coords matrix.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ROIVol-class.html","id":null,"dir":"Reference","previous_headings":"","what":"ROIVol — ROIVol-class","title":"ROIVol — ROIVol-class","text":"class representing volumetric region interest (ROI) brain image, defined set coordinates associated data values.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ROIVol-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"ROIVol — ROIVol-class","text":"coords matrix containing 3D coordinates voxels within ROI. row represents voxel coordinate (x, y, z). .Data numeric vector containing data values associated voxel ROI. length vector match number rows coords matrix.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ROIVol-class.html","id":"validity","dir":"Reference","previous_headings":"","what":"Validity","title":"ROIVol — ROIVol-class","text":"object class ROIVol considered valid : - coords slot matrix 3 columns. - .Data slot numeric vector. - length .Data vector equal number rows coords matrix.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ROIVol.html","id":null,"dir":"Reference","previous_headings":"","what":"Create ROI Volume Object — ROIVol","title":"Create ROI Volume Object — ROIVol","text":"Creates ROIVol object representing set values specific 3D coordinates within spatial reference system.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ROIVol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create ROI Volume Object — ROIVol","text":"","code":"ROIVol(space, coords, data)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ROIVol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create ROI Volume Object — ROIVol","text":"space NeuroSpace object defining spatial reference coords matrix 3 columns representing (x,y,z) coordinates data numeric vector values corresponding coordinate","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ROIVol.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create ROI Volume Object — ROIVol","text":"ROIVol object","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ROIVol.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create ROI Volume Object — ROIVol","text":"ROI Volume","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ROIVol.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create ROI Volume Object — ROIVol","text":"","code":"space <- NeuroSpace(c(64,64,64)) coords <- matrix(c(1,2,3, 4,5,6), ncol=3, byrow=TRUE) data <- c(1.5, 2.5) roi_vol <- ROIVol(space, coords, data)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ROIVolWindow-class.html","id":null,"dir":"Reference","previous_headings":"","what":"ROIVolWindow — ROIVolWindow-class","title":"ROIVolWindow — ROIVolWindow-class","text":"class representing spatially windowed volumetric region interest (ROI) brain image, derived larger parent ROI.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ROIVolWindow-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"ROIVolWindow — ROIVolWindow-class","text":"parent_index integer representing 1D index center voxel parent space. center_index integer representing location coordinate matrix center voxel window. coords matrix containing 3D coordinates voxels within ROI. row represents voxel coordinate (x, y, z). .Data numeric vector containing data values associated voxel ROI. length vector match number rows coords matrix.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ROIVolWindow-class.html","id":"validity","dir":"Reference","previous_headings":"","what":"Validity","title":"ROIVolWindow — ROIVolWindow-class","text":"object class ROIVolWindow considered valid : - coords slot matrix 3 columns. - .Data slot numeric vector. - length .Data vector equal number rows coords matrix.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/SparseNeuroVec-class.html","id":null,"dir":"Reference","previous_headings":"","what":"SparseNeuroVec Class — SparseNeuroVec-class","title":"SparseNeuroVec Class — SparseNeuroVec-class","text":"class representing sparse four-dimensional brain image, optimized efficient storage access large, sparse neuroimaging data. Constructs SparseNeuroVec object efficient representation manipulation sparse neuroimaging data many zero missing values.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/SparseNeuroVec-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SparseNeuroVec Class — SparseNeuroVec-class","text":"","code":"SparseNeuroVec(data, space, mask, label = \"\")"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/SparseNeuroVec-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SparseNeuroVec Class — SparseNeuroVec-class","text":"data matrix 4-D array containing neuroimaging data. dimensions data consistent dimensions provided NeuroSpace object mask. space NeuroSpace object representing dimensions voxel spacing neuroimaging data. mask 3D array, 1D vector type logical, instance type LogicalNeuroVol, specifies locations non-zero values data. label Optional character string providing label vector","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/SparseNeuroVec-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"SparseNeuroVec Class — SparseNeuroVec-class","text":"SparseNeuroVec object, containing sparse neuroimaging data, mask, associated NeuroSpace information.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/SparseNeuroVec-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"SparseNeuroVec Class — SparseNeuroVec-class","text":"SparseNeuroVec objects store data compressed format, non-zero values retained. approach significantly reduces memory usage sparse brain images. class leverages mask mapping parent class AbstractSparseNeuroVec efficiently manage spatial structure data.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/SparseNeuroVec-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"SparseNeuroVec Class — SparseNeuroVec-class","text":"data matrix column represents non-zero vector spanning fourth dimension (e.g., time series voxel). Rows correspond voxels sparse domain defined mask.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/SparseNeuroVec-class.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"SparseNeuroVec Class — SparseNeuroVec-class","text":"SparseNeuroVec inherits : NeuroVec: Base class 4D brain images AbstractSparseNeuroVec: Provides sparse representation framework ArrayLike4D: Interface 4D array-like operations","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/SparseNeuroVec-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SparseNeuroVec Class — SparseNeuroVec-class","text":"","code":"if (FALSE) { # \\dontrun{ # Create a sparse 4D brain image mask <- LogicalNeuroVol(array(runif(64*64*32) > 0.7, dim=c(64,64,32))) data <- matrix(rnorm(sum(mask) * 100), nrow=sum(mask), ncol=100) sparse_vec <- SparseNeuroVec(data=data, mask=mask, space=NeuroSpace(dim=c(64,64,32)))  # Access a subset of the data subset <- sparse_vec[,,, 1:10] } # }  bspace <- NeuroSpace(c(10,10,10,100), c(1,1,1)) mask <- array(rnorm(10*10*10) > .5, c(10,10,10)) mat <- matrix(rnorm(sum(mask)), 100, sum(mask)) svec <- SparseNeuroVec(mat, bspace, mask) length(indices(svec)) == sum(mask) #> [1] TRUE"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/SparseNeuroVec-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"[[ — [[,SparseNeuroVec,numeric-method","title":"[[ — [[,SparseNeuroVec,numeric-method","text":"[[","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/SparseNeuroVec-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[[ — [[,SparseNeuroVec,numeric-method","text":"","code":"# S4 method for class 'SparseNeuroVec,numeric' x[[i]]"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/SparseNeuroVec-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[[ — [[,SparseNeuroVec,numeric-method","text":"x object volume index","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/SparseNeuroVecSource-class.html","id":null,"dir":"Reference","previous_headings":"","what":"SparseNeuroVecSource Class — SparseNeuroVecSource-class","title":"SparseNeuroVecSource Class — SparseNeuroVecSource-class","text":"class used produce SparseNeuroVec instance. encapsulates necessary information create sparse representation 4D neuroimaging dataset.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/SparseNeuroVecSource-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"SparseNeuroVecSource Class — SparseNeuroVecSource-class","text":"SparseNeuroVecSource acts factory SparseNeuroVec objects. holds spatial mask determines voxels included sparse representation. class typically used data loading preprocessing pipelines sparse structure data known determined full dataset loaded.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/SparseNeuroVecSource-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"SparseNeuroVecSource Class — SparseNeuroVecSource-class","text":"mask object class LogicalNeuroVol representing subset voxels stored memory. mask defines sparse structure resulting SparseNeuroVec.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/SparseNeuroVecSource-class.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"SparseNeuroVecSource Class — SparseNeuroVecSource-class","text":"SparseNeuroVecSource inherits : NeuroVecSource: Base class NeuroVec source objects","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/SparseNeuroVecSource-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SparseNeuroVecSource Class — SparseNeuroVecSource-class","text":"","code":"if (FALSE) { # \\dontrun{ # Create a simple mask mask_data <- array(runif(64*64*32) > 0.7, dim = c(64, 64, 32)) mask <- LogicalNeuroVol(mask_data, space = NeuroSpace(dim = c(64, 64, 32)))  # Create a SparseNeuroVecSource sparse_source <- new(\"SparseNeuroVecSource\", mask = mask)  # Use the source to create a SparseNeuroVec (pseudo-code) # sparse_vec <- create_sparse_neuro_vec(sparse_source, data) } # }"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/SparseNeuroVol-array.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert SparseNeuroVol to array — SparseNeuroVol,array","title":"Convert SparseNeuroVol to array — SparseNeuroVol,array","text":"function converts SparseNeuroVol object array object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/SparseNeuroVol-array.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert SparseNeuroVol to array — SparseNeuroVol,array","text":"SparseNeuroVol object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/SparseNeuroVol-array.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert SparseNeuroVol to array — SparseNeuroVol,array","text":"array object resulting conversion.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/SparseNeuroVol-class.html","id":null,"dir":"Reference","previous_headings":"","what":"SparseNeuroVol Class — SparseNeuroVol-class","title":"SparseNeuroVol Class — SparseNeuroVol-class","text":"class represents three-dimensional brain image using sparse data representation. particularly useful large brain images high proportion zero missing values, offering efficient storage processing. Construct SparseNeuroVol instance","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/SparseNeuroVol-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SparseNeuroVol Class — SparseNeuroVol-class","text":"","code":"SparseNeuroVol(data, space, indices = NULL, label = \"\")"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/SparseNeuroVol-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SparseNeuroVol Class — SparseNeuroVol-class","text":"data numeric vector ROIVol space instance class NeuroSpace indices index vector indicating 1-d coordinates data values label character string","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/SparseNeuroVol-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"SparseNeuroVol Class — SparseNeuroVol-class","text":"SparseNeuroVol instance","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/SparseNeuroVol-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"SparseNeuroVol Class — SparseNeuroVol-class","text":"SparseNeuroVol class extends NeuroVol class implements ArrayLike3D interface. uses sparseVector Matrix package store image data, allows memory-efficient representation sparse 3D neuroimaging data. Image data backed Matrix::sparseVector.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/SparseNeuroVol-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"SparseNeuroVol Class — SparseNeuroVol-class","text":"data sparseVector object Matrix package, storing image volume data sparse format.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/SparseNeuroVol-class.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"SparseNeuroVol Class — SparseNeuroVol-class","text":"Bates, D., & Maechler, M. (2019). Matrix: Sparse Dense Matrix Classes Methods. R package version 1.2-18. https://CRAN.R-project.org/package=Matrix","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/SparseNeuroVol-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SparseNeuroVol Class — SparseNeuroVol-class","text":"","code":"if (FALSE) { # \\dontrun{ # Create a sparse 3D brain image dim <- c(64L, 64L, 64L) space <- NeuroSpace(dim = dim, origin = c(0, 0, 0), spacing = c(1, 1, 1)) sparse_data <- Matrix::sparseVector(x = c(1, 2, 3),                                     i = c(100, 1000, 10000),                                     length = prod(dim)) sparse_vol <- new(\"SparseNeuroVol\", space = space, data = sparse_data) } # }  data <- 1:10 indices <- seq(1,1000, length.out=10) bspace <- NeuroSpace(c(64,64,64), spacing=c(1,1,1)) sparsevol <- SparseNeuroVol(data,bspace,indices=indices) densevol <- NeuroVol(data,bspace,indices=indices) sum(sparsevol) == sum(densevol) #> [1] TRUE"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/SparseNeuroVol-numeric.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert SparseNeuroVol to numeric — SparseNeuroVol,numeric","title":"Convert SparseNeuroVol to numeric — SparseNeuroVol,numeric","text":"function converts SparseNeuroVol object numeric object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/SparseNeuroVol-numeric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert SparseNeuroVol to numeric — SparseNeuroVol,numeric","text":"SparseNeuroVol object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/SparseNeuroVol-numeric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert SparseNeuroVol to numeric — SparseNeuroVol,numeric","text":"numeric object resulting conversion.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/Summary-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary method for Neuroimaging objects — Summary,SparseNeuroVec-method","title":"Summary method for Neuroimaging objects — Summary,SparseNeuroVec-method","text":"Summary method Neuroimaging objects","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/Summary-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary method for Neuroimaging objects — Summary,SparseNeuroVec-method","text":"","code":"# S4 method for class 'SparseNeuroVec' Summary(x, ..., na.rm = FALSE)  # S4 method for class 'SparseNeuroVol' Summary(x, ..., na.rm = FALSE)  # S4 method for class 'DenseNeuroVol' Summary(x, ..., na.rm = FALSE)  # S4 method for class 'DenseNeuroVol' Summary(x, ..., na.rm = FALSE)  # S4 method for class 'DenseNeuroVol' Summary(x, ..., na.rm = FALSE)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/Summary-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary method for Neuroimaging objects — Summary,SparseNeuroVec-method","text":"x SparseNeuroVec object ... Additional arguments passed methods na.rm Logical indicating whether remove NA values computation","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/TIME.html","id":null,"dir":"Reference","previous_headings":"","what":"Time axis — TIME","title":"Time axis — TIME","text":"Represents temporal dimension neuroimaging data","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/TIME.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Time axis — TIME","text":"","code":"TIME"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/TIME.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Time axis — TIME","text":"object class NamedAxis length 1.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/TimeAxis.html","id":null,"dir":"Reference","previous_headings":"","what":"Time axis set — TimeAxis","title":"Time axis set — TimeAxis","text":"one-dimensional axis set representing time","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/TimeAxis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Time axis set — TimeAxis","text":"","code":"TimeAxis"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/TimeAxis.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Time axis set — TimeAxis","text":"object class AxisSet1D length 1.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/add_dim-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a Dimension to an Object — add_dim","title":"Add a Dimension to an Object — add_dim","text":"function adds new dimension given object, matrix array.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/add_dim-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a Dimension to an Object — add_dim","text":"","code":"add_dim(x, n)  # S4 method for class 'NeuroSpace,numeric' add_dim(x, n)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/add_dim-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a Dimension to an Object — add_dim","text":"x dimensioned object, matrix, array, NeuroSpace object. n integer representing size dimension add.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/add_dim-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a Dimension to an Object — add_dim","text":"updated dimensioned object new dimension added.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/add_dim-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a Dimension to an Object — add_dim","text":"","code":"# Create a NeuroSpace object x <- NeuroSpace(c(10, 10, 10), c(1, 1, 1))  # Add a new dimension with size 10 x1 <- add_dim(x, 10)  # Check the new dimension ndim(x1) == 4 #> [1] TRUE dim(x1)[4] == 10 #> [1] TRUE"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/anatomical_axes.html","id":null,"dir":"Reference","previous_headings":"","what":"Pre-defined anatomical axes — anatomical_axes","title":"Pre-defined anatomical axes — anatomical_axes","text":"constants define standard anatomical axes used neuroimaging. axis defined direction vector 3D space.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/anatomical_axes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pre-defined anatomical axes — anatomical_axes","text":"","code":"LEFT_RIGHT  RIGHT_LEFT  ANT_POST  POST_ANT  INF_SUP  SUP_INF"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/anatomical_axes.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Pre-defined anatomical axes — anatomical_axes","text":"object class NamedAxis length 1. object class NamedAxis length 1. object class NamedAxis length 1. object class NamedAxis length 1. object class NamedAxis length 1. object class NamedAxis length 1.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as-ClusteredNeuroVol-DenseNeuroVol.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert ClusteredNeuroVol to DenseNeuroVol — as-ClusteredNeuroVol-DenseNeuroVol","title":"Convert ClusteredNeuroVol to DenseNeuroVol — as-ClusteredNeuroVol-DenseNeuroVol","text":"method converts ClusteredNeuroVol equivalent DenseNeuroVol object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as-ClusteredNeuroVol-DenseNeuroVol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert ClusteredNeuroVol to DenseNeuroVol — as-ClusteredNeuroVol-DenseNeuroVol","text":"ClusteredNeuroVol object converted","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as-ClusteredNeuroVol-DenseNeuroVol.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert ClusteredNeuroVol to DenseNeuroVol — as-ClusteredNeuroVol-DenseNeuroVol","text":"DenseNeuroVol object","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as-ClusteredNeuroVol-DenseNeuroVol.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert ClusteredNeuroVol to DenseNeuroVol — as-ClusteredNeuroVol-DenseNeuroVol","text":"Convert ClusteredNeuroVol Object DenseNeuroVol Object","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as-ClusteredNeuroVol-DenseNeuroVol.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert ClusteredNeuroVol to DenseNeuroVol — as-ClusteredNeuroVol-DenseNeuroVol","text":"","code":"if (FALSE) { # \\dontrun{ # Create a clustered volume mask <- read_vol(system.file(\"extdata\", \"global_mask_v4.nii\", package=\"neuroim2\")) clusters <- rep(1:5, each=sum(mask)/5) cvol <- ClusteredNeuroVol(mask, clusters)  # Convert to DenseNeuroVol dvol <- as(cvol, \"DenseNeuroVol\") } # }"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as-DenseNeuroVol-array.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert DenseNeuroVol to array — as,DenseNeuroVol,array","title":"Convert DenseNeuroVol to array — as,DenseNeuroVol,array","text":"function converts DenseNeuroVol object array.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as-DenseNeuroVol-array.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert DenseNeuroVol to array — as,DenseNeuroVol,array","text":"DenseNeuroVol object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as-DenseNeuroVol-array.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert DenseNeuroVol to array — as,DenseNeuroVol,array","text":"array resulting conversion.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.dense-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce ROIVol to DenseNeuroVol using as.dense method — as.dense,ClusteredNeuroVol-method","title":"Coerce ROIVol to DenseNeuroVol using as.dense method — as.dense,ClusteredNeuroVol-method","text":"function provides method coerce object class ROIVol DenseNeuroVol using .dense method.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.dense-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce ROIVol to DenseNeuroVol using as.dense method — as.dense,ClusteredNeuroVol-method","text":"","code":"# S4 method for class 'ClusteredNeuroVol' as.dense(x)  # S4 method for class 'ROIVol' as.dense(x)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.dense-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce ROIVol to DenseNeuroVol using as.dense method — as.dense,ClusteredNeuroVol-method","text":"x object class ROIVol coerced DenseNeuroVol.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.dense-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce ROIVol to DenseNeuroVol using as.dense method — as.dense,ClusteredNeuroVol-method","text":"DenseNeuroVol object obtained coercing ROIVol object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.dense.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert to dense representation — as.dense","title":"Convert to dense representation — as.dense","text":"Convert dense representation","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.dense.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert to dense representation — as.dense","text":"","code":"as.dense(x)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.dense.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert to dense representation — as.dense","text":"x object densify","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.html","id":null,"dir":"Reference","previous_headings":"","what":"conversion from NeuroVol to LogicalNeuroVol — as","title":"conversion from NeuroVol to LogicalNeuroVol — as","text":"function provides method coerce object class ROIVec matrix. function provides method coerce object class ROIVol DenseNeuroVol.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"conversion from NeuroVol to LogicalNeuroVol — as","text":"object class ROIVol coerced DenseNeuroVol.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"conversion from NeuroVol to LogicalNeuroVol — as","text":"matrix obtained coercing ROIVec object. DenseNeuroVol object obtained coercing ROIVol object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.list-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert FileBackedNeuroVec to List — as.list,FileBackedNeuroVec-method","title":"Convert FileBackedNeuroVec to List — as.list,FileBackedNeuroVec-method","text":"Converts FileBackedNeuroVec object list DenseNeuroVol objects. convert SparseNeuroVec list DenseNeuroVol","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.list-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert FileBackedNeuroVec to List — as.list,FileBackedNeuroVec-method","text":"","code":"# S4 method for class 'FileBackedNeuroVec' as.list(x)  # S4 method for class 'NeuroVec' as.list(x)  # S4 method for class 'SparseNeuroVec' as.list(x)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.list-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert FileBackedNeuroVec to List — as.list,FileBackedNeuroVec-method","text":"x object","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.list-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert FileBackedNeuroVec to List — as.list,FileBackedNeuroVec-method","text":"deferred list DenseNeuroVol objects.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.list-methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert FileBackedNeuroVec to List — as.list,FileBackedNeuroVec-method","text":"method creates deferred list, element DenseNeuroVol object representing single volume FileBackedNeuroVec.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.list-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert FileBackedNeuroVec to List — as.list,FileBackedNeuroVec-method","text":"","code":"if (FALSE) { # \\dontrun{ fbvec <- FileBackedNeuroVec(\"fmri_data.nii\")  # Convert to list of volumes vol_list <- as.list(fbvec) } # }"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.logical-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"as.logical — as.logical,NeuroVol-method","title":"as.logical — as.logical,NeuroVol-method","text":"Convert NeuroVol LogicalNeuroVol","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.logical-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"as.logical — as.logical,NeuroVol-method","text":"","code":"# S4 method for class 'NeuroVol' as.logical(x)  # S4 method for class 'ROIVol' as.logical(x)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.logical-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"as.logical — as.logical,NeuroVol-method","text":"x object","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.logical-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"as.logical — as.logical,NeuroVol-method","text":"instance LogicalNeuroVol","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.logical-methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"as.logical — as.logical,NeuroVol-method","text":"image values converted using R base function .logical wrapped LogicalNeuroVol","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.mask-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert NeuroVol to a mask — as.mask,NeuroVol,missing-method","title":"Convert NeuroVol to a mask — as.mask,NeuroVol,missing-method","text":"method converts NeuroVol object mask setting positive values TRUE non-positive values FALSE. method converts NeuroVol object mask setting specified indices TRUE remaining elements FALSE.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.mask-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert NeuroVol to a mask — as.mask,NeuroVol,missing-method","text":"","code":"# S4 method for class 'NeuroVol,missing' as.mask(x)  # S4 method for class 'NeuroVol,numeric' as.mask(x, indices)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.mask-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert NeuroVol to a mask — as.mask,NeuroVol,missing-method","text":"x NeuroVol object convert mask. indices numeric vector containing indices input NeuroVol set TRUE resulting mask.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.mask-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert NeuroVol to a mask — as.mask,NeuroVol,missing-method","text":"LogicalNeuroVol object representing mask created input NeuroVol. LogicalNeuroVol object representing mask created input NeuroVol specified indices.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.mask.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert to a LogicalNeuroVol — as.mask","title":"Convert to a LogicalNeuroVol — as.mask","text":"Convert LogicalNeuroVol","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.mask.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert to a LogicalNeuroVol — as.mask","text":"","code":"as.mask(x, indices)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.mask.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert to a LogicalNeuroVol — as.mask","text":"x object binarize indices indices set TRUE","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.matrix-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"convert a NeuroVec to a matrix — as.matrix,MappedNeuroVec-method","title":"convert a NeuroVec to a matrix — as.matrix,MappedNeuroVec-method","text":"convert NeuroVec matrix convert ROIVec matrix Convert Matrix","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.matrix-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"convert a NeuroVec to a matrix — as.matrix,MappedNeuroVec-method","text":"","code":"# S4 method for class 'MappedNeuroVec' as.matrix(x)  # S4 method for class 'NeuroVec' as.matrix(x)  # S4 method for class 'NeuroVec' as.matrix(x)  # S4 method for class 'DenseNeuroVec' as.matrix(x)  # S4 method for class 'ROIVec' as.matrix(x)  # S4 method for class 'SparseNeuroVec' as.matrix(x, ...)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.matrix-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"convert a NeuroVec to a matrix — as.matrix,MappedNeuroVec-method","text":"x object convert matrix ... Additional arguments","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.matrix-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"convert a NeuroVec to a matrix — as.matrix,MappedNeuroVec-method","text":"matrix representation object","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic as.matrix Method — as.matrix","title":"Generic as.matrix Method — as.matrix","text":"Coerces object matrix.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic as.matrix Method — as.matrix","text":"","code":"as.matrix(x, ...)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic as.matrix Method — as.matrix","text":"x object coerced matrix. ... Additional arguments passed methods.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.numeric-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert SparseNeuroVol to numeric — as.numeric,SparseNeuroVol-method","title":"Convert SparseNeuroVol to numeric — as.numeric,SparseNeuroVol-method","text":"Convert SparseNeuroVol numeric","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.numeric-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert SparseNeuroVol to numeric — as.numeric,SparseNeuroVol-method","text":"","code":"# S4 method for class 'SparseNeuroVol' as.numeric(x)  # S4 method for class 'ROIVol' as.numeric(x)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.numeric-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert SparseNeuroVol to numeric — as.numeric,SparseNeuroVol-method","text":"x object convert","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.raster.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic Method for Converting Objects to Raster Format — as.raster","title":"Generic Method for Converting Objects to Raster Format — as.raster","text":"Converts object raster (bitmap) representation.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.raster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic Method for Converting Objects to Raster Format — as.raster","text":"x object converted. ... Additional arguments passed conversion methods.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.sparse-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert DenseNeuroVec to sparse representation using mask — as.sparse,DenseNeuroVec,LogicalNeuroVol-method","title":"Convert DenseNeuroVec to sparse representation using mask — as.sparse,DenseNeuroVec,LogicalNeuroVol-method","text":"method converts DenseNeuroVec object sparse representation using given LogicalNeuroVol mask. method converts DenseNeuroVec object sparse representation using given numeric mask. method converts DenseNeuroVec object sparse representation using given LogicalNeuroVol mask. method converts DenseNeuroVec object sparse representation using given numeric mask.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.sparse-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert DenseNeuroVec to sparse representation using mask — as.sparse,DenseNeuroVec,LogicalNeuroVol-method","text":"","code":"# S4 method for class 'DenseNeuroVec,LogicalNeuroVol' as.sparse(x, mask)  # S4 method for class 'DenseNeuroVec,numeric' as.sparse(x, mask)  # S4 method for class 'DenseNeuroVec,LogicalNeuroVol' as.sparse(x, mask)  # S4 method for class 'DenseNeuroVec,numeric' as.sparse(x, mask)  # S4 method for class 'DenseNeuroVol,LogicalNeuroVol' as.sparse(x, mask)  # S4 method for class 'DenseNeuroVol,numeric' as.sparse(x, mask)  # S4 method for class 'ROIVol,ANY' as.sparse(x)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.sparse-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert DenseNeuroVec to sparse representation using mask — as.sparse,DenseNeuroVec,LogicalNeuroVol-method","text":"x DenseNeuroVec object convert sparse representation. mask numeric vector representing mask apply conversion.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.sparse-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert DenseNeuroVec to sparse representation using mask — as.sparse,DenseNeuroVec,LogicalNeuroVol-method","text":"SparseNeuroVec object resulting conversion. SparseNeuroVec object resulting conversion. SparseNeuroVec object resulting conversion. SparseNeuroVec object resulting conversion.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.sparse.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert to from dense to sparse representation — as.sparse","title":"Convert to from dense to sparse representation — as.sparse","text":"Convert dense sparse representation","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.sparse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert to from dense to sparse representation — as.sparse","text":"","code":"as.sparse(x, mask, ...)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.sparse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert to from dense to sparse representation — as.sparse","text":"x object make sparse, e.g. DenseNeuroVol DenseNeuroVec mask elements retain ... additional arguments","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.sparse.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert to from dense to sparse representation — as.sparse","text":"mask can integer vector 1D indices mask volume class LogicalNeuroVol","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as.sparse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert to from dense to sparse representation — as.sparse","text":"","code":"bvol <- NeuroVol(array(runif(24*24*24), c(24,24,24)), NeuroSpace(c(24,24,24), c(1,1,1))) indmask <- sort(sample(1:(24*24*24), 100)) svol <- as.sparse(bvol, indmask)   mask <- LogicalNeuroVol(runif(length(indmask)), space=space(bvol), indices=indmask) sum(mask) == 100 #> [1] TRUE"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as_nifti_header.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct a Minimal NIfTI-1 Header from a NeuroVol — as_nifti_header","title":"Construct a Minimal NIfTI-1 Header from a NeuroVol — as_nifti_header","text":"Given NeuroVol object (similar), function builds basic NIfTI-1 header structure, populating essential fields dim, pixdim, datatype, affine transform, quaternion parameters.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as_nifti_header.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct a Minimal NIfTI-1 Header from a NeuroVol — as_nifti_header","text":"","code":"as_nifti_header(vol, file_name, oneFile = TRUE, data_type = \"FLOAT\")"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as_nifti_header.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct a Minimal NIfTI-1 Header from a NeuroVol — as_nifti_header","text":"vol NeuroVol (3D array-like) specifying dimensions, spacing, affine transform. file_name character string file name (used within header necessarily write data). oneFile Logical; TRUE, sets NIfTI magic \"n+1\", implying single-file format (.nii). FALSE, uses \"ni1\" (header+image). data_type Character specifying data representation, e.g. \"FLOAT\", \"DOUBLE\". internal code picks integer NIfTI code.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as_nifti_header.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct a Minimal NIfTI-1 Header from a NeuroVol — as_nifti_header","text":"list representing NIfTI-1 header fields, containing   elements like dimensions, pixdim, datatype, qform,   quaternion, qfac, etc. can passed   functions write manipulate header.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/as_nifti_header.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Construct a Minimal NIfTI-1 Header from a NeuroVol — as_nifti_header","text":"convenience function calls createNIfTIHeader first, updates fields (dimensions, pixdim, orientation, etc.) based vol argument. voxel offset set 352 bytes, quaternion derived transform matrix via matrixToQuatern. Note: function primarily sets minimal header suitable writing standard single-file NIfTI-1. need comprehensive advanced usage, consider manually editing returned list.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/axes-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Image Axes — axes","title":"Extract Image Axes — axes","text":"Extract Image Axes","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/axes-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Image Axes — axes","text":"","code":"axes(x)  # S4 method for class 'NeuroSpace' axes(x)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/axes-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Image Axes — axes","text":"x object set axes","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/axes-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Image Axes — axes","text":"`axes` associated object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/axes-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Image Axes — axes","text":"","code":"x <- NeuroSpace(c(10,10,10), spacing=c(1,1,1)) class(axes(x)) == \"AxisSet3D\" #> [1] TRUE"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/bilateral_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a bilateral filter to a volumetric image — bilateral_filter","title":"Apply a bilateral filter to a volumetric image — bilateral_filter","text":"function smooths volumetric image (3D brain MRI data) using bilateral filter. bilateral filter considers spatial closeness intensity similarity smoothing.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/bilateral_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a bilateral filter to a volumetric image — bilateral_filter","text":"","code":"bilateral_filter(vol, mask, spatial_sigma = 2, intensity_sigma = 1, window = 1)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/bilateral_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply a bilateral filter to a volumetric image — bilateral_filter","text":"vol NeuroVol object representing image volume smoothed. mask optional LogicalNeuroVol object representing image mask defines region filtering applied. provided, entire volume considered. spatial_sigma numeric value specifying standard deviation spatial Gaussian kernel (default 2). intensity_sigma numeric value specifying standard deviation intensity Gaussian kernel (default 25). window integer specifying number voxels around center voxel include side. example, window=1 3x3x3 kernel (default 1).","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/bilateral_filter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply a bilateral filter to a volumetric image — bilateral_filter","text":"smoothed image class NeuroVol.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/bilateral_filter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply a bilateral filter to a volumetric image — bilateral_filter","text":"","code":"brain_mask <- read_vol(system.file(\"extdata\", \"global_mask_v4.nii\", package=\"neuroim2\"))  # Apply bilateral filtering to the brain volume filtered_vol <- bilateral_filter(brain_mask, brain_mask, spatial_sigma = 2, intensity_sigma = 25, window = 1)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/bootstrap_searchlight.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a bootstrap spherical searchlight iterator — bootstrap_searchlight","title":"Create a bootstrap spherical searchlight iterator — bootstrap_searchlight","text":"function generates spherical searchlight iterator sampling regions within brain mask. creates searchlight spheres around random center voxels, allowing surrounding voxel belong multiple searchlight samples.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/bootstrap_searchlight.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a bootstrap spherical searchlight iterator — bootstrap_searchlight","text":"","code":"bootstrap_searchlight(mask, radius = 8, iter = 100)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/bootstrap_searchlight.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a bootstrap spherical searchlight iterator — bootstrap_searchlight","text":"mask NeuroVol object representing brain mask. radius numeric value specifying radius searchlight sphere voxel units. Default 8. iter integer specifying total number searchlights sample. Default 100.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/bootstrap_searchlight.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a bootstrap spherical searchlight iterator — bootstrap_searchlight","text":"deferred_list object containing ROIVolWindow   objects, representing spherical searchlight region sampled within mask.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/bootstrap_searchlight.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a bootstrap spherical searchlight iterator — bootstrap_searchlight","text":"Searchlight centers sampled without replacement, surrounding voxel can belong multiple searchlight samples.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/bootstrap_searchlight.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a bootstrap spherical searchlight iterator — bootstrap_searchlight","text":"","code":"# Load an example brain mask mask <- read_vol(system.file(\"extdata\", \"global_mask_v4.nii\", package=\"neuroim2\"))  # Generate a bootstrap searchlight iterator with a radius of 6 voxels if (FALSE) { # \\dontrun{ searchlights <- bootstrap_searchlight(mask, radius = 6) } # }"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/bounds-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Spatial Bounds of an Image — bounds","title":"Extract Spatial Bounds of an Image — bounds","text":"function extracts spatial bounds (origin + dim * spacing) image represented input object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/bounds-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Spatial Bounds of an Image — bounds","text":"","code":"bounds(x)  # S4 method for class 'NeuroSpace' bounds(x)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/bounds-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Spatial Bounds of an Image — bounds","text":"x object `bounds` property, typically image.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/bounds-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Spatial Bounds of an Image — bounds","text":"matrix row contains min (column 1) max (column 2) bounds image dimension 1 `ndim(image)`.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/bounds-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Spatial Bounds of an Image — bounds","text":"","code":"bspace <- NeuroSpace(c(10, 10, 10), c(2, 2, 2)) b <- bounds(bspace) nrow(b) == ndim(bspace) #> [1] TRUE ncol(b) == 2 #> [1] TRUE"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/centroid-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"return the centroid of an object — centroid","title":"return the centroid of an object — centroid","text":"return centroid object","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/centroid-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"return the centroid of an object — centroid","text":"","code":"centroid(x, ...)  # S4 method for class 'NeuroSpace' centroid(x)  # S4 method for class 'ROICoords' centroid(x)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/centroid-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"return the centroid of an object — centroid","text":"x object centroid ... extra args","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/centroid-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"return the centroid of an object — centroid","text":"centroid object","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/centroid-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"return the centroid of an object — centroid","text":"","code":"bspace <- NeuroSpace(c(10,10,10), c(2,2,2)) centroid(bspace) #> [1] 10 10 10"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/centroids-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Return a matrix of centroids of an object — centroids","title":"Return a matrix of centroids of an object — centroids","text":"Return matrix centroids object","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/centroids-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return a matrix of centroids of an object — centroids","text":"","code":"centroids(x, ...)  # S4 method for class 'ClusteredNeuroVol' centroids(x, type = c(\"center_of_mass\", \"medoid\"))"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/centroids-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return a matrix of centroids of an object — centroids","text":"x object multiple centroids (e.g. ClusteredNeuroVol) ... extra args type type center mass: one \"center_of_mass\" \"medoid\"","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/close-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Close a BinaryReader or BinaryWriter — close,BinaryReader-method","title":"Close a BinaryReader or BinaryWriter — close,BinaryReader-method","text":"Closes underlying connection associated BinaryReader BinaryWriter object. called done reader/writer free system resources.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/close-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Close a BinaryReader or BinaryWriter — close,BinaryReader-method","text":"","code":"# S4 method for class 'BinaryReader' close(con)  # S4 method for class 'BinaryWriter' close(con)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/close-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Close a BinaryReader or BinaryWriter — close,BinaryReader-method","text":"con BinaryReader BinaryWriter object close.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/close-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Close a BinaryReader or BinaryWriter — close,BinaryReader-method","text":"Invisibly returns NULL.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/close-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Close a BinaryReader or BinaryWriter — close,BinaryReader-method","text":"","code":"if (FALSE) { # \\dontrun{ # Create and close a binary reader reader <- BinaryReader(\"data.bin\", byte_offset = 0L,                       data_type = \"double\", bytes_per_element = 8L) close(reader)  # Create and close a binary writer writer <- BinaryWriter(\"output.bin\", byte_offset = 0L,                       data_type = \"double\", bytes_per_element = 8L) close(writer) } # }"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/clustered_searchlight.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a clustered searchlight iterator — clustered_searchlight","title":"Create a clustered searchlight iterator — clustered_searchlight","text":"function generates searchlight iterator iterates successive spatial clusters image volume. allows exploration spatially clustered regions within provided mask using either pre-defined clustered volume performing k-means clustering generate clusters.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/clustered_searchlight.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a clustered searchlight iterator — clustered_searchlight","text":"","code":"clustered_searchlight(mask, cvol = NULL, csize = NULL)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/clustered_searchlight.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a clustered searchlight iterator — clustered_searchlight","text":"mask NeuroVol object representing brain mask. cvol optional ClusteredNeuroVol instance representing pre-defined clusters within mask. provided, 'csize' parameter ignored. csize optional integer specifying number clusters generated using k-means clustering (ignored cvol provided).","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/clustered_searchlight.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a clustered searchlight iterator — clustered_searchlight","text":"deferred_list object containing ROIVol objects,   representing clustered region within image volume.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/clustered_searchlight.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a clustered searchlight iterator — clustered_searchlight","text":"","code":"# Load an example brain mask mask <- read_vol(system.file(\"extdata\", \"global_mask_v4.nii\", package=\"neuroim2\"))  # Generate a clustered searchlight iterator with 5 clusters if (FALSE) { # \\dontrun{ clust_searchlight <- clustered_searchlight(mask, csize = 5) } # }"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/concat-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Concatenate two objects in the time dimension — concat","title":"Concatenate two objects in the time dimension — concat","text":"Concatenate two objects time dimension","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/concat-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Concatenate two objects in the time dimension — concat","text":"","code":"concat(x, y, ...)  # S4 method for class 'NeuroVec,NeuroVol' concat(x, y, ...)  # S4 method for class 'NeuroVol,NeuroVec' concat(x, y, ...)  # S4 method for class 'NeuroVec,NeuroVec' concat(x, y, ...)  # S4 method for class 'ROIVec,ROIVec' concat(x, y, ...)  # S4 method for class 'DenseNeuroVol,missing' concat(x, y, ...)  # S4 method for class 'DenseNeuroVol,DenseNeuroVol' concat(x, y, ...)  # S4 method for class 'AbstractSparseNeuroVec,missing' concat(x, y, ...)  # S4 method for class 'SparseNeuroVec,SparseNeuroVec' concat(x, y, ...)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/concat-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Concatenate two objects in the time dimension — concat","text":"x first object, typically NeuroVol NeuroVec y second object, typically NeuroVol NeuroVec ... additional objects","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/concat-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Concatenate two objects in the time dimension — concat","text":"temporally concatenated object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/concat-methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Concatenate two objects in the time dimension — concat","text":"x y images must compatible dimensions. NeuroVol can concatenated NeuroVec, vice versa. See examples.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/concat-methods.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Concatenate two objects in the time dimension — concat","text":"dimensions x y must equal","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/concat-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Concatenate two objects in the time dimension — concat","text":"","code":"bv1 <- NeuroVol(rep(1,1000), NeuroSpace(c(10,10,10), c(1,1,1))) bv2 <- NeuroVol(rep(2,1000), NeuroSpace(c(10,10,10), c(1,1,1))) bv3 <- concat(bv1,bv2) inherits(bv3, \"NeuroVec\") #> [1] TRUE  bv4 <- concat(bv3, bv1) dim(bv4)[4] == 3 #> [1] TRUE bv5 <- concat(bv1, bv3) dim(bv4)[4] == 3 #> [1] TRUE  bv6 <- concat(bv4,bv5) dim(bv6)[4] == 6 #> [1] TRUE"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/conn_comp-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Connected components — conn_comp","title":"Connected components — conn_comp","text":"Find connected components image","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/conn_comp-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Connected components — conn_comp","text":"","code":"conn_comp(x, ...)  # S4 method for class 'NeuroVol' conn_comp(   x,   threshold = 0,   cluster_table = TRUE,   local_maxima = TRUE,   local_maxima_dist = 15,   ... )"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/conn_comp-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Connected components — conn_comp","text":"x image object ... additional arguments threshold threshold defining lower intensity bound image mask cluster_table return cluster_table local_maxima return table local maxima local_maxima_dist distance used define minum distance local maxima","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/conn_comp_3D.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Connected Components from a 3D Binary Mask — conn_comp_3D","title":"Extract Connected Components from a 3D Binary Mask — conn_comp_3D","text":"Identifies labels connected components 3D binary mask using two-pass algorithm. function supports different connectivity constraints returns component indices sizes.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/conn_comp_3D.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Connected Components from a 3D Binary Mask — conn_comp_3D","text":"","code":"conn_comp_3D(mask, connect = c(\"26-connect\", \"18-connect\", \"6-connect\"))"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/conn_comp_3D.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Connected Components from a 3D Binary Mask — conn_comp_3D","text":"mask 3D logical array representing binary mask connect character string specifying connectivity constraint. One \"26-connect\" (default), \"18-connect\", \"6-connect\"","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/conn_comp_3D.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Connected Components from a 3D Binary Mask — conn_comp_3D","text":"list following components: index 3D array integers. non-zero value represents cluster index                connected component voxel. Zero values indicate background. size 3D array integers. non-zero value represents size (number voxels)               connected component voxel belongs . Zero values indicate background.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/conn_comp_3D.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract Connected Components from a 3D Binary Mask — conn_comp_3D","text":"function implements efficient two-pass connected component labeling algorithm: First pass: Assigns provisional labels builds equivalence table using         union-find data structure label resolution Second pass: Resolves label conflicts assigns final component labels connectivity options determine voxels considered adjacent: 6-connect: face-adjacent voxels (±1 step along axis) 18-connect: Face edge-adjacent voxels 26-connect: Face, edge, vertex-adjacent voxels (neighbors 3x3x3 cube) Time complexity O(n) n number voxels mask, additional O(k) space union-find data structure k number provisional labels.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/conn_comp_3D.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Extract Connected Components from a 3D Binary Mask — conn_comp_3D","text":"Rosenfeld, ., & Pfaltz, J. L. (1966). Sequential operations digital picture processing. Journal ACM, 13(4), 471-494.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/conn_comp_3D.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Connected Components from a 3D Binary Mask — conn_comp_3D","text":"","code":"# Create a simple 3D binary mask with two disconnected components mask <- array(FALSE, c(4, 4, 4)) mask[1:2, 1:2, 1:2] <- TRUE  # First component mask[3:4, 3:4, 3:4] <- TRUE  # Second component  # Extract components using different connectivity patterns comps <- conn_comp_3D(mask, connect = \"6-connect\")  # Number of components max_comps <- max(comps$index) cat(\"Found\", max_comps, \"components\\n\") #> Found 2 components  # Size of each component unique_sizes <- unique(comps$size[comps$size > 0]) cat(\"Component sizes:\", paste(unique_sizes, collapse=\", \"), \"\\n\") #> Component sizes: 8   # Try with different connectivity comps_26 <- conn_comp_3D(mask, connect = \"26-connect\") cat(\"Number of components with 26-connectivity:\", max(comps_26$index), \"\\n\") #> Number of components with 26-connectivity: 1"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/coord_to_grid-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"convert n-dimensional real world coordinates to grid coordinates — coord_to_grid","title":"convert n-dimensional real world coordinates to grid coordinates — coord_to_grid","text":"convert n-dimensional real world coordinates grid coordinates","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/coord_to_grid-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"convert n-dimensional real world coordinates to grid coordinates — coord_to_grid","text":"","code":"coord_to_grid(x, coords)  # S4 method for class 'NeuroSpace,matrix' coord_to_grid(x, coords)  # S4 method for class 'NeuroSpace,numeric' coord_to_grid(x, coords)  # S4 method for class 'NeuroVol,matrix' coord_to_grid(x, coords)  # S4 method for class 'NeuroVol,numeric' coord_to_grid(x, coords)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/coord_to_grid-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"convert n-dimensional real world coordinates to grid coordinates — coord_to_grid","text":"x object coords matrix real world coordinates","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/coord_to_grid-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"convert n-dimensional real world coordinates to grid coordinates — coord_to_grid","text":"matrix grid coordinates","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/coord_to_index-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"convert n-dimensional real world coordinates to 1D indices — coord_to_index","title":"convert n-dimensional real world coordinates to 1D indices — coord_to_index","text":"convert n-dimensional real world coordinates 1D indices","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/coord_to_index-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"convert n-dimensional real world coordinates to 1D indices — coord_to_index","text":"","code":"coord_to_index(x, coords)  # S4 method for class 'NeuroSpace,matrix' coord_to_index(x, coords)  # S4 method for class 'NeuroSpace,numeric' coord_to_index(x, coords)  # S4 method for class 'NeuroVol,matrix' coord_to_index(x, coords)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/coord_to_index-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"convert n-dimensional real world coordinates to 1D indices — coord_to_index","text":"x object coords matrix real world coordinates","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/coord_to_index-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"convert n-dimensional real world coordinates to 1D indices — coord_to_index","text":"vector indices","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/coords-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Coordinates from an IndexLookupVol Object — coords,IndexLookupVol-method","title":"Extract Coordinates from an IndexLookupVol Object — coords,IndexLookupVol-method","text":"Extracts coordinates IndexLookupVol object based given index.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/coords-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Coordinates from an IndexLookupVol Object — coords,IndexLookupVol-method","text":"","code":"# S4 method for class 'IndexLookupVol' coords(x, i)  # S4 method for class 'ROIVol' coords(x, real = FALSE)  # S4 method for class 'ROICoords' coords(x, real = FALSE)  # S4 method for class 'ROICoords' coords(x, real = FALSE)  # S4 method for class 'AbstractSparseNeuroVec' coords(x, i)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/coords-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Coordinates from an IndexLookupVol Object — coords,IndexLookupVol-method","text":"x IndexLookupVol object extract coordinates index lookup volume real TRUE, return coordinates real world units","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/coords-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Coordinates from an IndexLookupVol Object — coords,IndexLookupVol-method","text":"extracted coordinates corresponding provided index         index found, returns NA matrix coordinates","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/coords-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Coordinates from an IndexLookupVol Object — coords,IndexLookupVol-method","text":"","code":"if (FALSE) { # \\dontrun{ ilv <- IndexLookupVol(space, c(1:100)) coords(ilv, 1)  # Extract coordinates for index 1 } # }"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/coords.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract coordinates from an object — coords","title":"Extract coordinates from an object — coords","text":"function extracts coordinates input object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/coords.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract coordinates from an object — coords","text":"","code":"coords(x, ...)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/coords.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract coordinates from an object — coords","text":"x object extract coordinates . ... Additional arguments (used generic function).","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/coords.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract coordinates from an object — coords","text":"extracted coordinates.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/createNIfTIHeader.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an Empty NIfTI-1 Header List — createNIfTIHeader","title":"Create an Empty NIfTI-1 Header List — createNIfTIHeader","text":"Initializes list fields following NIfTI-1 specification default placeholder values. Users typically call internally via as_nifti_header rather using directly.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/createNIfTIHeader.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an Empty NIfTI-1 Header List — createNIfTIHeader","text":"","code":"createNIfTIHeader(oneFile = TRUE, file_name = NULL)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/createNIfTIHeader.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an Empty NIfTI-1 Header List — createNIfTIHeader","text":"oneFile Logical; TRUE, magic set \"n+1\" indicating single-file (.nii) approach. Otherwise set \"ni1\". file_name Optional character string store header, usually referencing intended output file name.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/createNIfTIHeader.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an Empty NIfTI-1 Header List — createNIfTIHeader","text":"named list containing approximately 30 fields comprise   NIfTI-1 header structure. Many placeholders filled   downstream usage.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/createNIfTIHeader.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create an Empty NIfTI-1 Header List — createNIfTIHeader","text":"function sets skeleton NIfTI-1 header, including fields diminfo, pixdim, qform_code, magic, etc. fields initialized zero, empty characters, standard placeholders. oneFile argument controls whether \"n+1\" \"ni1\" used magic field.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/cuboid_roi.html","id":null,"dir":"Reference","previous_headings":"","what":"Create A Cuboid Region of Interest — cuboid_roi","title":"Create A Cuboid Region of Interest — cuboid_roi","text":"Create Cuboid Region Interest","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/cuboid_roi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create A Cuboid Region of Interest — cuboid_roi","text":"","code":"cuboid_roi(bvol, centroid, surround, fill = NULL, nonzero = FALSE)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/cuboid_roi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create A Cuboid Region of Interest — cuboid_roi","text":"bvol NeuroVol NeuroSpace instance centroid center cube voxel coordinates surround number voxels either side central voxel. vector length 3. fill optional value(s) assign data slot. nonzero keep nonzero elements bvol. bvol NeuroSpace argument ignored.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/cuboid_roi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create A Cuboid Region of Interest — cuboid_roi","text":"instance class ROIVol","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/cuboid_roi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create A Cuboid Region of Interest — cuboid_roi","text":"","code":"sp1 <- NeuroSpace(c(10,10,10), c(1,1,1))  cube <- cuboid_roi(sp1, c(5,5,5), 3)  vox <- coords(cube)  cube2 <- cuboid_roi(sp1, c(5,5,5), 3, fill=5)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/data_file-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic function to get the name of the data file, given a file name and a FileFormat instance. — data_file","title":"Generic function to get the name of the data file, given a file name and a FileFormat instance. — data_file","text":"Derives data file name given file name based FileFormat specifications.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/data_file-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic function to get the name of the data file, given a file name and a FileFormat instance. — data_file","text":"","code":"data_file(x, file_name)  # S4 method for class 'FileFormat,character' data_file(x, file_name)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/data_file-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic function to get the name of the data file, given a file name and a FileFormat instance. — data_file","text":"x FileFormat object specifying format requirements file_name character string specifying file name derive data file name ","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/data_file-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic function to get the name of the data file, given a file name and a FileFormat instance. — data_file","text":"correct header name character string representing data file name","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/data_file-methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generic function to get the name of the data file, given a file name and a FileFormat instance. — data_file","text":"function performs following steps: input file_name already matches data file format, returns     file_name . file_name matches header file format, constructs returns     corresponding data file name. file_name match either format, throws error.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/data_file-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic function to get the name of the data file, given a file name and a FileFormat instance. — data_file","text":"","code":"if (FALSE) { # \\dontrun{ fmt <- new(\"FileFormat\", header_extension = \"hdr\", data_extension = \"img\") data_file(fmt, \"brain_scan.img\")  # Returns \"brain_scan.img\" data_file(fmt, \"brain_scan.hdr\")  # Returns \"brain_scan.img\" } # }"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/data_file_matches-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic function to test whether a file name conforms to the given a FileFormat instance. Will test for match to data file only — data_file_matches","title":"Generic function to test whether a file name conforms to the given a FileFormat instance. Will test for match to data file only — data_file_matches","text":"Validates whether file name conforms data file format specification.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/data_file_matches-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic function to test whether a file name conforms to the given a FileFormat instance. Will test for match to data file only — data_file_matches","text":"","code":"data_file_matches(x, file_name)  # S4 method for class 'FileFormat,character' data_file_matches(x, file_name)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/data_file_matches-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic function to test whether a file name conforms to the given a FileFormat instance. Will test for match to data file only — data_file_matches","text":"x FileFormat object specifying format requirements file_name character string specifying file name validate","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/data_file_matches-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic function to test whether a file name conforms to the given a FileFormat instance. Will test for match to data file only — data_file_matches","text":"TRUE match, FALSE otherwise logical value: TRUE file name matches data format,   FALSE otherwise","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/data_file_matches-methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generic function to test whether a file name conforms to the given a FileFormat instance. Will test for match to data file only — data_file_matches","text":"function performs case-sensitive pattern matching verify file name ends specified data extension. match performed using regular expression ensures extension appears end file name.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/data_file_matches-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic function to test whether a file name conforms to the given a FileFormat instance. Will test for match to data file only — data_file_matches","text":"","code":"if (FALSE) { # \\dontrun{ fmt <- new(\"FileFormat\", header_extension = \"hdr\", data_extension = \"img\") data_file_matches(fmt, \"brain_scan.img\")  # TRUE data_file_matches(fmt, \"brain_scan.hdr\")  # FALSE data_file_matches(fmt, \"brain.img.gz\")    # FALSE } # }"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/data_reader-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Data Reader for AFNI Format — data_reader,NIFTIMetaInfo-method","title":"Create Data Reader for AFNI Format — data_reader,NIFTIMetaInfo-method","text":"Create Data Reader AFNI Format","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/data_reader-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Data Reader for AFNI Format — data_reader,NIFTIMetaInfo-method","text":"","code":"# S4 method for class 'NIFTIMetaInfo' data_reader(x, offset = 0)  # S4 method for class 'AFNIMetaInfo' data_reader(x, offset = 0)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/data_reader-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Data Reader for AFNI Format — data_reader,NIFTIMetaInfo-method","text":"x AFNIMetaInfo object offset Numeric byte offset","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/data_reader-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Data Reader for AFNI Format — data_reader,NIFTIMetaInfo-method","text":"BinaryReader object","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/data_reader.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Data Reader — data_reader","title":"Create a Data Reader — data_reader","text":"Creates data reader accessing neuroimaging data various file formats.   reader provides unified interface reading data regardless underlying format.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/data_reader.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Data Reader — data_reader","text":"","code":"data_reader(x, offset)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/data_reader.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Data Reader — data_reader","text":"x object containing metadata required create reader (e.g., file path, format info) offset Numeric. Byte offset data reading begin. Default 0.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/data_reader.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Data Reader — data_reader","text":"BinaryReader object configured specific data format","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/data_reader.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a Data Reader — data_reader","text":"Create Data Reader Neuroimaging Data data_reader function generic creates appropriate readers different neuroimaging formats. handles: File format detection validation Endianness configuration Data type conversion Compression handling (e.g., gzip) Proper byte alignment","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/data_reader.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Data Reader — data_reader","text":"","code":"if (FALSE) { # \\dontrun{ # Create reader for NIFTI file meta <- read_header(\"brain.nii\") reader <- data_reader(meta, offset = 0)  # Read first 100 voxels data <- reader$read(100) } # }"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/dim-NeuroSpace-method.html","id":null,"dir":"Reference","previous_headings":"","what":"dim — dim,NeuroSpace-method","title":"dim — dim,NeuroSpace-method","text":"dim","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/dim-NeuroSpace-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"dim — dim,NeuroSpace-method","text":"","code":"# S4 method for class 'NeuroSpace' dim(x)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/dim-NeuroSpace-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"dim — dim,NeuroSpace-method","text":"x object","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/dim-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Dimensions of FileMetaInfo Object — dim,FileMetaInfo-method","title":"Get Dimensions of FileMetaInfo Object — dim,FileMetaInfo-method","text":"Get Dimensions FileMetaInfo Object dim NeuroObj object Get dimensions object","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/dim-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Dimensions of FileMetaInfo Object — dim,FileMetaInfo-method","text":"","code":"# S4 method for class 'FileMetaInfo' dim(x)  # S4 method for class 'NeuroObj' dim(x)  # S4 method for class 'ROIVol' dim(x)  # S4 method for class 'ROICoords' dim(x)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/dim-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Dimensions of FileMetaInfo Object — dim,FileMetaInfo-method","text":"x object","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/dim-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Dimensions of FileMetaInfo Object — dim,FileMetaInfo-method","text":"Integer vector image dimensions","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/dim_of-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the length of a given dimension of an object — dim_of","title":"Get the length of a given dimension of an object — dim_of","text":"function returns length given axis (dimension) object. axis can specified using position name.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/dim_of-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the length of a given dimension of an object — dim_of","text":"","code":"dim_of(x, axis)  # S4 method for class 'NeuroSpace,NamedAxis' dim_of(x, axis)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/dim_of-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the length of a given dimension of an object — dim_of","text":"x object whose axis query axis integer character string indicating axis query","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/dim_of-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the length of a given dimension of an object — dim_of","text":"integer representing length specified axis.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/dim_of-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the length of a given dimension of an object — dim_of","text":"","code":"x <- NeuroSpace(c(10,10,10), spacing=c(1,1,1)) stopifnot(dim_of(x, x@axes@i) == 10)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/drop-NeuroVec-method.html","id":null,"dir":"Reference","previous_headings":"","what":"drop — drop,NeuroVec-method","title":"drop — drop,NeuroVec-method","text":"function drops last dimension NeuroVec object length 1. function drops last dimension NeuroVec object length 1.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/drop-NeuroVec-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"drop — drop,NeuroVec-method","text":"","code":"# S4 method for class 'NeuroVec' drop(x)  # S4 method for class 'NeuroVec' drop(x)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/drop-NeuroVec-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"drop — drop,NeuroVec-method","text":"x NeuroVec object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/drop-NeuroVec-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"drop — drop,NeuroVec-method","text":"last dimension NeuroVec object length 1, DenseNeuroVol   object returned. Otherwise, original NeuroVec object returned. last dimension NeuroVec object length 1, DenseNeuroVol   object returned. Otherwise, original NeuroVec object returned.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/drop.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic Drop Method — drop","title":"Generic Drop Method — drop","text":"Provides mechanism remove dimensions elements object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/drop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic Drop Method — drop","text":"","code":"drop(x)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/drop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic Drop Method — drop","text":"x object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/drop_dim-AxisSet2D-missing-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Drop dimension from axis set — drop_dim,AxisSet2D,missing-method","title":"Drop dimension from axis set — drop_dim,AxisSet2D,missing-method","text":"Drop dimension axis set","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/drop_dim-AxisSet2D-missing-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Drop dimension from axis set — drop_dim,AxisSet2D,missing-method","text":"","code":"# S4 method for class 'AxisSet2D,missing' drop_dim(x, dimnum)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/drop_dim-AxisSet2D-missing-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Drop dimension from axis set — drop_dim,AxisSet2D,missing-method","text":"x AxisSet2D object dimnum Numeric index dimension drop (optional)","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/drop_dim-AxisSet2D-missing-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Drop dimension from axis set — drop_dim,AxisSet2D,missing-method","text":"axis set one fewer dimension","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/drop_dim-AxisSet2D-missing-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Drop dimension from axis set — drop_dim,AxisSet2D,missing-method","text":"","code":"if (FALSE) { # \\dontrun{ axes2d <- AxisSet2D(LEFT_RIGHT, ANT_POST) axes1d <- drop_dim(axes2d)  # Drop first dimension } # }"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/drop_dim-AxisSet2D-numeric-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Drop dimension from axis set — drop_dim,AxisSet2D,numeric-method","title":"Drop dimension from axis set — drop_dim,AxisSet2D,numeric-method","text":"Drop dimension axis set","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/drop_dim-AxisSet2D-numeric-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Drop dimension from axis set — drop_dim,AxisSet2D,numeric-method","text":"","code":"# S4 method for class 'AxisSet2D,numeric' drop_dim(x, dimnum)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/drop_dim-AxisSet2D-numeric-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Drop dimension from axis set — drop_dim,AxisSet2D,numeric-method","text":"x AxisSet2D AxisSet3D object dimnum Numeric index dimension drop","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/drop_dim-AxisSet2D-numeric-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Drop dimension from axis set — drop_dim,AxisSet2D,numeric-method","text":"axis set one fewer dimension","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/drop_dim-AxisSet2D-numeric-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Drop dimension from axis set — drop_dim,AxisSet2D,numeric-method","text":"","code":"if (FALSE) { # \\dontrun{ axes3d <- AxisSet3D(LEFT_RIGHT, ANT_POST, INF_SUP) axes2d <- drop_dim(axes3d, 1)  # Drop first dimension } # }"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/drop_dim-AxisSet3D-missing-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Drop dimension from axis set — drop_dim,AxisSet3D,missing-method","title":"Drop dimension from axis set — drop_dim,AxisSet3D,missing-method","text":"Drop dimension axis set","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/drop_dim-AxisSet3D-missing-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Drop dimension from axis set — drop_dim,AxisSet3D,missing-method","text":"","code":"# S4 method for class 'AxisSet3D,missing' drop_dim(x, dimnum)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/drop_dim-AxisSet3D-missing-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Drop dimension from axis set — drop_dim,AxisSet3D,missing-method","text":"x AxisSet3D object dimnum Numeric index dimension drop (optional)","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/drop_dim-AxisSet3D-missing-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Drop dimension from axis set — drop_dim,AxisSet3D,missing-method","text":"axis set one fewer dimension","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/drop_dim-AxisSet3D-missing-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Drop dimension from axis set — drop_dim,AxisSet3D,missing-method","text":"","code":"if (FALSE) { # \\dontrun{ axes3d <- AxisSet3D(LEFT_RIGHT, ANT_POST, INF_SUP) axes2d <- drop_dim(axes3d)  # Drop first dimension } # }"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/drop_dim-AxisSet3D-numeric-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Drop dimension from axis set — drop_dim,AxisSet3D,numeric-method","title":"Drop dimension from axis set — drop_dim,AxisSet3D,numeric-method","text":"Drop dimension axis set","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/drop_dim-AxisSet3D-numeric-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Drop dimension from axis set — drop_dim,AxisSet3D,numeric-method","text":"","code":"# S4 method for class 'AxisSet3D,numeric' drop_dim(x, dimnum)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/drop_dim-AxisSet3D-numeric-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Drop dimension from axis set — drop_dim,AxisSet3D,numeric-method","text":"x AxisSet3D object dimnum Numeric index dimension drop","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/drop_dim-AxisSet3D-numeric-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Drop dimension from axis set — drop_dim,AxisSet3D,numeric-method","text":"axis set one fewer dimension","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/drop_dim-AxisSet3D-numeric-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Drop dimension from axis set — drop_dim,AxisSet3D,numeric-method","text":"","code":"if (FALSE) { # \\dontrun{ axes3d <- AxisSet3D(LEFT_RIGHT, ANT_POST, INF_SUP) axes2d <- drop_dim(axes3d, 1)  # Drop first dimension } # }"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/drop_dim-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Drop a Dimension from an Object — drop_dim","title":"Drop a Dimension from an Object — drop_dim","text":"function removes specified dimension given object, matrix array.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/drop_dim-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Drop a Dimension from an Object — drop_dim","text":"","code":"drop_dim(x, dimnum)  # S4 method for class 'NeuroSpace,numeric' drop_dim(x, dimnum)  # S4 method for class 'NeuroSpace,missing' drop_dim(x)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/drop_dim-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Drop a Dimension from an Object — drop_dim","text":"x dimensioned object, NeuroSpace object. dimnum integer representing index dimension drop.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/drop_dim-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Drop a Dimension from an Object — drop_dim","text":"updated dimensioned object specified dimension removed.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/drop_dim-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Drop a Dimension from an Object — drop_dim","text":"","code":"# Create a NeuroSpace object with dimensions (10, 10, 10) x <- NeuroSpace(c(10, 10, 10), c(1, 1, 1))  # Drop the first dimension x1 <- drop_dim(x, 1)  # Check the new dimensions ndim(x1) == 2 #> [1] TRUE dim(x1)[1] == 10 #> [1] TRUE"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/embed_kernel-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic function to position kernel in a postion in image space — embed_kernel","title":"Generic function to position kernel in a postion in image space — embed_kernel","text":"Generic function position kernel postion image space","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/embed_kernel-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic function to position kernel in a postion in image space — embed_kernel","text":"","code":"embed_kernel(x, sp, center_voxel, ...)  # S4 method for class 'Kernel,NeuroSpace,numeric' embed_kernel(x, sp, center_voxel, weight = 1)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/embed_kernel-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic function to position kernel in a postion in image space — embed_kernel","text":"x kernel object sp space embed kernel center_voxel voxel marking center kernel embedded space ... extra args weight multiply kernel weights value","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/extract-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract or replace parts of an object — [","title":"Extract or replace parts of an object — [","text":"Extract replace parts object subset ROIVol","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/extract-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract or replace parts of an object — [","text":"","code":"# S4 method for class 'ROIVol,numeric,missing,ANY' x[i, j, ..., drop = TRUE]  # S4 method for class 'ROIVol,numeric,missing,ANY' x[i, j, ..., drop = TRUE]  # S4 method for class 'ROIVol,logical,missing,ANY' x[i, j, ..., drop = TRUE]"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/extract-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract or replace parts of an object — [","text":"x object first index j second index ... additional arguments drop drop dimension","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/extractor3d.html","id":null,"dir":"Reference","previous_headings":"","what":"Array-like access for 3-dimensional data structures — extractor3d","title":"Array-like access for 3-dimensional data structures — extractor3d","text":"generic function provides array-like access 3-dimensional data structures. allows flexible indexing subsetting 3D arrays array-like objects.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/extractor3d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Array-like access for 3-dimensional data structures — extractor3d","text":"","code":"# S4 method for class 'ArrayLike3D,numeric,missing,ANY' x[i, j, k, ..., drop = TRUE]  # S4 method for class 'ArrayLike3D,matrix,missing,ANY' x[i, j, k, ..., drop = TRUE]  # S4 method for class 'ArrayLike3D,missing,missing,ANY' x[i, j, k, ..., drop = TRUE]  # S4 method for class 'ArrayLike3D,missing,numeric,ANY' x[i, j, k, ..., drop = TRUE]"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/extractor3d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Array-like access for 3-dimensional data structures — extractor3d","text":"x 3-dimensional object accessed. First index dimension. j Second index dimension. k Third index dimension. ... Additional arguments passed methods. drop Logical. TRUE, result coerced lowest possible dimension.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/extractor3d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Array-like access for 3-dimensional data structures — extractor3d","text":"subset input object, dimensions depending indexing `drop` parameter.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/extractor4d.html","id":null,"dir":"Reference","previous_headings":"","what":"Array-like access for 4-dimensional data structures — extractor4d","title":"Array-like access for 4-dimensional data structures — extractor4d","text":"generic function provides array-like access 4-dimensional data structures. allows flexible indexing subsetting 4D arrays array-like objects.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/extractor4d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Array-like access for 4-dimensional data structures — extractor4d","text":"","code":"# S4 method for class 'ArrayLike4D,matrix,missing,ANY' x[i, j, k, m, ..., drop = TRUE]  # S4 method for class 'ArrayLike4D,numeric,numeric,ANY' x[i, j, k, m, ..., drop = TRUE]  # S4 method for class 'ArrayLike4D,numeric,missing,ANY' x[i, j, k, m, ..., drop = TRUE]  # S4 method for class 'ArrayLike4D,integer,missing,ANY' x[i, j, k, m, ..., drop = TRUE]  # S4 method for class 'ArrayLike4D,missing,missing,ANY' x[i, j, k, m, ..., drop = TRUE]  # S4 method for class 'ArrayLike4D,missing,numeric,ANY' x[i, j, k, m, ..., drop = TRUE]"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/extractor4d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Array-like access for 4-dimensional data structures — extractor4d","text":"x 4-dimensional object accessed. First index dimension. j Second index dimension. k Third index dimension. m Fourth index dimension. ... Additional arguments passed methods. drop Logical. TRUE, result coerced lowest possible dimension.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/extractor4d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Array-like access for 4-dimensional data structures — extractor4d","text":"subset input object, dimensions depending indexing `drop` parameter.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/file_matches-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic function to test whether a file name conforms to the given FileFormat instance. Will test for match to either header file or data file — file_matches","title":"Generic function to test whether a file name conforms to the given FileFormat instance. Will test for match to either header file or data file — file_matches","text":"Validates whether file name conforms specified FileFormat verifies existence header data files.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/file_matches-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic function to test whether a file name conforms to the given FileFormat instance. Will test for match to either header file or data file — file_matches","text":"","code":"file_matches(x, file_name)  # S4 method for class 'FileFormat,character' file_matches(x, file_name)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/file_matches-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic function to test whether a file name conforms to the given FileFormat instance. Will test for match to either header file or data file — file_matches","text":"x FileFormat object specifying format requirements file_name character string specifying file name validate","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/file_matches-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic function to test whether a file name conforms to the given FileFormat instance. Will test for match to either header file or data file — file_matches","text":"TRUE match, FALSE otherwise logical value: TRUE file matches format header   data files exist, FALSE otherwise","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/file_matches-methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generic function to test whether a file name conforms to the given FileFormat instance. Will test for match to either header file or data file — file_matches","text":"function performs following validation steps: Checks file name matches either header data format Verifies existence corresponding paired file Returns FALSE either check fails File names validated using case-sensitive extension matching.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/file_matches-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic function to test whether a file name conforms to the given FileFormat instance. Will test for match to either header file or data file — file_matches","text":"","code":"if (FALSE) { # \\dontrun{ # Create a FileFormat for ANALYZE format fmt <- new(\"FileFormat\", header_extension = \"hdr\", data_extension = \"img\")  # Check if files exist and match format file_matches(fmt, \"brain_scan.hdr\")  # TRUE if both .hdr and .img exist file_matches(fmt, \"brain_scan.nii\")  # FALSE for wrong extension } # }"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/findAnatomy3D.html","id":null,"dir":"Reference","previous_headings":"","what":"Find 3D anatomical orientation from axis abbreviations — findAnatomy3D","title":"Find 3D anatomical orientation from axis abbreviations — findAnatomy3D","text":"Creates 3D anatomical orientation axis abbreviations.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/findAnatomy3D.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find 3D anatomical orientation from axis abbreviations — findAnatomy3D","text":"","code":"findAnatomy3D(axis1 = \"L\", axis2 = \"P\", axis3 = \"I\")"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/findAnatomy3D.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find 3D anatomical orientation from axis abbreviations — findAnatomy3D","text":"axis1 Character string first axis (default: \"L\" Left) axis2 Character string second axis (default: \"P\" Posterior) axis3 Character string third axis (default: \"\" Inferior)","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/findAnatomy3D.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find 3D anatomical orientation from axis abbreviations — findAnatomy3D","text":"AxisSet3D object representing anatomical orientation","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/findAnatomy3D.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find 3D anatomical orientation from axis abbreviations — findAnatomy3D","text":"","code":"if (FALSE) { # \\dontrun{ # Create orientation with default LPI axes orient <- findAnatomy3D() # Create orientation with custom axes orient <- findAnatomy3D(\"R\", \"A\", \"S\") } # }"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/gaussian_blur.html","id":null,"dir":"Reference","previous_headings":"","what":"Gaussian Blur for Volumetric Images — gaussian_blur","title":"Gaussian Blur for Volumetric Images — gaussian_blur","text":"function applies isotropic discrete Gaussian kernel smooth volumetric image (3D brain MRI data). blurring performed within specified image mask, customizable kernel parameters.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/gaussian_blur.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gaussian Blur for Volumetric Images — gaussian_blur","text":"","code":"gaussian_blur(vol, mask, sigma = 2, window = 1)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/gaussian_blur.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gaussian Blur for Volumetric Images — gaussian_blur","text":"vol NeuroVol object representing image volume smoothed. mask optional LogicalNeuroVol object representing image mask. mask defines region blurring applied. provided, entire volume processed. sigma numeric value specifying standard deviation Gaussian kernel. Default 2. window integer specifying kernel size. represents number voxels include side center voxel. example, window=1 results 3x3x3 kernel. Default 1.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/gaussian_blur.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gaussian Blur for Volumetric Images — gaussian_blur","text":"NeuroVol object representing smoothed image.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/gaussian_blur.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Gaussian Blur for Volumetric Images — gaussian_blur","text":"function uses C++ implementation efficient Gaussian blurring. blurring applied voxels within specified mask (entire volume mask provided). kernel size determined 'window' parameter, shape 'sigma' parameter.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/gaussian_blur.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Gaussian Blur for Volumetric Images — gaussian_blur","text":"Gaussian blur: https://en.wikipedia.org/wiki/Gaussian_blur","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/gaussian_blur.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gaussian Blur for Volumetric Images — gaussian_blur","text":"","code":"# Load a sample brain mask brain_mask <- read_vol(system.file(\"extdata\", \"global_mask_v4.nii\", package = \"neuroim2\"))  # Apply Gaussian blurring to the brain volume blurred_vol <- gaussian_blur(brain_mask, brain_mask, sigma = 2, window = 1)  # View a slice of the original and blurred volumes image(brain_mask[,,12])  image(blurred_vol[,,12])"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/grid_to_coord-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic function to convert N-dimensional grid coordinate coordinates to real world coordinates — grid_to_coord","title":"Generic function to convert N-dimensional grid coordinate coordinates to real world coordinates — grid_to_coord","text":"Generic function convert N-dimensional grid coordinate coordinates real world coordinates","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/grid_to_coord-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic function to convert N-dimensional grid coordinate coordinates to real world coordinates — grid_to_coord","text":"","code":"grid_to_coord(x, coords)  # S4 method for class 'NeuroSpace,matrix' grid_to_coord(x, coords)  # S4 method for class 'NeuroSpace,numeric' grid_to_coord(x, coords)  # S4 method for class 'NeuroVol,matrix' grid_to_coord(x, coords)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/grid_to_coord-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic function to convert N-dimensional grid coordinate coordinates to real world coordinates — grid_to_coord","text":"x object coords matrix grid coordinates","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/grid_to_coord-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic function to convert N-dimensional grid coordinate coordinates to real world coordinates — grid_to_coord","text":"matrix real coordinates","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/grid_to_grid-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic function to convert voxel coordinates in the reference space (LPI) to native array space. — grid_to_grid","title":"Generic function to convert voxel coordinates in the reference space (LPI) to native array space. — grid_to_grid","text":"Generic function convert voxel coordinates reference space (LPI) native array space.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/grid_to_grid-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic function to convert voxel coordinates in the reference space (LPI) to native array space. — grid_to_grid","text":"","code":"grid_to_grid(x, vox)  # S4 method for class 'NeuroSpace,matrix' grid_to_grid(x, vox)  # S4 method for class 'matrix,matrix' grid_to_grid(x, vox)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/grid_to_grid-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic function to convert voxel coordinates in the reference space (LPI) to native array space. — grid_to_grid","text":"x object vox matrix LPI voxel coordinates","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/grid_to_grid-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic function to convert voxel coordinates in the reference space (LPI) to native array space. — grid_to_grid","text":"matrix native voxel coordinates","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/grid_to_index-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic function to convert N-dimensional grid coordinate to 1D indices — grid_to_index","title":"Generic function to convert N-dimensional grid coordinate to 1D indices — grid_to_index","text":"Converts 2D grid coordinates linear indices NeuroSlice object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/grid_to_index-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic function to convert N-dimensional grid coordinate to 1D indices — grid_to_index","text":"","code":"grid_to_index(x, coords)  # S4 method for class 'NeuroSlice,matrix' grid_to_index(x, coords)  # S4 method for class 'NeuroSlice,numeric' grid_to_index(x, coords)  # S4 method for class 'NeuroSpace,matrix' grid_to_index(x, coords)  # S4 method for class 'NeuroSpace,numeric' grid_to_index(x, coords)  # S4 method for class 'NeuroVol,matrix' grid_to_index(x, coords)  # S4 method for class 'NeuroVol,numeric' grid_to_index(x, coords)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/grid_to_index-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic function to convert N-dimensional grid coordinate to 1D indices — grid_to_index","text":"x NeuroSlice object coords Either numeric vector length 2 matrix 2 columns, representing (x,y) coordinates slice grid","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/grid_to_index-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic function to convert N-dimensional grid coordinate to 1D indices — grid_to_index","text":"vector indices Integer vector linear indices corresponding input coordinates","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/grid_to_index-methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generic function to convert N-dimensional grid coordinate to 1D indices — grid_to_index","text":"Convert Grid Coordinates Linear Indices","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/grid_to_index-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic function to convert N-dimensional grid coordinate to 1D indices — grid_to_index","text":"","code":"slice_space <- NeuroSpace(c(10, 10)) slice_data <- matrix(1:100, 10, 10) slice <- NeuroSlice(slice_data, slice_space)  # Convert single coordinate idx <- grid_to_index(slice, c(5, 5))  # Convert multiple coordinates coords <- matrix(c(1,1, 2,2, 3,3), ncol=2, byrow=TRUE) indices <- grid_to_index(slice, coords)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/guided_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Edge-Preserving Guided Filter for Volumetric Images — guided_filter","title":"Edge-Preserving Guided Filter for Volumetric Images — guided_filter","text":"function applies guided filter volumetric image (3D brain MRI data) perform edge-preserving smoothing. guided filter smooths image preserving edges, providing balance noise reduction structural preservation.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/guided_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Edge-Preserving Guided Filter for Volumetric Images — guided_filter","text":"","code":"guided_filter(vol, radius = 4, epsilon = 0.7^2)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/guided_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Edge-Preserving Guided Filter for Volumetric Images — guided_filter","text":"vol NeuroVol object representing image volume filtered. radius integer specifying spatial radius filter. Default 4. epsilon numeric value specifying regularization parameter. controls degree smoothing edge preservation. Default 0.49 (0.7^2).","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/guided_filter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Edge-Preserving Guided Filter for Volumetric Images — guided_filter","text":"NeuroVol object representing filtered image.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/guided_filter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Edge-Preserving Guided Filter for Volumetric Images — guided_filter","text":"guided filter operates computing local linear models guidance image (input image implementation) output. 'radius' parameter determines size local neighborhood, 'epsilon' controls smoothness filter. implementation uses box blur operations efficiency, approximates behavior original guided filter algorithm.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/guided_filter.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Edge-Preserving Guided Filter for Volumetric Images — guided_filter","text":", K., Sun, J., & Tang, X. (2013). Guided Image Filtering. IEEE Transactions Pattern Analysis Machine Intelligence, 35(6), 1397-1409.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/guided_filter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Edge-Preserving Guided Filter for Volumetric Images — guided_filter","text":"","code":"# Load an example brain volume brain_vol <- read_vol(system.file(\"extdata\", \"global_mask_v4.nii\", package = \"neuroim2\"))  # Apply guided filtering to the brain volume if (FALSE) { # \\dontrun{ filtered_vol <- guided_filter(brain_vol, radius = 4, epsilon = 0.49)  # Visualize a slice of the original and filtered volumes par(mfrow = c(1, 2)) image(brain_vol[,,12], main = \"Original\") image(filtered_vol[,,12], main = \"Filtered\") } # }"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/header_file-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic function to get the name of the header file, given a file name and a FileFormat instance. — header_file","title":"Generic function to get the name of the header file, given a file name and a FileFormat instance. — header_file","text":"Derives header file name given file name based FileFormat specifications.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/header_file-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic function to get the name of the header file, given a file name and a FileFormat instance. — header_file","text":"","code":"header_file(x, file_name)  # S4 method for class 'FileFormat,character' header_file(x, file_name)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/header_file-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic function to get the name of the header file, given a file name and a FileFormat instance. — header_file","text":"x FileFormat object specifying format requirements file_name character string specifying file name derive header file name ","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/header_file-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic function to get the name of the header file, given a file name and a FileFormat instance. — header_file","text":"correct header name character string representing header file name","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/header_file-methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generic function to get the name of the header file, given a file name and a FileFormat instance. — header_file","text":"function performs following steps: input file_name already matches header file format, returns     file_name . file_name matches data file format, constructs returns     corresponding header file name. file_name match either format, throws error.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/header_file-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic function to get the name of the header file, given a file name and a FileFormat instance. — header_file","text":"","code":"if (FALSE) { # \\dontrun{ fmt <- new(\"FileFormat\", header_extension = \"hdr\", data_extension = \"img\") header_file(fmt, \"brain_scan.hdr\")  # Returns \"brain_scan.hdr\" header_file(fmt, \"brain_scan.img\")  # Returns \"brain_scan.hdr\" } # }"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/header_file_matches-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic function to test whether a file name conforms to the given FileFormat instance. Will test for match to header file only — header_file_matches","title":"Generic function to test whether a file name conforms to the given FileFormat instance. Will test for match to header file only — header_file_matches","text":"Validates whether file name conforms header file format specification.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/header_file_matches-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic function to test whether a file name conforms to the given FileFormat instance. Will test for match to header file only — header_file_matches","text":"","code":"header_file_matches(x, file_name)  # S4 method for class 'FileFormat,character' header_file_matches(x, file_name)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/header_file_matches-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic function to test whether a file name conforms to the given FileFormat instance. Will test for match to header file only — header_file_matches","text":"x FileFormat object specifying format requirements file_name character string specifying file name validate","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/header_file_matches-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic function to test whether a file name conforms to the given FileFormat instance. Will test for match to header file only — header_file_matches","text":"TRUE match, FALSE otherwise logical value: TRUE file name matches header format,   FALSE otherwise","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/header_file_matches-methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generic function to test whether a file name conforms to the given FileFormat instance. Will test for match to header file only — header_file_matches","text":"function performs case-sensitive pattern matching verify file name ends specified header extension. match performed using regular expression ensures extension appears end file name.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/header_file_matches-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic function to test whether a file name conforms to the given FileFormat instance. Will test for match to header file only — header_file_matches","text":"","code":"if (FALSE) { # \\dontrun{ fmt <- new(\"FileFormat\", header_extension = \"hdr\", data_extension = \"img\") header_file_matches(fmt, \"brain_scan.hdr\")  # TRUE header_file_matches(fmt, \"brain_scan.img\")  # FALSE header_file_matches(fmt, \"brain.hdr.gz\")    # FALSE } # }"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/image.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic Image Method for Creating Visual Representations — image","title":"Generic Image Method for Creating Visual Representations — image","text":"Creates visual representation (image) object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/image.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic Image Method for Creating Visual Representations — image","text":"x object rendered image. ... Additional arguments passed methods.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/index_to_coord-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"convert 1d indices to n-dimensional real world coordinates — index_to_coord","title":"convert 1d indices to n-dimensional real world coordinates — index_to_coord","text":"convert 1d indices n-dimensional real world coordinates","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/index_to_coord-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"convert 1d indices to n-dimensional real world coordinates — index_to_coord","text":"","code":"index_to_coord(x, idx)  # S4 method for class 'NeuroSpace,numeric' index_to_coord(x, idx)  # S4 method for class 'NeuroSpace,integer' index_to_coord(x, idx)  # S4 method for class 'NeuroVol,integer' index_to_coord(x, idx)  # S4 method for class 'NeuroVec,integer' index_to_coord(x, idx)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/index_to_coord-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"convert 1d indices to n-dimensional real world coordinates — index_to_coord","text":"x object idx 1D indices","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/index_to_coord-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"convert 1d indices to n-dimensional real world coordinates — index_to_coord","text":"matrix real coordinates","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/index_to_coord-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"convert 1d indices to n-dimensional real world coordinates — index_to_coord","text":"","code":"bvol <- NeuroVol(array(0, c(10,10,10)), NeuroSpace(c(10,10,10), c(1,1,1))) idx <- 1:10 g <- index_to_coord(bvol, idx) idx2 <- coord_to_index(bvol, g) all.equal(idx, idx2) #> [1] TRUE"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/index_to_grid-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert 1d indices to n-dimensional grid coordinates — index_to_grid","title":"Convert 1d indices to n-dimensional grid coordinates — index_to_grid","text":"Converts linear indices 2D grid coordinates NeuroSlice object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/index_to_grid-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert 1d indices to n-dimensional grid coordinates — index_to_grid","text":"","code":"index_to_grid(x, idx)  # S4 method for class 'NeuroSlice,numeric' index_to_grid(x, idx)  # S4 method for class 'NeuroSpace,numeric' index_to_grid(x, idx)  # S4 method for class 'NeuroVec,index' index_to_grid(x, idx)  # S4 method for class 'NeuroVec,integer' index_to_grid(x, idx)  # S4 method for class 'NeuroVol,index' index_to_grid(x, idx)  # S4 method for class 'NeuroVol,integer' index_to_grid(x, idx)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/index_to_grid-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert 1d indices to n-dimensional grid coordinates — index_to_grid","text":"x NeuroSlice object idx Integer vector linear indices convert","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/index_to_grid-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert 1d indices to n-dimensional grid coordinates — index_to_grid","text":"matrix grid coordinates matrix 2 columns representing (x,y) coordinates   corresponding input indices","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/index_to_grid-methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert 1d indices to n-dimensional grid coordinates — index_to_grid","text":"Convert Linear Indices Grid Coordinates","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/index_to_grid-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert 1d indices to n-dimensional grid coordinates — index_to_grid","text":"","code":"bvol <- NeuroVol(array(0, c(10,10,10)), NeuroSpace(c(10,10,10), c(1,1,1)))  idx <- 1:10  g <- index_to_grid(bvol, idx)  bvol[g] #>  [1] 0 0 0 0 0 0 0 0 0 0  slice_space <- NeuroSpace(c(10, 10)) slice_data <- matrix(1:100, 10, 10) slice <- NeuroSlice(slice_data, slice_space)  # Convert single index coords <- index_to_grid(slice, 55)  # Convert multiple indices indices <- c(1, 25, 50, 75, 100) coords_mat <- index_to_grid(slice, indices)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/indices-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Indices from an IndexLookupVol Object — indices,IndexLookupVol-method","title":"Get Indices from an IndexLookupVol Object — indices,IndexLookupVol-method","text":"Retrieves vector indices included lookup volume.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/indices-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Indices from an IndexLookupVol Object — indices,IndexLookupVol-method","text":"","code":"# S4 method for class 'IndexLookupVol' indices(x)  # S4 method for class 'ROIVol' indices(x)  # S4 method for class 'ROIVol' indices(x)  # S4 method for class 'ROIVec' indices(x)  # S4 method for class 'AbstractSparseNeuroVec' indices(x)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/indices-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Indices from an IndexLookupVol Object — indices,IndexLookupVol-method","text":"x IndexLookupVol object","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/indices-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Indices from an IndexLookupVol Object — indices,IndexLookupVol-method","text":"integer vector containing indices included voxels","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/indices-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Indices from an IndexLookupVol Object — indices,IndexLookupVol-method","text":"","code":"if (FALSE) { # \\dontrun{ ilv <- IndexLookupVol(space, c(1:100)) idx <- indices(ilv)  # Get included indices } # }"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/indices.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract indices — indices","title":"Extract indices — indices","text":"Extract indices","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/indices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract indices — indices","text":"","code":"indices(x)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/indices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract indices — indices","text":"x object extract indices","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/inverse_trans-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract inverse image coordinate transformation — inverse_trans","title":"Extract inverse image coordinate transformation — inverse_trans","text":"Extract inverse image coordinate transformation","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/inverse_trans-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract inverse image coordinate transformation — inverse_trans","text":"","code":"inverse_trans(x)  # S4 method for class 'NeuroSpace' inverse_trans(x)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/inverse_trans-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract inverse image coordinate transformation — inverse_trans","text":"x object","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/inverse_trans-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract inverse image coordinate transformation — inverse_trans","text":"","code":"bspace <- NeuroSpace(c(10,10,10), c(2,2,2)) itrans <- inverse_trans(bspace) identical(trans(bspace) %*% inverse_trans(bspace), diag(4)) #> [1] TRUE"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/laplace_enhance.html","id":null,"dir":"Reference","previous_headings":"","what":"Laplacian Enhancement Filter for Volumetric Images — laplace_enhance","title":"Laplacian Enhancement Filter for Volumetric Images — laplace_enhance","text":"function applies multi-layer Laplacian enhancement filter volumetric image (3D brain MRI data). filter enhances details preserving edges using non-local means approach multiple scales.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/laplace_enhance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Laplacian Enhancement Filter for Volumetric Images — laplace_enhance","text":"","code":"laplace_enhance(   vol,   mask,   k = 2,   patch_size = 3,   search_radius = 2,   h = 0.7,   mapping_params = NULL,   use_normalization_free = TRUE )"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/laplace_enhance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Laplacian Enhancement Filter for Volumetric Images — laplace_enhance","text":"vol NeuroVol object representing image volume enhanced. mask LogicalNeuroVol object specifying region process. provided, entire volume processed. k integer specifying number layers decomposition (default 2). patch_size integer specifying size patches non-local means. Must odd (default 3). search_radius integer specifying radius search window (default 2). h numeric value controlling filtering strength. Higher values mean smoothing (default 0.7). mapping_params optional list parameters enhancement mappings. use_normalization_free Logical indicating whether use normalization-free weights (default TRUE).","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/laplace_enhance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Laplacian Enhancement Filter for Volumetric Images — laplace_enhance","text":"NeuroVol object representing enhanced image.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/length-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Get length of NeuroVec object — length,NeuroVec-method","title":"Get length of NeuroVec object — length,NeuroVec-method","text":"Returns number time points (4th dimension) NeuroVec object Returns total number time points across vectors sequence","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/length-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get length of NeuroVec object — length,NeuroVec-method","text":"","code":"# S4 method for class 'NeuroVec' length(x)  # S4 method for class 'NeuroVecSeq' length(x)  # S4 method for class 'ROIVol' length(x)  # S4 method for class 'ROICoords' length(x)  # S4 method for class 'ROIVol' length(x)  # S4 method for class 'ROICoords' length(x)  # S4 method for class 'ROIVol' length(x)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/length-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get length of NeuroVec object — length,NeuroVec-method","text":"x NeuroVecSeq object","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/length-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get length of NeuroVec object — length,NeuroVec-method","text":"Integer length (number time points) Integer length (total number time points)","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/linear_access-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Linear Access Method for FileBackedNeuroVec — linear_access,FileBackedNeuroVec,numeric-method","title":"Linear Access Method for FileBackedNeuroVec — linear_access,FileBackedNeuroVec,numeric-method","text":"Internal method providing linear access memory-mapped data. Provides linear access data across vectors sequence.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/linear_access-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Linear Access Method for FileBackedNeuroVec — linear_access,FileBackedNeuroVec,numeric-method","text":"","code":"# S4 method for class 'FileBackedNeuroVec,numeric' linear_access(x, i)  # S4 method for class 'MappedNeuroVec,numeric' linear_access(x, i)  # S4 method for class 'NeuroHyperVec,ANY' linear_access(x, i, ...)  # S4 method for class 'NeuroVecSeq,numeric' linear_access(x, i)  # S4 method for class 'SparseNeuroVol,numeric' linear_access(x, i)  # S4 method for class 'AbstractSparseNeuroVec,numeric' linear_access(x, i)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/linear_access-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Linear Access Method for FileBackedNeuroVec — linear_access,FileBackedNeuroVec,numeric-method","text":"x NeuroVecSeq object Numeric vector indices linear access ... Additional arguments (used)","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/linear_access-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Linear Access Method for FileBackedNeuroVec — linear_access,FileBackedNeuroVec,numeric-method","text":"numeric vector values Numeric vector values numeric vector array Numeric vector accessed values","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/linear_access-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Linear Access Method for FileBackedNeuroVec — linear_access,FileBackedNeuroVec,numeric-method","text":"","code":"if (FALSE) { # \\dontrun{ fbvec <- FileBackedNeuroVec(\"fmri_data.nii\")  # Access first 10 values values <- linear_access(fbvec, 1:10) } # }"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/linear_access.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract values from an array-like object using linear indexing. — linear_access","title":"Extract values from an array-like object using linear indexing. — linear_access","text":"function extracts values elements array-like object using linear indexing. Linear indexing way indexing array single index computed multiple indices using formula.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/linear_access.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract values from an array-like object using linear indexing. — linear_access","text":"","code":"linear_access(x, i, ...)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/linear_access.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract values from an array-like object using linear indexing. — linear_access","text":"x data source. vector indices. ... additional arguments passed methods.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/load_data-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Load image data from a NeuroVecSource object — load_data,MappedNeuroVecSource-method","title":"Load image data from a NeuroVecSource object — load_data,MappedNeuroVecSource-method","text":"function loads image data NeuroVecSource object, handling various dimensionalities applying necessary transformations.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/load_data-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load image data from a NeuroVecSource object — load_data,MappedNeuroVecSource-method","text":"","code":"# S4 method for class 'MappedNeuroVecSource' load_data(x)  # S4 method for class 'NeuroVecSource' load_data(x)  # S4 method for class 'NeuroVolSource' load_data(x)  # S4 method for class 'SparseNeuroVecSource' load_data(x)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/load_data-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load image data from a NeuroVecSource object — load_data,MappedNeuroVecSource-method","text":"x NeuroVecSource object containing image metadata file information.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/load_data-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load image data from a NeuroVecSource object — load_data,MappedNeuroVecSource-method","text":"DenseNeuroVec object containing loaded image data associated spatial information.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/load_data-methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Load image data from a NeuroVecSource object — load_data,MappedNeuroVecSource-method","text":"method performs following steps: 1. Validates dimensionality metadata. 2. Reads image data using RNifti. 3. Handles 5D arrays dropping 4th dimension length 1. 4. Applies slope scaling present metadata. 5. Constructs NeuroSpace object appropriate dimensions spatial information. 6. Creates returns DenseNeuroVec object, handling 3D 4D input arrays.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/load_data-methods.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Load image data from a NeuroVecSource object — load_data,MappedNeuroVecSource-method","text":"method currently supports NIfTI file format RNifti.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/load_data-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load image data from a NeuroVecSource object — load_data,MappedNeuroVecSource-method","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming 'source' is a valid NeuroVecSource object vec_data <- load_data(source) } # }"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/load_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Load data from a data source. — load_data","title":"Load data from a data source. — load_data","text":"function loads data data source returns format compatible functions neuroim2 package. format returned data depends type data source used.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/load_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load data from a data source. — load_data","text":"","code":"load_data(x, ...)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/load_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load data from a data source. — load_data","text":"x data source. ... additional arguments passed methods.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/lookup-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Lookup Values in an IndexLookupVol Object — lookup,IndexLookupVol,numeric-method","title":"Lookup Values in an IndexLookupVol Object — lookup,IndexLookupVol,numeric-method","text":"Performs lookup operation IndexLookupVol object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/lookup-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lookup Values in an IndexLookupVol Object — lookup,IndexLookupVol,numeric-method","text":"","code":"# S4 method for class 'IndexLookupVol,numeric' lookup(x, i)  # S4 method for class 'AbstractSparseNeuroVec,numeric' lookup(x, i)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/lookup-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lookup Values in an IndexLookupVol Object — lookup,IndexLookupVol,numeric-method","text":"x IndexLookupVol object numeric vector indices look ","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/lookup-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lookup Values in an IndexLookupVol Object — lookup,IndexLookupVol,numeric-method","text":"vector lookup values corresponding input indices","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/lookup-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lookup Values in an IndexLookupVol Object — lookup,IndexLookupVol,numeric-method","text":"","code":"if (FALSE) { # \\dontrun{ ilv <- IndexLookupVol(space, c(1:100)) lookup(ilv, c(1, 2, 3))  # Look up values for indices 1, 2, and 3 } # }"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/lookup.html","id":null,"dir":"Reference","previous_headings":"","what":"Index Lookup operation — lookup","title":"Index Lookup operation — lookup","text":"Index Lookup operation","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/lookup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Index Lookup operation — lookup","text":"","code":"lookup(x, i, ...)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/lookup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Index Lookup operation — lookup","text":"x object query index lookup ... additional arguments","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/map-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a function to an object. — mapf","title":"Apply a function to an object. — mapf","text":"function applies function object, additional arguments passed function using ... argument. mapping object specifies function applied, can take many different forms, depending object function used. return value depends function used.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/map-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a function to an object. — mapf","text":"","code":"mapf(x, m, ...)  # S4 method for class 'NeuroVol,Kernel' mapf(x, m, mask = NULL)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/map-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply a function to an object. — mapf","text":"x object mapped. m mapping object. ... additional arguments passed function. mask restrict application kernel masked area","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/map_values-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Map Values from One Set to Another Using a User-supplied Lookup Table — map_values","title":"Map Values from One Set to Another Using a User-supplied Lookup Table — map_values","text":"function maps values one set another using lookup table provided user.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/map_values-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map Values from One Set to Another Using a User-supplied Lookup Table — map_values","text":"","code":"map_values(x, lookup)  # S4 method for class 'NeuroVol,list' map_values(x, lookup)  # S4 method for class 'NeuroVol,matrix' map_values(x, lookup)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/map_values-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map Values from One Set to Another Using a User-supplied Lookup Table — map_values","text":"x object values mapped. lookup lookup table. first column \"key\" second column \"value\".","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/map_values-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map Values from One Set to Another Using a User-supplied Lookup Table — map_values","text":"new object original values replaced values lookup table.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/map_values-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Map Values from One Set to Another Using a User-supplied Lookup Table — map_values","text":"","code":"x <- NeuroSpace(c(10, 10, 10), c(1, 1, 1)) vol <- NeuroVol(sample(1:10, 10 * 10 * 10, replace = TRUE), x)  ## Lookup table is a list lookup <- lapply(1:10, function(i) i * 10) names(lookup) <- 1:10 ovol <- map_values(vol, lookup)  ## Lookup table is a matrix. The first column is the key, and the second column is the value names(lookup) <- 1:length(lookup) lookup.mat <- cbind(as.numeric(names(lookup)), unlist(lookup)) ovol2 <- map_values(vol, lookup.mat) all.equal(as.vector(ovol2), as.vector(ovol)) #> [1] TRUE"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/matricized_access-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract values from a matricized (x,y,z) of a 4D tensor using a space-time coordinate matrix. — matricized_access","title":"Extract values from a matricized (x,y,z) of a 4D tensor using a space-time coordinate matrix. — matricized_access","text":"function extracts values elements 4D tensor, first three dimensions (x,y,z) matricized single dimension, using space-time coordinate matrix. input index matrix, row specifies (x,y,z,t) coordinate. output vector containing values elements x specified space-time coordinates.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/matricized_access-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract values from a matricized (x,y,z) of a 4D tensor using a space-time coordinate matrix. — matricized_access","text":"","code":"matricized_access(x, i, ...)  # S4 method for class 'SparseNeuroVec,matrix' matricized_access(x, i)  # S4 method for class 'SparseNeuroVec,integer' matricized_access(x, i)  # S4 method for class 'SparseNeuroVec,numeric' matricized_access(x, i)  # S4 method for class 'BigNeuroVec,matrix' matricized_access(x, i)  # S4 method for class 'BigNeuroVec,integer' matricized_access(x, i)  # S4 method for class 'BigNeuroVec,numeric' matricized_access(x, i)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/matricized_access-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract values from a matricized (x,y,z) of a 4D tensor using a space-time coordinate matrix. — matricized_access","text":"x data source. index matrix specifying space-time coordinates. ... additional arguments passed methods.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/matrixToQuatern.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a Transformation Matrix to a Quaternion Representation — matrixToQuatern","title":"Convert a Transformation Matrix to a Quaternion Representation — matrixToQuatern","text":"Extracts rotation scaling components 3x3 (4x4) transformation matrix, normalizes , computes corresponding quaternion parameters sign factor (`qfac`) indicating whether determinant negative.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/matrixToQuatern.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a Transformation Matrix to a Quaternion Representation — matrixToQuatern","text":"","code":"matrixToQuatern(mat)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/matrixToQuatern.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a Transformation Matrix to a Quaternion Representation — matrixToQuatern","text":"mat numeric matrix least top-left 3x3 portion containing rotation/scaling. Often 4x4 affine transform, 3x3 top-left submatrix used practice.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/matrixToQuatern.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a Transformation Matrix to a Quaternion Representation — matrixToQuatern","text":"named list two elements: quaternion numeric vector length 3, \\((b, c, d)\\),       —together \\(\\) derived internally—represents rotation. qfac Either +1 -1, indicating whether       determinant rotation submatrix positive negative, respectively.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/matrixToQuatern.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert a Transformation Matrix to a Quaternion Representation — matrixToQuatern","text":"function first checks corrects zero-length axes upper-left corner matrix, normalizes column extract pure rotation. determinant rotation submatrix negative, qfac set -1, third column negated. Finally, quaternion parameters (\\(, b, c, d\\)) computed following standard NIfTI-1 conventions representing rotation 3D.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/matrixToQuatern.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Convert a Transformation Matrix to a Quaternion Representation — matrixToQuatern","text":"- Cox RW. *Analysis Functional NeuroImages* (AFNI) NIfTI-1 quaternion   conventions. https://afni.nimh.nih.gov - official NIfTI-1 specification: https://nifti.nimh.nih.gov","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ndim-AxisSet-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Get number of dimensions in axis set — ndim,AxisSet-method","title":"Get number of dimensions in axis set — ndim,AxisSet-method","text":"Get number dimensions axis set","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ndim-AxisSet-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get number of dimensions in axis set — ndim,AxisSet-method","text":"","code":"# S4 method for class 'AxisSet' ndim(x, ...)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ndim-AxisSet-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get number of dimensions in axis set — ndim,AxisSet-method","text":"x AxisSet object ... Additional arguments (used)","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ndim-AxisSet-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get number of dimensions in axis set — ndim,AxisSet-method","text":"Integer number dimensions","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ndim-AxisSet-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get number of dimensions in axis set — ndim,AxisSet-method","text":"","code":"if (FALSE) { # \\dontrun{ axes <- AxisSet2D(LEFT_RIGHT, ANT_POST) ndim(axes)  # Returns 2 } # }"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ndim-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the number of dimensions of an object — ndim","title":"Extract the number of dimensions of an object — ndim","text":"Extract number dimensions object","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ndim-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the number of dimensions of an object — ndim","text":"","code":"ndim(x, ...)  # S4 method for class 'NeuroObj' ndim(x)  # S4 method for class 'NeuroSpace' ndim(x)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ndim-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the number of dimensions of an object — ndim","text":"x n-dimensional object ... additional arguments","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ndim-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the number of dimensions of an object — ndim","text":"number dimensions input object `x`","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/ndim-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the number of dimensions of an object — ndim","text":"","code":"x = NeuroSpace(c(10,10,10), spacing=c(1,1,1)) ndim(x) == 3 #> [1] TRUE x = NeuroSpace(c(10,10,10,3), spacing=c(1,1,1)) ndim(x) == 4 #> [1] TRUE"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/neuro-ops.html","id":null,"dir":"Reference","previous_headings":"","what":"Arithmetic and Comparison Operations for Neuroimaging Objects — neuro-ops","title":"Arithmetic and Comparison Operations for Neuroimaging Objects — neuro-ops","text":"Methods performing arithmetic comparison operations neuroimaging objects","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/neuro-resample.html","id":null,"dir":"Reference","previous_headings":"","what":"Resampling Methods for Neuroimaging Objects — neuro-resample","title":"Resampling Methods for Neuroimaging Objects — neuro-resample","text":"Methods resampling neuroimaging objects different spaces dimensions","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/neuroim2-package.html","id":null,"dir":"Reference","previous_headings":"","what":"neuroim2: neuroimaging data structures for analysis — neuroim2-package","title":"neuroim2: neuroimaging data structures for analysis — neuroim2-package","text":"neuroim2 package provides tools functions analyzing manipulating neuroimaging data. supports various neuroimaging formats offers range analysis techniques.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/neuroim2-package.html","id":"main-functions","dir":"Reference","previous_headings":"","what":"Main functions","title":"neuroim2: neuroimaging data structures for analysis — neuroim2-package","text":"read_vol: Read neuroimaging volumes write_vol: Write neuroimaging volumes NeuroVol: Create NeuroVol objects NeuroVec: Create NeuroVec objects","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/neuroim2-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"neuroim2: neuroimaging data structures for analysis — neuroim2-package","text":"Maintainer: Bradley R Buchsbaum brad.buchsbaum@gmail.com [copyright holder]","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/num_clusters-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Number of Clusters — num_clusters,ClusteredNeuroVol-method","title":"Number of Clusters — num_clusters,ClusteredNeuroVol-method","text":"function returns number clusters ClusteredNeuroVol object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/num_clusters-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Number of Clusters — num_clusters,ClusteredNeuroVol-method","text":"","code":"# S4 method for class 'ClusteredNeuroVol' num_clusters(x)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/num_clusters-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Number of Clusters — num_clusters,ClusteredNeuroVol-method","text":"x ClusteredNeuroVol object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/num_clusters-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Number of Clusters — num_clusters,ClusteredNeuroVol-method","text":"integer representing number clusters input object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/num_clusters.html","id":null,"dir":"Reference","previous_headings":"","what":"Number of Clusters — num_clusters","title":"Number of Clusters — num_clusters","text":"Number Clusters","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/num_clusters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Number of Clusters — num_clusters","text":"","code":"num_clusters(x)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/num_clusters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Number of Clusters — num_clusters","text":"x object extract number clusters","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/numericOrMatrix-class.html","id":null,"dir":"Reference","previous_headings":"","what":"numericOrMatrix Union — numericOrMatrix-class","title":"numericOrMatrix Union — numericOrMatrix-class","text":"class union includes numeric vectors matrices.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/origin-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Image Origin — origin","title":"Extract Image Origin — origin","text":"Extract Image Origin","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/origin-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Image Origin — origin","text":"","code":"origin(x)  # S4 method for class 'NeuroSpace' origin(x)  # S4 method for class 'NeuroVol' origin(x)  # S4 method for class 'NeuroVec' origin(x)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/origin-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Image Origin — origin","text":"x object origin","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/origin-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Image Origin — origin","text":"origin image","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/origin-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Image Origin — origin","text":"","code":"bspace <- NeuroSpace(c(10,10,10), c(2,2,2)) stopifnot(origin(bspace) == c(0,0,0))"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/partition-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Partition an image into a set of disjoint clusters — partition","title":"Partition an image into a set of disjoint clusters — partition","text":"function partitions image set disjoint clusters using k-means clustering.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/partition-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Partition an image into a set of disjoint clusters — partition","text":"","code":"partition(x, k, ...)  # S4 method for class 'LogicalNeuroVol,integer' partition(x, k)  # S4 method for class 'LogicalNeuroVol,numeric' partition(x, k)  # S4 method for class 'DenseNeuroVol,numeric' partition(x, k)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/partition-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Partition an image into a set of disjoint clusters — partition","text":"x image partition, represented 3D array. k number clusters form. ... additional arguments passed kmeans function.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/partition-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Partition an image into a set of disjoint clusters — partition","text":"3D array voxel assigned cluster.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/partition-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Partition an image into a set of disjoint clusters — partition","text":"","code":"# Load an example 3D image library(neuroim2) img <- read_vol(system.file(\"extdata\", \"global_mask_v4.nii\", package = \"neuroim2\"))  # Partition the image into 5 clusters using default options clusters <- partition(img, 5)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/patch_set-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a patch set from a NeuroVol object — patch_set,NeuroVol,numeric,missing-method","title":"Create a patch set from a NeuroVol object — patch_set,NeuroVol,numeric,missing-method","text":"function creates patch set NeuroVol object given specified dimensions function creates patch set NeuroVol object given specified dimensions mask.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/patch_set-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a patch set from a NeuroVol object — patch_set,NeuroVol,numeric,missing-method","text":"","code":"# S4 method for class 'NeuroVol,numeric,missing' patch_set(x, dims, mask, ...)  # S4 method for class 'NeuroVol,numeric,LogicalNeuroVol' patch_set(x, dims, mask, ...)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/patch_set-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a patch set from a NeuroVol object — patch_set,NeuroVol,numeric,missing-method","text":"x NeuroVol object dims dimensions patch mask mask defining valid patch centers ... additional args","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/patch_set-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a patch set from a NeuroVol object — patch_set,NeuroVol,numeric,missing-method","text":"deferred list patches. deferred list patches.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/patch_set.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a set of coordinate ","title":"Generate a set of coordinate ","text":"Generate set coordinate \"patches\" fixed size image object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/patch_set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a set of coordinate ","text":"","code":"patch_set(x, dims, mask, ...)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/patch_set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a set of coordinate ","text":"x object extract patches dims vector indicating dimensions patches mask mask indicating valid patch area ... additional args","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/perm_mat-AxisSet2D-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Get permutation matrix from axis set — perm_mat,AxisSet2D-method","title":"Get permutation matrix from axis set — perm_mat,AxisSet2D-method","text":"Get permutation matrix axis set","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/perm_mat-AxisSet2D-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get permutation matrix from axis set — perm_mat,AxisSet2D-method","text":"","code":"# S4 method for class 'AxisSet2D' perm_mat(x, ...)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/perm_mat-AxisSet2D-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get permutation matrix from axis set — perm_mat,AxisSet2D-method","text":"x AxisSet2D object ... Additional arguments (used)","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/perm_mat-AxisSet2D-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get permutation matrix from axis set — perm_mat,AxisSet2D-method","text":"matrix representing axis directions","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/perm_mat-AxisSet2D-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get permutation matrix from axis set — perm_mat,AxisSet2D-method","text":"","code":"if (FALSE) { # \\dontrun{ axes <- AxisSet2D(LEFT_RIGHT, ANT_POST) perm_mat(axes) } # }"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/perm_mat-AxisSet3D-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Get permutation matrix from axis set — perm_mat,AxisSet3D-method","title":"Get permutation matrix from axis set — perm_mat,AxisSet3D-method","text":"Get permutation matrix axis set","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/perm_mat-AxisSet3D-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get permutation matrix from axis set — perm_mat,AxisSet3D-method","text":"","code":"# S4 method for class 'AxisSet3D' perm_mat(x, ...)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/perm_mat-AxisSet3D-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get permutation matrix from axis set — perm_mat,AxisSet3D-method","text":"x AxisSet3D object ... Additional arguments (used)","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/perm_mat-AxisSet3D-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get permutation matrix from axis set — perm_mat,AxisSet3D-method","text":"matrix representing axis directions","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/perm_mat-AxisSet3D-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get permutation matrix from axis set — perm_mat,AxisSet3D-method","text":"","code":"if (FALSE) { # \\dontrun{ axes <- AxisSet3D(LEFT_RIGHT, ANT_POST, INF_SUP) perm_mat(axes) } # }"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/perm_mat-NeuroSpace-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Get permutation matrix from axis set — perm_mat,NeuroSpace-method","title":"Get permutation matrix from axis set — perm_mat,NeuroSpace-method","text":"Get permutation matrix axis set","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/perm_mat-NeuroSpace-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get permutation matrix from axis set — perm_mat,NeuroSpace-method","text":"","code":"# S4 method for class 'NeuroSpace' perm_mat(x, ...)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/perm_mat-NeuroSpace-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get permutation matrix from axis set — perm_mat,NeuroSpace-method","text":"x NeuroSpace object ... Additional arguments (used)","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/perm_mat-NeuroSpace-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get permutation matrix from axis set — perm_mat,NeuroSpace-method","text":"matrix representing axis directions","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/perm_mat-NeuroSpace-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get permutation matrix from axis set — perm_mat,NeuroSpace-method","text":"","code":"if (FALSE) { # \\dontrun{ ns <- NeuroSpace(axes=AxisSet3D(LEFT_RIGHT, ANT_POST, INF_SUP)) perm_mat(ns) } # }"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/perm_mat-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract permutation matrix associated with an image — perm_mat","title":"Extract permutation matrix associated with an image — perm_mat","text":"permutation matrix defines native voxel coordinates can transformed standard (LPI) orientation.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/perm_mat-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract permutation matrix associated with an image — perm_mat","text":"","code":"perm_mat(x, ...)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/perm_mat-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract permutation matrix associated with an image — perm_mat","text":"x object ... additional arguments","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/perm_mat-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract permutation matrix associated with an image — perm_mat","text":"N x N permutation matrix, N dimensionality image.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/perm_mat-methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract permutation matrix associated with an image — perm_mat","text":"permutation matrix can used convert cardinal image orientations. example, image stored \"RPI\" (Right-Posterior-Inferior) format, coordinate space can converted LPI (Left-Posterior-Inferior) multiplying coordinate vector permutation matrix.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/perm_mat-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract permutation matrix associated with an image — perm_mat","text":"","code":"fname <- system.file(\"extdata\", \"global_mask_v4.nii\", package=\"neuroim2\") vol <- read_vol(fname) pmat <- perm_mat(space(vol))  vox <- c(12,12,8) pvox <- vox %*% perm_mat(space(vol))  stopifnot(all(pvox == c(-12,12,8)))"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/plot-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a NeuroSlice — plot,NeuroSlice-method","title":"Plot a NeuroSlice — plot,NeuroSlice-method","text":"Plot NeuroSlice plot NeuroVol series 2D slices","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/plot-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a NeuroSlice — plot,NeuroSlice-method","text":"","code":"# S4 method for class 'NeuroSlice' plot(   x,   cmap = gray(seq(0, 1, length.out = 255)),   irange = range(x, na.rm = TRUE) )  # S4 method for class 'NeuroVol' plot(   x,   cmap = gray(seq(0, 1, length.out = 255)),   zlevels = unique(round(seq(1, dim(x)[3], length.out = 6))),   irange = range(x, na.rm = TRUE),   thresh = c(0, 0),   alpha = 1,   bgvol = NULL,   bgcmap = gray(seq(0, 1, length.out = 255)) )"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/plot-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a NeuroSlice — plot,NeuroSlice-method","text":"x object display cmap color map consisting vector colors hex format (e.g. gray(n=255)) irange intensity range indicating low high values color scale. zlevels series slice indices display. thresh 2-element vector indicating lower upper transparency thresholds. alpha level alpha transparency bgvol background volume serves image underlay (currently ignored). bgcmap color map backround layer consisting vector colors hex format (e.g. gray(n=255))","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/plot-methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot a NeuroSlice — plot,NeuroSlice-method","text":"plot method uses ggplot2 create raster visualization slice data. intensity values mapped colors using specified colormap range.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/plot-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a NeuroSlice — plot,NeuroSlice-method","text":"","code":"# Create example slice slice_space <- NeuroSpace(c(100, 100)) slice_data <- matrix(rnorm(100*100), 100, 100) slice <- NeuroSlice(slice_data, slice_space)  if (FALSE) { # \\dontrun{ # Basic plot plot(slice)  # Custom colormap library(viridis) plot(slice, cmap = viridis(255))  # Custom intensity range plot(slice, irange = c(-2, 2)) } # }   dat <- matrix(rnorm(100*100), 100, 100) slice <- NeuroSlice(dat, NeuroSpace(c(100,100))) #plot(slice)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/quaternToMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Quaternion Parameters to a Transformation Matrix — quaternToMatrix","title":"Convert Quaternion Parameters to a Transformation Matrix — quaternToMatrix","text":"Given quaternion (b, c, d), scalar offset (origin), voxel step sizes, qfac sign, reconstructs 4x4 affine matrix representing rotation, scaling, translation used NIfTI-1.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/quaternToMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Quaternion Parameters to a Transformation Matrix — quaternToMatrix","text":"","code":"quaternToMatrix(quat, origin, stepSize, qfac)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/quaternToMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Quaternion Parameters to a Transformation Matrix — quaternToMatrix","text":"quat numeric vector length 3 containing quaternion parameters \\((b, c, d)\\). scalar part \\(\\) computed internally. origin numeric vector length 3 specifying translation components (often real-space origin offset). stepSize numeric vector length 3 giving voxel dimensions along axis (e.g., (dx, dy, dz)). qfac Either +1 -1, indicating sign determinant check matrixToQuatern.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/quaternToMatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Quaternion Parameters to a Transformation Matrix — quaternToMatrix","text":"4x4 numeric affine transformation matrix. top-left 3x3 submatrix   encodes rotation scaling, 4th column encodes translation.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/quaternToMatrix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert Quaternion Parameters to a Transformation Matrix — quaternToMatrix","text":"function uses quaternion formalism common neuroimaging, adding offset (translation) 4th column, applying voxel sizes along axis. qfac -1, \\(z\\) scale negated. resulting 4x4 matrix typically used affine transform voxel--world coordinate mapping.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/quaternToMatrix.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Convert Quaternion Parameters to a Transformation Matrix — quaternToMatrix","text":"- NIfTI-1 specification quaternions: https://nifti.nimh.nih.gov","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/random_searchlight.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a spherical random searchlight iterator — random_searchlight","title":"Create a spherical random searchlight iterator — random_searchlight","text":"function generates spherical random searchlight iterator analyzing local neighborhoods voxels within given radius brain mask.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/random_searchlight.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a spherical random searchlight iterator — random_searchlight","text":"","code":"random_searchlight(mask, radius)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/random_searchlight.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a spherical random searchlight iterator — random_searchlight","text":"mask NeuroVol object representing brain mask. radius numeric value specifying radius searchlight sphere voxel units.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/random_searchlight.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a spherical random searchlight iterator — random_searchlight","text":"list ROIVolWindow objects, representing   spherical searchlight region.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/random_searchlight.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a spherical random searchlight iterator — random_searchlight","text":"","code":"# Create a simple brain mask mask_data <- array(TRUE, c(10, 10, 10)) mask_data[1, 1, 1] <- FALSE mask <- LogicalNeuroVol(mask_data, NeuroSpace(c(10,10,10)))  # Generate random searchlight iterator with a radius of 2 voxels if (FALSE) { # \\dontrun{ searchlights <- random_searchlight(mask, radius = 2) } # }"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/read_columns-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a set of column vector from an input source (e.g. ColumnReader) — read_columns","title":"Read a set of column vector from an input source (e.g. ColumnReader) — read_columns","text":"Read set column vector input source (e.g. ColumnReader)","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/read_columns-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a set of column vector from an input source (e.g. ColumnReader) — read_columns","text":"","code":"read_columns(x, column_indices)  # S4 method for class 'ColumnReader,integer' read_columns(x, column_indices)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/read_columns-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a set of column vector from an input source (e.g. ColumnReader) — read_columns","text":"x input channel column_indices column indices","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/read_columns-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read a set of column vector from an input source (e.g. ColumnReader) — read_columns","text":"matrix consisting requested column vectors","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/read_elements-BinaryReader-numeric-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Read Elements from Binary Reader — read_elements,BinaryReader,numeric-method","title":"Read Elements from Binary Reader — read_elements,BinaryReader,numeric-method","text":"Read specified number elements BinaryReader object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/read_elements-BinaryReader-numeric-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read Elements from Binary Reader — read_elements,BinaryReader,numeric-method","text":"","code":"# S4 method for class 'BinaryReader,numeric' read_elements(x, num_elements)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/read_elements-BinaryReader-numeric-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read Elements from Binary Reader — read_elements,BinaryReader,numeric-method","text":"x Object class BinaryReader num_elements Integer specifying number elements read","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/read_elements-BinaryReader-numeric-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read Elements from Binary Reader — read_elements,BinaryReader,numeric-method","text":"Numeric vector read elements","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/read_elements-BinaryReader-numeric-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read Elements from Binary Reader — read_elements,BinaryReader,numeric-method","text":"","code":"if (FALSE) { # \\dontrun{ reader <- BinaryReader(\"data.bin\", byte_offset = 0L,                       data_type = \"double\", bytes_per_element = 8L) # Read 100 elements data <- read_elements(reader, 100) close(reader) } # }"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/read_elements-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a sequence of elements from an input source — read_elements","title":"Read a sequence of elements from an input source — read_elements","text":"Read sequence elements input source","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/read_elements-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a sequence of elements from an input source — read_elements","text":"","code":"read_elements(x, num_elements)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/read_elements-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a sequence of elements from an input source — read_elements","text":"x input channel num_elements number elements read","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/read_elements-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read a sequence of elements from an input source — read_elements","text":"elements vector","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/read_header.html","id":null,"dir":"Reference","previous_headings":"","what":"read header information of an image file — read_header","title":"read header information of an image file — read_header","text":"read header information image file","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/read_header.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"read header information of an image file — read_header","text":"","code":"read_header(file_name)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/read_header.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"read header information of an image file — read_header","text":"file_name name file read","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/read_header.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"read header information of an image file — read_header","text":"instance class FileMetaInfo","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/read_meta_info-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic function to read image meta info given a file — read_meta_info","title":"Generic function to read image meta info given a file — read_meta_info","text":"Reads meta information image files based format (NIFTI AFNI).","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/read_meta_info-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic function to read image meta info given a file — read_meta_info","text":"","code":"read_meta_info(x, file_name)  # S4 method for class 'NIFTIFormat' read_meta_info(x, file_name)  # S4 method for class 'AFNIFormat' read_meta_info(x, file_name)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/read_meta_info-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic function to read image meta info given a file — read_meta_info","text":"x FileFormat object (either NIFTIFormat AFNIFormat) file_name character string specifying file name read meta information ","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/read_meta_info-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic function to read image meta info given a file — read_meta_info","text":"object class NIFTIMetaInfo AFNIMetaInfo,   depending input format","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/read_meta_info-methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generic function to read image meta info given a file — read_meta_info","text":"methods use format-specific functions read header information create appropriate meta information object. `.read_meta_info` helper function used internally streamline process formats.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/read_meta_info-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic function to read image meta info given a file — read_meta_info","text":"","code":"if (FALSE) { # \\dontrun{ # For NIFTI format nifti_format <- new(\"NIFTIFormat\") nifti_meta <- read_meta_info(nifti_format, \"brain_scan.nii\")  # For AFNI format afni_format <- new(\"AFNIFormat\") afni_meta <- read_meta_info(afni_format, \"brain_scan+orig.HEAD\") } # }"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/read_vec.html","id":null,"dir":"Reference","previous_headings":"","what":"read_vec — read_vec","title":"read_vec — read_vec","text":"Loads neuroimaging volume one files, support various input formats memory management strategies.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/read_vec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"read_vec — read_vec","text":"","code":"read_vec(   file_name,   indices = NULL,   mask = NULL,   mode = c(\"normal\", \"mmap\", \"bigvec\", \"filebacked\") )"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/read_vec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"read_vec — read_vec","text":"file_name name(s) file(s) load. multiple files specified, loaded concatenated along time dimension. indices indices sub-volumes load (e.g. file 4-dimensional). supported \"normal\" mode. mask logical mask defining spatial elements load. Required \"bigvec\" mode optional modes. mode IO mode one : * \"normal\": Standard -memory loading * \"mmap\": Memory-mapped access (memory efficient) * \"bigvec\": Optimized large datasets masking * \"filebacked\": File-backed storage -demand loading","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/read_vec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"read_vec — read_vec","text":"NeuroVec object representing loaded volume(s).","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/read_vec.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"read_vec — read_vec","text":"function supports multiple file formats: * .nii: Standard NIfTI format * .nii.gz: Compressed NIfTI (supported mmap mode) Memory management modes: * \"normal\": Loads entire dataset memory. Best smaller datasets memory   constraint. * \"mmap\": Memory-maps file, providing efficient access large files without   loading entirely memory. available compressed files. * \"bigvec\": Optimized large datasets subset voxels interest.   Requires mask specify voxels load. * \"filebacked\": Similar mmap flexible caching strategies.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/read_vec.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"read_vec — read_vec","text":"* Memory-mapping (.mmap mode) supported gzipped files * .lv.h5 .h5 files, indices mask parameters ignored * bigvec mode requires mask specified * loading multiple files, must compatible dimensions","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/read_vec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"read_vec — read_vec","text":"","code":"if (FALSE) { # \\dontrun{ # Load a single NIfTI file img <- read_vec(\"subject01.nii\")  # Load multiple volumes and concatenate imgs <- read_vec(c(\"run1.nii\", \"run2.nii\"))  # Memory-mapped loading for large files big_img <- read_vec(\"large_volume.nii\", mode=\"mmap\")  # Load masked data for memory efficiency mask <- read_vol(\"brain_mask.nii\") masked_data <- read_vec(\"functional.nii\", mask=mask, mode=\"bigvec\") } # }"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/read_vol.html","id":null,"dir":"Reference","previous_headings":"","what":"Load an image volume from a file — read_vol","title":"Load an image volume from a file — read_vol","text":"Load image volume file","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/read_vol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load an image volume from a file — read_vol","text":"","code":"read_vol(file_name, index = 1)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/read_vol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load an image volume from a file — read_vol","text":"file_name name file load index index volume (e.g. file 4-dimensional)","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/read_vol.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load an image volume from a file — read_vol","text":"instance class DenseNeuroVol","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/read_vol.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load an image volume from a file — read_vol","text":"","code":"fname <- system.file(\"extdata\", \"global_mask_v4.nii\", package=\"neuroim2\") x <- read_vol(fname) print(dim(x)) #> [1] 64 64 25 space(x) #>  #>  NeuroSpace Object  #>  #>  >> Dimensions  #>   Grid Size: 64 x 64 x 25 #>   Memory:   5.9 KB #>  #>  >> Spatial Properties  #>   Spacing:   3.50 x 3.50 x 3.70 mm #>   Origin:    112.00 x -108.00 x -46.20 mm #>  #>  >> Anatomical Orientation  #>   X: Right-to-Left  |  Y: Posterior-to-Anterior  |  Z: Inferior-to-Superior  #>  #>  >> World Transformation  #>   Forward (Voxel to World):  #>     -3.500  0.000  -0.000   112.000 #>  0.000  3.500  -0.000  -108.000 #>  0.000  0.000   3.700   -46.200 #>  0.000  0.000   0.000     1.000  #>   Inverse (World to Voxel):  #>     -0.286  -0.000  -0.000  32.000 #>  0.000   0.286   0.000  30.857 #>  0.000   0.000   0.270  12.486 #>  0.000   0.000   0.000   1.000  #>  #>  >> Bounding Box  #>   Min Corner: -108.5, -108.0, -46.2 mm #>   Max Corner: 112.0, 112.5, 42.6 mm #>  #> =================================================="},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/read_vol_list.html","id":null,"dir":"Reference","previous_headings":"","what":"read_vol_list — read_vol_list","title":"read_vol_list — read_vol_list","text":"function loads list image volumes returns NeuroVec object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/read_vol_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"read_vol_list — read_vol_list","text":"","code":"read_vol_list(file_names, mask = NULL)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/read_vol_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"read_vol_list — read_vol_list","text":"file_names list file names load. mask optional mask defining subset voxels load.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/read_vol_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"read_vol_list — read_vol_list","text":"instance NeuroVec class.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/render-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Render an image to create a drawable image. — render","title":"Render an image to create a drawable image. — render","text":"Map image intensities image color values.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/render-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Render an image to create a drawable image. — render","text":"","code":"render(x, width, height, colmap, ...)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/render-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Render an image to create a drawable image. — render","text":"x object, e.g. instance type NeuroSlice width width rendered image height height rendered image colmap colors used map values RGBA colors. ... additional arguments","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/render_slice-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Render a slice at z coordinate — render_slice","title":"Render a slice at z coordinate — render_slice","text":"Render slice z coordinate","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/render_slice-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Render a slice at z coordinate — render_slice","text":"","code":"render_slice(x, zpos, width, height, colmap, ...)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/render_slice-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Render a slice at z coordinate — render_slice","text":"x object, e.g. instance type Layer Overlay zpos z coordinate slice . width width rendered image height height rendered image colmap colors used map values RGBA colors. ... additional arguments","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/reorient-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Remap the grid-to-world coordinates mapping of an image. — reorient","title":"Remap the grid-to-world coordinates mapping of an image. — reorient","text":"Remap grid--world coordinates mapping image.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/reorient-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remap the grid-to-world coordinates mapping of an image. — reorient","text":"","code":"reorient(x, orient)  # S4 method for class 'NeuroSpace,character' reorient(x, orient)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/reorient-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remap the grid-to-world coordinates mapping of an image. — reorient","text":"x object orient orientation code indicating \"remapped\" axes.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/reorient-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remap the grid-to-world coordinates mapping of an image. — reorient","text":"reoriented image space","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/resample-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Resample an Image to Match the Space of Another Image — resample","title":"Resample an Image to Match the Space of Another Image — resample","text":"function resamples source image match spatial properties (dimensions, resolution, orientation) target image. method resamples NeuroVol object (source) match dimensions orientation NeuroSpace object (target).","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/resample-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Resample an Image to Match the Space of Another Image — resample","text":"","code":"resample(source, target, ...)  # S4 method for class 'NeuroVol,NeuroVol' resample(source, target, interpolation = 3L)  # S4 method for class 'NeuroVol,NeuroSpace' resample(source, target, interpolation = 3L)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/resample-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Resample an Image to Match the Space of Another Image — resample","text":"source NeuroVol object representing source volume resampled. target NeuroSpace object representing target space match dimensions orientation source volume. ... Additional arguments passed resampling function, interpolation method, boundary handling, resampling options. interpolation single integer specifying type interpolation applied final resampled image. May 0 (nearest neighbor), 1 (trilinear), 3 (cubic spline). values valid.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/resample-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Resample an Image to Match the Space of Another Image — resample","text":"object representing resampled source image, spatial properties target image. resampled volume target space NeuroVol object resampled source volume matched target space's dimensions orientation.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/resample-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Resample an Image to Match the Space of Another Image — resample","text":"","code":"img <- read_vol(system.file(\"extdata\", \"global_mask_v4.nii\", package = \"neuroim2\")) rspace <- space(img)  ### normally, one would resample from two existing soource and target spaces. ### But here we manually create the target space, which is a bit ugly.  newtrans4X3 <- trans(img)[1:4, 1:3] newtrans4X3 <- newtrans4X3 * c(.5,.5,.5,1) newtrans <- cbind(newtrans4X3, c(space(img)@origin,1))  rspace <- NeuroSpace(rspace@dim*2, rspace@spacing/2, origin=rspace@origin, trans=trans(img)) rvol <- resample(img, rspace)   if (FALSE) { # \\dontrun{ # Create source and target volumes src_vol <- read_vol(system.file(\"extdata\", \"example1.nii\", package=\"neuroim2\")) targ_vol <- read_vol(system.file(\"extdata\", \"example2.nii\", package=\"neuroim2\"))  # Resample source to match target resampled <- resample(src_vol, targ_vol, interpolation=1) } # }"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/scale.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic Scale Method — scale","title":"Generic Scale Method — scale","text":"Scales object (typically) subtracting mean dividing standard deviation.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/scale.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic Scale Method — scale","text":"","code":"scale(x, ...)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/scale.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic Scale Method — scale","text":"x object scaled. ... Additional arguments scaling methods.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/scale_series-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic functions to scale (center and/or normalize by standard deviation) each series of a 4D image That is, if the 4th dimension is 'time' each series is a 1D time series. — scale_series","title":"Generic functions to scale (center and/or normalize by standard deviation) each series of a 4D image That is, if the 4th dimension is 'time' each series is a 1D time series. — scale_series","text":"Implementation scale_series NeuroVec objects. See scale_series generic definition complete documentation. Implementation scale_series NeuroVec objects. See scale_series generic definition complete documentation. Implementation scale_series NeuroVec objects. See scale_series generic definition complete documentation. Implementation scale_series NeuroVec objects. See scale_series generic definition complete documentation.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/scale_series-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic functions to scale (center and/or normalize by standard deviation) each series of a 4D image That is, if the 4th dimension is 'time' each series is a 1D time series. — scale_series","text":"","code":"scale_series(x, center, scale)  # S4 method for class 'NeuroVec,logical,missing' scale_series(x, center, scale)  # S4 method for class 'NeuroVec,logical,logical' scale_series(x, center, scale)  # S4 method for class 'NeuroVec,missing,logical' scale_series(x, center, scale)  # S4 method for class 'NeuroVec,missing,missing' scale_series(x, center, scale)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/scale_series-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic functions to scale (center and/or normalize by standard deviation) each series of a 4D image That is, if the 4th dimension is 'time' each series is a 1D time series. — scale_series","text":"x NeuroVec object center Logical indicating whether center scale Logical indicating whether scale","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/scale_series-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic functions to scale (center and/or normalize by standard deviation) each series of a 4D image That is, if the 4th dimension is 'time' each series is a 1D time series. — scale_series","text":"Scaled NeuroVec object Scaled NeuroVec object Scaled NeuroVec object Scaled NeuroVec object","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/scale_series-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic functions to scale (center and/or normalize by standard deviation) each series of a 4D image That is, if the 4th dimension is 'time' each series is a 1D time series. — scale_series","text":"","code":"bvec <- NeuroVec(array(rnorm(24*24*24*24), c(24,24,24,24)), NeuroSpace(c(24,24,24,24), c(1,1,1))) res <- scale_series(bvec, TRUE, TRUE)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/searchlight-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Searchlight Analysis Methods — searchlight-methods","title":"Searchlight Analysis Methods — searchlight-methods","text":"Methods performing searchlight analyses neuroimaging data","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/searchlight.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an exhaustive searchlight iterator — searchlight","title":"Create an exhaustive searchlight iterator — searchlight","text":"function generates exhaustive searchlight iterator returns either voxel coordinates ROIVolWindow objects searchlight sphere within provided mask. iterator visits every non-zero voxel mask potential center voxel.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/searchlight.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an exhaustive searchlight iterator — searchlight","text":"","code":"searchlight(mask, radius, eager = FALSE, nonzero = FALSE, cores = 0)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/searchlight.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an exhaustive searchlight iterator — searchlight","text":"mask NeuroVol object representing brain mask. radius numeric value specifying radius (mm) spherical searchlight. eager logical value specifying whether eagerly compute searchlight ROIs. Default FALSE, uses lazy evaluation. nonzero logical value indicating whether include coordinates nonzero values supplied mask. Default FALSE. cores integer specifying number cores use parallel computation. Default 0, uses single core.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/searchlight.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an exhaustive searchlight iterator — searchlight","text":"deferred_list object containing either matrices integer-valued   voxel coordinates ROIVolWindow objects, representing   searchlight region.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/searchlight.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an exhaustive searchlight iterator — searchlight","text":"","code":"# Load an example brain mask mask <- read_vol(system.file(\"extdata\", \"global_mask_v4.nii\", package=\"neuroim2\"))  # Generate an exhaustive searchlight iterator with a radius of 6 mm if (FALSE) { # \\dontrun{ searchlights <- searchlight(mask, radius = 6, eager = TRUE) } # }"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/searchlight_coords.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an exhaustive searchlight iterator for voxel coordinates using spherical_roi — searchlight_coords","title":"Create an exhaustive searchlight iterator for voxel coordinates using spherical_roi — searchlight_coords","text":"function generates exhaustive searchlight iterator returns voxel coordinates searchlight sphere within provided mask, using `spherical_roi` neighborhood computation. iterator visits every non-zero voxel mask potential center voxel.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/searchlight_coords.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an exhaustive searchlight iterator for voxel coordinates using spherical_roi — searchlight_coords","text":"","code":"searchlight_coords(mask, radius, nonzero = FALSE, cores = 0)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/searchlight_coords.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an exhaustive searchlight iterator for voxel coordinates using spherical_roi — searchlight_coords","text":"mask NeuroVol object representing brain mask. radius numeric value specifying radius (mm) spherical searchlight. nonzero logical value indicating whether include coordinates nonzero values supplied mask. Default FALSE. cores integer specifying number cores use parallel computation. Default 0, uses single core.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/searchlight_coords.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an exhaustive searchlight iterator for voxel coordinates using spherical_roi — searchlight_coords","text":"deferred_list object containing matrices integer-valued   voxel coordinates, representing searchlight region.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/searchlight_coords.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an exhaustive searchlight iterator for voxel coordinates using spherical_roi — searchlight_coords","text":"","code":"# Load an example brain mask mask <- read_vol(system.file(\"extdata\", \"global_mask_v4.nii\", package=\"neuroim2\"))  # Generate an exhaustive searchlight iterator with a radius of 6 mm if (FALSE) { # \\dontrun{ searchlights <- searchlight_coords(mask, radius = 6) } # }"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/series-NeuroHyperVec-ANY-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Series method for NeuroHyperVec — series,NeuroHyperVec,ANY-method","title":"Series method for NeuroHyperVec — series,NeuroHyperVec,ANY-method","text":"Series method NeuroHyperVec","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/series-NeuroHyperVec-ANY-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Series method for NeuroHyperVec — series,NeuroHyperVec,ANY-method","text":"","code":"# S4 method for class 'NeuroHyperVec,ANY' series(x, i, j, k, ...)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/series-NeuroHyperVec-ANY-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Series method for NeuroHyperVec — series,NeuroHyperVec,ANY-method","text":"x NeuroHyperVec object first index j second index k third index ... Additional arguments (used)","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/series-NeuroHyperVec-ANY-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Series method for NeuroHyperVec — series,NeuroHyperVec,ANY-method","text":"2D array dimensions [features x trials]","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/series-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract one or more series from object — series","title":"Extract one or more series from object — series","text":"Extract one series object","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/series-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract one or more series from object — series","text":"","code":"series(x, i, ...)  # S4 method for class 'NeuroVec,matrix' series(x, i)  # S4 method for class 'NeuroVec,matrix' series_roi(x, i)  # S4 method for class 'NeuroVec,ROICoords' series(x, i)  # S4 method for class 'NeuroVec,ROICoords' series_roi(x, i)  # S4 method for class 'NeuroVec,LogicalNeuroVol' series(x, i)  # S4 method for class 'NeuroVec,NeuroVol' series(x, i)  # S4 method for class 'NeuroVec,LogicalNeuroVol' series_roi(x, i)  # S4 method for class 'NeuroVec,integer' series(x, i, j, k, drop = TRUE)  # S4 method for class 'DenseNeuroVec,integer' series(x, i, j, k, drop = TRUE)  # S4 method for class 'NeuroVec,numeric' series(x, i, j, k, drop = TRUE)  # S4 method for class 'NeuroVec,numeric' series_roi(x, i, j, k)  # S4 method for class 'NeuroVec,numeric' series_roi(x, i, j, k)  # S4 method for class 'NeuroVec,matrix' series_roi(x, i)  # S4 method for class 'NeuroVec,LogicalNeuroVol' series_roi(x, i)  # S4 method for class 'NeuroVecSeq,integer' series(x, i, j, k, drop = TRUE)  # S4 method for class 'NeuroVecSeq,numeric' series(x, i, j, k, drop = TRUE)  # S4 method for class 'NeuroVecSeq,matrix' series(x, i)  # S4 method for class 'NeuroVecSeq,matrix' series_roi(x, i)  # S4 method for class 'AbstractSparseNeuroVec,ROICoords' series(x, i)  # S4 method for class 'AbstractSparseNeuroVec,matrix' series(x, i)  # S4 method for class 'AbstractSparseNeuroVec,numeric' series(x, i, j, k)  # S4 method for class 'AbstractSparseNeuroVec,integer' series(x, i, j, k, drop = TRUE)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/series-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract one or more series from object — series","text":"x NeuroVecSeq object matrix ROI coordinates (n x 3) ... additional arguments j second dimension index k third dimension index drop whether drop dimension length 1","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/series-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract one or more series from object — series","text":"matrix column represents voxel's time series ROIVec object containing time series specified ROI","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/series_roi.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract time series from specific voxel coordinates and return as ROI object — series_roi","title":"Extract time series from specific voxel coordinates and return as ROI object — series_roi","text":"Extracts time series data NeuroVec object specified voxel coordinates returns ROI object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/series_roi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract time series from specific voxel coordinates and return as ROI object — series_roi","text":"","code":"series_roi(x, i, ...)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/series_roi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract time series from specific voxel coordinates and return as ROI object — series_roi","text":"x NeuroVec object Numeric index first dimension ... Additional arguments","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/series_roi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract time series from specific voxel coordinates and return as ROI object — series_roi","text":"ROIVec object containing time series data specified coordinates","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/show-AxisSet1D-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Show method for AxisSet1D objects — show,AxisSet1D-method","title":"Show method for AxisSet1D objects — show,AxisSet1D-method","text":"Show method AxisSet1D objects","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/show-AxisSet1D-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show method for AxisSet1D objects — show,AxisSet1D-method","text":"","code":"# S4 method for class 'AxisSet1D' show(object)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/show-AxisSet1D-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show method for AxisSet1D objects — show,AxisSet1D-method","text":"object AxisSet1D object","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/show-AxisSet2D-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Show method for AxisSet2D objects — show,AxisSet2D-method","title":"Show method for AxisSet2D objects — show,AxisSet2D-method","text":"Show method AxisSet2D objects","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/show-AxisSet2D-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show method for AxisSet2D objects — show,AxisSet2D-method","text":"","code":"# S4 method for class 'AxisSet2D' show(object)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/show-AxisSet2D-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show method for AxisSet2D objects — show,AxisSet2D-method","text":"object AxisSet2D object","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/show-AxisSet3D-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Show method for AxisSet3D objects — show,AxisSet3D-method","title":"Show method for AxisSet3D objects — show,AxisSet3D-method","text":"Show method AxisSet3D objects","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/show-AxisSet3D-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show method for AxisSet3D objects — show,AxisSet3D-method","text":"","code":"# S4 method for class 'AxisSet3D' show(object)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/show-AxisSet3D-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show method for AxisSet3D objects — show,AxisSet3D-method","text":"object AxisSet3D object","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/show-AxisSet4D-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Show method for AxisSet4D objects — show,AxisSet4D-method","title":"Show method for AxisSet4D objects — show,AxisSet4D-method","text":"Show method AxisSet4D objects","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/show-AxisSet4D-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show method for AxisSet4D objects — show,AxisSet4D-method","text":"","code":"# S4 method for class 'AxisSet4D' show(object)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/show-AxisSet4D-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show method for AxisSet4D objects — show,AxisSet4D-method","text":"object AxisSet4D object","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/show-ClusteredNeuroVol-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Display ClusteredNeuroVol Information — show,ClusteredNeuroVol-method","title":"Display ClusteredNeuroVol Information — show,ClusteredNeuroVol-method","text":"Display ClusteredNeuroVol Information","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/show-ClusteredNeuroVol-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display ClusteredNeuroVol Information — show,ClusteredNeuroVol-method","text":"","code":"# S4 method for class 'ClusteredNeuroVol' show(object)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/show-ClusteredNeuroVol-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display ClusteredNeuroVol Information — show,ClusteredNeuroVol-method","text":"object ClusteredNeuroVol object","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/show-FileMetaInfo-method.html","id":null,"dir":"Reference","previous_headings":"","what":"show a FileMetaInfo — show,FileMetaInfo-method","title":"show a FileMetaInfo — show,FileMetaInfo-method","text":"show FileMetaInfo","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/show-FileMetaInfo-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"show a FileMetaInfo — show,FileMetaInfo-method","text":"","code":"# S4 method for class 'FileMetaInfo' show(object)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/show-FileMetaInfo-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"show a FileMetaInfo — show,FileMetaInfo-method","text":"object object","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/show-MappedNeuroVec-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Show Method for MappedNeuroVec Objects — show,MappedNeuroVec-method","title":"Show Method for MappedNeuroVec Objects — show,MappedNeuroVec-method","text":"Displays formatted summary MappedNeuroVec object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/show-MappedNeuroVec-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show Method for MappedNeuroVec Objects — show,MappedNeuroVec-method","text":"","code":"# S4 method for class 'MappedNeuroVec' show(object)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/show-MappedNeuroVec-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show Method for MappedNeuroVec Objects — show,MappedNeuroVec-method","text":"object MappedNeuroVec object","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/show-NamedAxis-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Show method for NamedAxis objects — show,NamedAxis-method","title":"Show method for NamedAxis objects — show,NamedAxis-method","text":"Show method NamedAxis objects","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/show-NamedAxis-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show method for NamedAxis objects — show,NamedAxis-method","text":"","code":"# S4 method for class 'NamedAxis' show(object)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/show-NamedAxis-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show method for NamedAxis objects — show,NamedAxis-method","text":"object NamedAxis object","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/show-NeuroHyperVec-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Show NeuroHyperVec Object — show,NeuroHyperVec-method","title":"Show NeuroHyperVec Object — show,NeuroHyperVec-method","text":"Displays formatted summary NeuroHyperVec object, including dimensions, sparsity information, memory usage.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/show-NeuroHyperVec-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show NeuroHyperVec Object — show,NeuroHyperVec-method","text":"","code":"# S4 method for class 'NeuroHyperVec' show(object)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/show-NeuroHyperVec-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show NeuroHyperVec Object — show,NeuroHyperVec-method","text":"object NeuroHyperVec object display.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/show-NeuroHyperVec-method.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Show NeuroHyperVec Object — show,NeuroHyperVec-method","text":"Display NeuroHyperVec Object","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/show-NeuroVec-method.html","id":null,"dir":"Reference","previous_headings":"","what":"show a NeuroVec object — show,NeuroVec-method","title":"show a NeuroVec object — show,NeuroVec-method","text":"function prints summary NeuroVec object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/show-NeuroVec-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"show a NeuroVec object — show,NeuroVec-method","text":"","code":"# S4 method for class 'NeuroVec' show(object)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/show-NeuroVec-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"show a NeuroVec object — show,NeuroVec-method","text":"object NeuroVec object display.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/show-NeuroVecSource-method.html","id":null,"dir":"Reference","previous_headings":"","what":"show a NeuroVecSource object — show,NeuroVecSource-method","title":"show a NeuroVecSource object — show,NeuroVecSource-method","text":"function prints summary NeuroVecSource object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/show-NeuroVecSource-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"show a NeuroVecSource object — show,NeuroVecSource-method","text":"","code":"# S4 method for class 'NeuroVecSource' show(object)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/show-NeuroVecSource-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"show a NeuroVecSource object — show,NeuroVecSource-method","text":"object NeuroVecSource object display.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/show-NeuroVol-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Display NeuroVol Object — show,NeuroVol-method","title":"Display NeuroVol Object — show,NeuroVol-method","text":"Displays formatted summary NeuroVol object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/show-NeuroVol-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display NeuroVol Object — show,NeuroVol-method","text":"","code":"# S4 method for class 'NeuroVol' show(object)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/show-NeuroVol-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display NeuroVol Object — show,NeuroVol-method","text":"object NeuroVol object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/show-ROIVec-method.html","id":null,"dir":"Reference","previous_headings":"","what":"show an ROIVec — show,ROIVec-method","title":"show an ROIVec — show,ROIVec-method","text":"show ROIVec","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/show-ROIVec-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"show an ROIVec — show,ROIVec-method","text":"","code":"# S4 method for class 'ROIVec' show(object)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/show-ROIVec-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"show an ROIVec — show,ROIVec-method","text":"object object","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/show-ROIVol-method.html","id":null,"dir":"Reference","previous_headings":"","what":"show an ROIVol — show,ROIVol-method","title":"show an ROIVol — show,ROIVol-method","text":"show ROIVol","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/show-ROIVol-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"show an ROIVol — show,ROIVol-method","text":"","code":"# S4 method for class 'ROIVol' show(object)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/show-ROIVol-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"show an ROIVol — show,ROIVol-method","text":"object object","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/show-SparseNeuroVec-method.html","id":null,"dir":"Reference","previous_headings":"","what":"show a SparseNeuroVec — show,SparseNeuroVec-method","title":"show a SparseNeuroVec — show,SparseNeuroVec-method","text":"show SparseNeuroVec","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/show-SparseNeuroVec-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"show a SparseNeuroVec — show,SparseNeuroVec-method","text":"","code":"# S4 method for class 'SparseNeuroVec' show(object)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/show-SparseNeuroVec-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"show a SparseNeuroVec — show,SparseNeuroVec-method","text":"object object","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/show-SparseNeuroVol-method.html","id":null,"dir":"Reference","previous_headings":"","what":"show a SparseNeuroVol — show,SparseNeuroVol-method","title":"show a SparseNeuroVol — show,SparseNeuroVol-method","text":"show SparseNeuroVol","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/show-SparseNeuroVol-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"show a SparseNeuroVol — show,SparseNeuroVol-method","text":"","code":"# S4 method for class 'SparseNeuroVol' show(object)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/show-SparseNeuroVol-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"show a SparseNeuroVol — show,SparseNeuroVol-method","text":"object object","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/show-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Show method for IndexLookupVol Objects — show,IndexLookupVol-method","title":"Show method for IndexLookupVol Objects — show,IndexLookupVol-method","text":"Displays formatted summary NeuroSlice object's properties using color-coded output improved readability. Provides beautifully formatted display NeuroSpace object's properties, including dimensions, spacing, origin, transformation information. Uses color coding unicode characters enhanced readability.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/show-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show method for IndexLookupVol Objects — show,IndexLookupVol-method","text":"","code":"# S4 method for class 'IndexLookupVol' show(object)  # S4 method for class 'NeuroSlice' show(object)  # S4 method for class 'NeuroSpace' show(object)  # S4 method for class 'DenseNeuroVec' show(object)  # S4 method for class 'NeuroVecSeq' show(object)  # S4 method for class 'NeuroVecSeq' show(object)  # S4 method for class 'ROICoords' show(object)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/show-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show method for IndexLookupVol Objects — show,IndexLookupVol-method","text":"object NeuroSpace object display","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/show-methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Show method for IndexLookupVol Objects — show,IndexLookupVol-method","text":"Display NeuroSlice Information Shows key properties including: Object type class Dimensions memory usage Spatial properties (spacing, origin) Value range statistics Axis orientations","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/show-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show method for IndexLookupVol Objects — show,IndexLookupVol-method","text":"","code":"slice <- NeuroSlice(matrix(1:100, 10, 10), NeuroSpace(c(10, 10))) show(slice) #>  #> === NeuroSlice Object ===  #>  #> * Basic Information  #>   Type: NeuroSlice #>   Dimensions: 10 x 10 (5.9 Kb) #>  #> * Data Properties #>   Value Range: [1.00, 100.00] #>  #> * Spatial Properties #>   Spacing: 1.00 x 1.00 #>   Origin:  0.00 x 0.00 #>   Axes:    Left-to-Right x Posterior-to-Anterior #>  #> 28"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/slice-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract image slice — slice","title":"Extract image slice — slice","text":"Extract 2D slice image volume","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/slice-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract image slice — slice","text":"","code":"slice(x, zlevel, along, orientation, ...)  # S4 method for class 'NeuroVol,numeric,numeric,missing' slice(x, zlevel, along, orientation)  # S4 method for class 'NeuroVol,numeric,NeuroSpace,AxisSet3D' slice(x, zlevel, along, orientation)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/slice-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract image slice — slice","text":"x object zlevel coordinate (voxel units) along sliced axis along axis along slice orientation target orientation 2D slice ... additional arguments","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/slices-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract an ordered series of 2D slices from a 3D or 4D object — slices","title":"Extract an ordered series of 2D slices from a 3D or 4D object — slices","text":"function extracts ordered series 2D slices 3D 4D object. returned slices order appear original object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/slices-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract an ordered series of 2D slices from a 3D or 4D object — slices","text":"","code":"slices(x, ...)  # S4 method for class 'NeuroVol' slices(x)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/slices-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract an ordered series of 2D slices from a 3D or 4D object — slices","text":"x 3D 4D object extract slices ... Additional arguments passed underlying methods","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/slices-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract an ordered series of 2D slices from a 3D or 4D object — slices","text":"list 2D matrices, containing slice input object","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/space-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Geometric Properties of an Image — space","title":"Extract Geometric Properties of an Image — space","text":"function retrieves geometric properties given image, dimensions voxel size. Retrieves NeuroSpace object associated IndexLookupVol object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/space-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Geometric Properties of an Image — space","text":"","code":"space(x, ...)  # S4 method for class 'IndexLookupVol' space(x)  # S4 method for class 'ROICoords' space(x)  # S4 method for class 'NeuroObj' space(x)  # S4 method for class 'NeuroSpace' space(x)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/space-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Geometric Properties of an Image — space","text":"x IndexLookupVol object ... Additional arguments, needed.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/space-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Geometric Properties of an Image — space","text":"object representing geometric space image, type NeuroSpace. NeuroSpace object","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/space-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Geometric Properties of an Image — space","text":"","code":"# Create a NeuroSpace object with dimensions (10, 10, 10) and voxel size (1, 1, 1) x <- NeuroSpace(c(10, 10, 10), c(1, 1, 1))  # Create a NeuroVol object with random data and the specified NeuroSpace vol <- NeuroVol(rnorm(10 * 10 * 10), x)  # Retrieve the geometric properties of the NeuroVol object identical(x, space(vol)) #> [1] TRUE  if (FALSE) { # \\dontrun{ ilv <- IndexLookupVol(space, c(1:100)) space(ilv)  # Get the associated NeuroSpace object } # }"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/spacing-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Voxel Dimensions of an Image — spacing","title":"Extract Voxel Dimensions of an Image — spacing","text":"function extracts voxel dimensions image represented input object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/spacing-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Voxel Dimensions of an Image — spacing","text":"","code":"spacing(x)  # S4 method for class 'ROICoords' spacing(x)  # S4 method for class 'NeuroObj' spacing(x)  # S4 method for class 'NeuroSpace' spacing(x)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/spacing-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Voxel Dimensions of an Image — spacing","text":"x object representing image.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/spacing-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Voxel Dimensions of an Image — spacing","text":"numeric vector containing voxel dimensions image.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/spacing-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Voxel Dimensions of an Image — spacing","text":"","code":"bspace <- NeuroSpace(c(10, 10, 10), c(2, 2, 2)) all.equal(spacing(bspace), c(2, 2, 2)) #> [1] TRUE"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/spatial-filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Spatial Filtering Methods for Neuroimaging Data — spatial-filter","title":"Spatial Filtering Methods for Neuroimaging Data — spatial-filter","text":"Methods applying spatial filters neuroimaging data","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/spherical_roi.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Spherical Region of Interest — spherical_roi","title":"Create a Spherical Region of Interest — spherical_roi","text":"Creates Spherical ROI based centroid.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/spherical_roi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Spherical Region of Interest — spherical_roi","text":"","code":"spherical_roi(   bvol,   centroid,   radius,   fill = NULL,   nonzero = FALSE,   use_cpp = TRUE )"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/spherical_roi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Spherical Region of Interest — spherical_roi","text":"bvol NeuroVol NeuroSpace instance centroid center sphere positive-coordinate (,j,k) voxel space. radius radius real units (e.g. millimeters) spherical ROI fill optional value(s) store data nonzero TRUE, keep nonzero elements bvol use_cpp whether use compiled c++ code","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/spherical_roi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Spherical Region of Interest — spherical_roi","text":"instance class ROIVol","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/spherical_roi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Spherical Region of Interest — spherical_roi","text":"","code":"sp1 <- NeuroSpace(c(10,10,10), c(1,2,3))  # create an ROI centered around the integer-valued positive voxel coordinate: i=5, j=5, k=5  cube <- spherical_roi(sp1, c(5,5,5), 3.5)  vox <- coords(cube)  cds <- coords(cube, real=TRUE)  ## fill in ROI with value of 6  cube1 <- spherical_roi(sp1, c(5,5,5), 3.5, fill=6)  all(cube1 == 6) #> [1] TRUE   # create an ROI centered around the real-valued coordinates: x=5, y=5, z=5  vox <- coord_to_grid(sp1, c(5, 5, 5))  cube <- spherical_roi(sp1, vox, 3.5)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/spherical_roi_set.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Multiple Spherical Regions of Interest — spherical_roi_set","title":"Create Multiple Spherical Regions of Interest — spherical_roi_set","text":"function generates multiple spherical ROIs simultaneously, centered provided voxel coordinates. efficient calling spherical_roi multiple times need create many ROIs.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/spherical_roi_set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Multiple Spherical Regions of Interest — spherical_roi_set","text":"","code":"spherical_roi_set(bvol, centroids, radius, fill = NULL, nonzero = FALSE)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/spherical_roi_set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Multiple Spherical Regions of Interest — spherical_roi_set","text":"bvol NeuroVol NeuroSpace instance centroids matrix voxel coordinates row represents centroid (,j,k) radius radius real units (e.g. millimeters) spherical ROIs fill Optional value(s) store data. provided, must either single value vector length equal number ROIs nonzero TRUE, keep nonzero elements bvol","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/spherical_roi_set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Multiple Spherical Regions of Interest — spherical_roi_set","text":"list ROIVolWindow objects, one centroid","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/spherical_roi_set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Multiple Spherical Regions of Interest — spherical_roi_set","text":"","code":"# Create a NeuroSpace object sp1 <- NeuroSpace(c(10,10,10), c(1,2,3))  # Create multiple ROIs centered at different voxel coordinates centroids <- matrix(c(5,5,5, 3,3,3, 7,7,7), ncol=3, byrow=TRUE) rois <- spherical_roi_set(sp1, centroids, 3.5)  # Create ROIs with specific fill values rois <- spherical_roi_set(sp1, centroids, 3.5, fill=c(1,2,3))"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/split_blocks-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Cut a vector-valued object into a list of sub-blocks — split_blocks","title":"Cut a vector-valued object into a list of sub-blocks — split_blocks","text":"Splits vector-valued object list sub-blocks defined vector indices.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/split_blocks-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cut a vector-valued object into a list of sub-blocks — split_blocks","text":"","code":"split_blocks(x, indices, ...)  # S4 method for class 'NeuroVec,integer' split_blocks(x, indices, ...)  # S4 method for class 'NeuroVec,factor' split_blocks(x, indices, ...)  # S4 method for class 'NeuroVec,factor' split_blocks(x, indices, ...)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/split_blocks-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cut a vector-valued object into a list of sub-blocks — split_blocks","text":"x vector-valued object indices vector indices defining sub-blocks. Must match length input vector. ... additional arguments","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/split_clusters-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Cut an object into a list of spatial or spatiotemporal clusters — split_clusters","title":"Cut an object into a list of spatial or spatiotemporal clusters — split_clusters","text":"function cuts object list sub-objects based vector cluster indices. resulting list contains clusters separate objects. methods split NeuroVec object multiple ROIVec objects based cluster assignments.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/split_clusters-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cut an object into a list of spatial or spatiotemporal clusters — split_clusters","text":"","code":"split_clusters(x, clusters, ...)  # S4 method for class 'NeuroVec,ClusteredNeuroVol' split_clusters(x, clusters, ...)  # S4 method for class 'NeuroVec,integer' split_clusters(x, clusters, ...)  # S4 method for class 'NeuroVol,ClusteredNeuroVol' split_clusters(x, clusters)  # S4 method for class 'NeuroVol,integer' split_clusters(x, clusters)  # S4 method for class 'NeuroVol,numeric' split_clusters(x, clusters)  # S4 method for class 'ClusteredNeuroVol,missing' split_clusters(x, clusters)  # S4 method for class 'NeuroVec,integer' split_clusters(x, clusters, ...)  # S4 method for class 'NeuroVec,numeric' split_clusters(x, clusters, ...)  # S4 method for class 'NeuroVec,ClusteredNeuroVol' split_clusters(x, clusters, ...)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/split_clusters-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cut an object into a list of spatial or spatiotemporal clusters — split_clusters","text":"x NeuroVec object split. clusters Either ClusteredNeuroVol object integer vector cluster assignments. ... Additional arguments passed methods.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/split_clusters-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cut an object into a list of spatial or spatiotemporal clusters — split_clusters","text":"deflist object containing ROIVec instances cluster.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/split_clusters-methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cut an object into a list of spatial or spatiotemporal clusters — split_clusters","text":"two methods splitting clusters: Using ClusteredNeuroVol object: method uses pre-defined clusters ClusteredNeuroVol object. Using integer vector: method allows custom cluster assignments. methods return deflist, lazy-loading list ROIVec objects.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/split_clusters-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cut an object into a list of spatial or spatiotemporal clusters — split_clusters","text":"","code":"if (FALSE) { # \\dontrun{   # Create a synthetic 3D volume and its NeuroSpace   space <- NeuroSpace(c(10, 10, 10))   vol_data <- array(rnorm(10 * 10 * 10), dim = c(10, 10, 10))   neuro_vec <- NeuroVec(vol_data, space)    # Create a binary mask (e.g., select voxels with values > 0)   mask_data <- vol_data > 0   mask_vol <- LogicalNeuroVol(mask_data, space)    # Extract indices and coordinates for the masked voxels   mask_idx <- which(mask_data)   coords <- index_to_coord(mask_vol, mask_idx)    # Perform k-means clustering on the coordinates (e.g., 3 clusters)   set.seed(123)  # for reproducibility   k_res <- kmeans(coords, centers = 3)    # Create a ClusteredNeuroVol using the mask and k-means cluster assignments   clustered_vol <- ClusteredNeuroVol(mask_vol, k_res$cluster)    # Split the NeuroVec by clusters using the ClusteredNeuroVol method   split_result_clust <- split_clusters(neuro_vec, clustered_vol)    # Calculate and print the mean value for each cluster   means_clust <- sapply(split_result_clust, function(x) mean(values(x)))   print(means_clust)    # Alternatively, create an integer vector of cluster assignments:   cluster_assignments <- numeric(prod(dim(space)))   cluster_assignments[mask_idx] <- k_res$cluster   split_result_int <- split_clusters(neuro_vec, as.integer(cluster_assignments))    # Verify that both splitting methods yield the same cluster means   means_int <- sapply(split_result_int, function(x) mean(values(x)))   print(all.equal(sort(means_clust), sort(means_int))) } # }   # Create a simple example space and data space <- NeuroSpace(c(10, 10, 10,4)) data <- array(rnorm(1000*4), dim = c(10, 10, 10,4)) vec <- NeuroVec(data, space)  # Create a mask for clustering (e.g., values > 0) mask <- vec[,,,1] > 0 mask_vol <- LogicalNeuroVol(as.array(mask), NeuroSpace(c(10, 10, 10)))  # Get coordinates of masked voxels for clustering mask_idx <- which(mask) coords <- index_to_coord(mask_vol, mask_idx)  # Perform clustering on the coordinates (3 clusters for example) set.seed(123) # for reproducibility kmeans_result <- kmeans(coords, centers = 3)  # Create a ClusteredNeuroVol clustered_vol <- ClusteredNeuroVol(mask_vol, kmeans_result$cluster)  # Split the NeuroVec by clusters split_result <- split_clusters(vec, clustered_vol)  # Calculate mean value for each cluster cluster_means <- sapply(split_result, function(x) mean(values(x))) print(cluster_means) #> [1] 0.1365823 0.2027859 0.2112342  # Alternative: using integer cluster assignments cluster_indices <- numeric(prod(dim(space)[1:3])) cluster_indices[mask_idx] <- kmeans_result$cluster split_result2 <- split_clusters(vec, as.integer(cluster_indices))  # Verify both methods give same results cluster_means2 <- sapply(split_result2, function(x) mean(values(x))) print(all.equal(sort(cluster_means), sort(cluster_means2))) #> [1] TRUE"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/split_fill-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Fill Disjoint Sets of Values with the Output of a Function — split_fill","title":"Fill Disjoint Sets of Values with the Output of a Function — split_fill","text":"function splits object disjoint sets values based factor, applies specified function set, returns new object original values replaced function's output.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/split_fill-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fill Disjoint Sets of Values with the Output of a Function — split_fill","text":"","code":"split_fill(x, fac, FUN)  # S4 method for class 'NeuroVol,factor,function' split_fill(x, fac, FUN)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/split_fill-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fill Disjoint Sets of Values with the Output of a Function — split_fill","text":"x object split. fac factor split . FUN function used summarize sets.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/split_fill-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fill Disjoint Sets of Values with the Output of a Function — split_fill","text":"new object original values replaced output function.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/split_fill-methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fill Disjoint Sets of Values with the Output of a Function — split_fill","text":"FUN function can either return scalar input vector vector equal length input vector. returns scalar, every voxel set filled value output vector.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/split_fill-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fill Disjoint Sets of Values with the Output of a Function — split_fill","text":"","code":"## Summarize with mean -- FUN returns a scalar x <- NeuroSpace(c(10, 10, 10), c(1, 1, 1)) vol <- NeuroVol(rnorm(10 * 10 * 10), x) fac <- factor(rep(1:10, length.out=1000)) ovol.mean <- split_fill(vol, fac, mean) identical(dim(ovol.mean), dim(vol)) #> [1] TRUE length(unique(as.vector(ovol.mean))) == 10 #> [1] TRUE  ## Transform by reversing vector -- FUN returns a vector ovol2 <- split_fill(vol, fac, rev)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/split_reduce-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize Subsets of an Object by Splitting by Row and Applying a Summary Function — split_reduce","title":"Summarize Subsets of an Object by Splitting by Row and Applying a Summary Function — split_reduce","text":"function summarizes subsets numeric matrix matrix-like object first splitting object row applying summary function. Implementation split_reduce matrix integer factors. See split_reduce generic definition complete documentation. Implementation split_reduce matrix factor grouping. See split_reduce generic definition complete documentation. Implementation split_reduce matrix factor grouping. See split_reduce generic definition complete documentation. Implementation split_reduce NeuroVec objects. See split_reduce generic definition complete documentation. Implementation split_reduce NeuroVec objects. See split_reduce generic definition complete documentation.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/split_reduce-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize Subsets of an Object by Splitting by Row and Applying a Summary Function — split_reduce","text":"","code":"split_reduce(x, fac, FUN)  # S4 method for class 'matrix,integer,function' split_reduce(x, fac, FUN)  # S4 method for class 'matrix,factor,missing' split_reduce(x, fac)  # S4 method for class 'matrix,factor,function' split_reduce(x, fac, FUN)  # S4 method for class 'NeuroVec,factor,function' split_reduce(x, fac, FUN)  # S4 method for class 'NeuroVec,factor,missing' split_reduce(x, fac, FUN)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/split_reduce-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize Subsets of an Object by Splitting by Row and Applying a Summary Function — split_reduce","text":"x NeuroVec object fac Factor grouping FUN Function apply group","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/split_reduce-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize Subsets of an Object by Splitting by Row and Applying a Summary Function — split_reduce","text":"new matrix original values \"reduced\" supplied function. Matrix reduced values Matrix reduced values Matrix reduced values Matrix reduced values Matrix reduced values","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/split_reduce-methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summarize Subsets of an Object by Splitting by Row and Applying a Summary Function — split_reduce","text":"'FUN' supplied, must take vector return single scalar value. returns one value, error occur. 'x' NeuroVec instance, voxels (dimensions 1:3) treated columns time-series (dimension 4) rows. summary function applied groups voxels. However, goal apply function groups time-points. method supports two types splitting: voxel: length(fac) equals number voxels volume: length(fac) equals number volumes method supports two types splitting: voxel: length(fac) equals number voxels volume: length(fac) equals number volumes","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/split_reduce-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize Subsets of an Object by Splitting by Row and Applying a Summary Function — split_reduce","text":"","code":"mat = matrix(rnorm(100*100), 100, 100) fac = factor(sample(1:3, nrow(mat), replace=TRUE)) ## Compute column means of each sub-matrix ms <- split_reduce(mat, fac) all.equal(row.names(ms), levels(fac)) #> [1] TRUE  ## Compute column medians of each sub-matrix ms <- split_reduce(mat, fac, median)  ## Compute time-series means grouped over voxels. ## Here, 'length(fac)' must equal the number of voxels: 'prod(dim(bvec)[1:3])' bvec <- NeuroVec(array(rnorm(24*24*24*24), c(24,24,24,24)), NeuroSpace(c(24,24,24,24), c(1,1,1))) fac <- factor(sample(1:3, prod(dim(bvec)[1:3]), replace=TRUE)) ms <- split_reduce(bvec, fac) ms2 <- split_reduce(bvec, fac, mean) all.equal(row.names(ms), levels(fac)) #> [1] TRUE all.equal(ms, ms2) #> [1] TRUE"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/split_scale-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Center and/or Scale Row-subsets of a Matrix or Matrix-like Object — split_scale","title":"Center and/or Scale Row-subsets of a Matrix or Matrix-like Object — split_scale","text":"function centers /scales row-subsets numeric matrix matrix-like object. Implementation split_scale matrix objects. See split_scale generic definition complete documentation. Implementation split_scale matrix objects. See split_scale generic definition complete documentation. Implementation split_scale DenseNeuroVec objects. See split_scale generic definition complete documentation. Implementation split_scale DenseNeuroVec objects. See split_scale generic definition complete documentation. Implementation split_scale DenseNeuroVec objects. See split_scale generic definition complete documentation.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/split_scale-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Center and/or Scale Row-subsets of a Matrix or Matrix-like Object — split_scale","text":"","code":"split_scale(x, f, center, scale)  # S4 method for class 'matrix,factor,logical,logical' split_scale(x, f, center = TRUE, scale = TRUE)  # S4 method for class 'matrix,factor,missing,missing' split_scale(x, f)  # S4 method for class 'DenseNeuroVec,factor,missing,missing' split_scale(x, f)  # S4 method for class 'DenseNeuroVec,factor,logical,missing' split_scale(x, f, center)  # S4 method for class 'DenseNeuroVec,factor,logical,logical' split_scale(x, f, center, scale)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/split_scale-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Center and/or Scale Row-subsets of a Matrix or Matrix-like Object — split_scale","text":"x DenseNeuroVec object f Factor grouping center Logical indicating whether center scale Logical indicating whether scale","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/split_scale-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Center and/or Scale Row-subsets of a Matrix or Matrix-like Object — split_scale","text":"new matrix matrix-like object original rows grouped 'f' centered /scaled grouping. Matrix scaled values Matrix scaled values Scaled DenseNeuroVec object Scaled DenseNeuroVec object Scaled DenseNeuroVec object","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/split_scale-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Center and/or Scale Row-subsets of a Matrix or Matrix-like Object — split_scale","text":"","code":"M <- matrix(rnorm(1000), 10, 100) fac <- factor(rep(1:2, each=5)) Ms <- split_scale(M, fac)  ## Correctly centered all(abs(apply(Ms[fac == 1,], 2, mean)) < .000001) #> [1] TRUE all(abs(apply(Ms[fac == 2,], 2, mean)) < .000001) #> [1] TRUE  ## Correctly scaled all.equal(apply(Ms[fac == 1,], 2, sd), rep(1, ncol(Ms))) #> [1] TRUE all.equal(apply(Ms[fac == 2,], 2, sd), rep(1, ncol(Ms))) #> [1] TRUE"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/square_roi.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a square region of interest — square_roi","title":"Create a square region of interest — square_roi","text":"function creates square region interest (ROI) 3D volume, z-dimension fixed one voxel coordinate. ROI defined within given NeuroVol NeuroSpace instance.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/square_roi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a square region of interest — square_roi","text":"","code":"square_roi(bvol, centroid, surround, fill = NULL, nonzero = FALSE, fixdim = 3)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/square_roi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a square region of interest — square_roi","text":"bvol NeuroVol NeuroSpace instance representing 3D volume space. centroid numeric vector length 3, representing center square ROI voxel coordinates. surround non-negative integer specifying number voxels either side central voxel. fill optional value values assign data slot resulting ROI. provided, data assigned. nonzero logical value indicating whether keep nonzero elements bvol. bvol NeuroSpace instance, argument ignored. fixdim logical value indicating whether fixed dimension third, z, dimension. Default TRUE.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/square_roi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a square region of interest — square_roi","text":"instance class ROIVol representing square ROI.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/square_roi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a square region of interest — square_roi","text":"","code":"sp1 <- NeuroSpace(c(10, 10, 10), c(1, 1, 1)) square <- square_roi(sp1, c(5, 5, 5), 1) vox <- coords(square) ## a 3 X 3 X 1 grid nrow(vox) == 9 #> [1] TRUE"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/strip_extension-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic function to strip extension from file name, given a FileFormat instance. — strip_extension","title":"Generic function to strip extension from file name, given a FileFormat instance. — strip_extension","text":"Removes file extension given file name based FileFormat specifications.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/strip_extension-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic function to strip extension from file name, given a FileFormat instance. — strip_extension","text":"","code":"strip_extension(x, file_name)  # S4 method for class 'FileFormat,character' strip_extension(x, file_name)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/strip_extension-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic function to strip extension from file name, given a FileFormat instance. — strip_extension","text":"x FileFormat object specifying format requirements file_name character string specifying file name strip extension ","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/strip_extension-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic function to strip extension from file name, given a FileFormat instance. — strip_extension","text":"file_name without extension character string representing file name without extension","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/strip_extension-methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generic function to strip extension from file name, given a FileFormat instance. — strip_extension","text":"function performs following steps: file_name matches header file format, removes header     extension. file_name matches data file format, removes data     extension. file_name match either format, throws error.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/strip_extension-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic function to strip extension from file name, given a FileFormat instance. — strip_extension","text":"","code":"if (FALSE) { # \\dontrun{ fmt <- new(\"FileFormat\", header_extension = \"hdr\", data_extension = \"img\") strip_extension(fmt, \"brain_scan.hdr\")  # Returns \"brain_scan\" strip_extension(fmt, \"brain_scan.img\")  # Returns \"brain_scan\" } # }"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/sub-AbstractSparseNeuroVec-numeric-numeric-ANY-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Extractor Method for AbstractSparseNeuroVec — [,AbstractSparseNeuroVec,numeric,numeric,ANY-method","title":"Extractor Method for AbstractSparseNeuroVec — [,AbstractSparseNeuroVec,numeric,numeric,ANY-method","text":"Extracts subset data sparse four-dimensional brain image based provided indices.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/sub-AbstractSparseNeuroVec-numeric-numeric-ANY-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extractor Method for AbstractSparseNeuroVec — [,AbstractSparseNeuroVec,numeric,numeric,ANY-method","text":"","code":"# S4 method for class 'AbstractSparseNeuroVec,numeric,numeric,ANY' x[i, j, k, m, ..., drop = TRUE]"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/sub-AbstractSparseNeuroVec-numeric-numeric-ANY-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extractor Method for AbstractSparseNeuroVec — [,AbstractSparseNeuroVec,numeric,numeric,ANY-method","text":"x object class AbstractSparseNeuroVec Numeric vector specifying indices first dimension j Numeric vector specifying indices second dimension k Numeric vector specifying indices third dimension (optional) m Numeric vector specifying indices fourth dimension (optional) ... Additional arguments passed methods drop Logical indicating whether drop dimensions length one (default: TRUE)","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/sub-AbstractSparseNeuroVec-numeric-numeric-ANY-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extractor Method for AbstractSparseNeuroVec — [,AbstractSparseNeuroVec,numeric,numeric,ANY-method","text":"array containing extracted subset","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/sub-AbstractSparseNeuroVec-numeric-numeric-ANY-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extractor Method for AbstractSparseNeuroVec — [,AbstractSparseNeuroVec,numeric,numeric,ANY-method","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming 'sparse_vec' is a valid SparseNeuroVec object subset <- sparse_vec[1:10, 1:10, 1:5, 1:100] } # }"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/sub-sub-NeuroVec-numeric-method.html","id":null,"dir":"Reference","previous_headings":"","what":"[[ — [[,NeuroVec,numeric-method","title":"[[ — [[,NeuroVec,numeric-method","text":"function extracts single volume NeuroVec object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/sub-sub-NeuroVec-numeric-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[[ — [[,NeuroVec,numeric-method","text":"","code":"# S4 method for class 'NeuroVec,numeric' x[[i]]"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/sub-sub-NeuroVec-numeric-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[[ — [[,NeuroVec,numeric-method","text":"x NeuroVec object. volume index extract.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/sub-sub-NeuroVec-numeric-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"[[ — [[,NeuroVec,numeric-method","text":"DenseNeuroVol object representing extracted volume.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/sub_vector-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic function to extract a sub-vector from a NeuroVec object. — sub_vector","title":"Generic function to extract a sub-vector from a NeuroVec object. — sub_vector","text":"Extracts subset volumes file-backed neuroimaging vector returns dense (-memory) vector. Extracts subsequence volumes NeuroVecSeq object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/sub_vector-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic function to extract a sub-vector from a NeuroVec object. — sub_vector","text":"","code":"sub_vector(x, i, ...)  # S4 method for class 'FileBackedNeuroVec,numeric' sub_vector(x, i)  # S4 method for class 'NeuroVec,numeric' sub_vector(x, i)  # S4 method for class 'NeuroVecSeq,numeric' sub_vector(x, i)  # S4 method for class 'NeuroVecSeq,numeric' sub_vector(x, i)  # S4 method for class 'SparseNeuroVec,numeric' sub_vector(x, i)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/sub_vector-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic function to extract a sub-vector from a NeuroVec object. — sub_vector","text":"x NeuroVecSeq object Numeric vector indices specifying time points extract ... additional arguments","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/sub_vector-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic function to extract a sub-vector from a NeuroVec object. — sub_vector","text":" NeuroVec object sub-sequence supplied object. DenseNeuroVec object containing extracted volumes. NeuroVecSeq object containing extracted subsequence","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/sub_vector-methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generic function to extract a sub-vector from a NeuroVec object. — sub_vector","text":"method efficiently reads requested volumes disk, converting -memory representation. spatial metadata preserved adjusted reflect new number volumes. Memory usage proportional number volumes requested, size full dataset.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/sub_vector-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic function to extract a sub-vector from a NeuroVec object. — sub_vector","text":"","code":"bvec <- NeuroVec(array(rnorm(24*24*24*24), c(24,24,24,24)), NeuroSpace(c(24,24,24,24), c(1,1,1))) vec <- sub_vector(bvec,1:2) all.equal(2, dim(vec)[4]) #> [1] TRUE  vec <- sub_vector(bvec, c(1,3,5,7)) all.equal(4, dim(vec)[4]) #> [1] TRUE  mask <- LogicalNeuroVol(rep(TRUE, 24*24*24), NeuroSpace(c(24,24,24), c(1,1,1))) svec <- SparseNeuroVec(array(rnorm(24*24*24*24), c(24,24,24,24)), NeuroSpace(c(24,24,24,24), c(1,1,1)), mask) vec <- sub_vector(svec, c(1,3,5)) all.equal(3, dim(vec)[4]) #> [1] TRUE if (FALSE) { # \\dontrun{ fbvec <- FileBackedNeuroVec(\"fmri_data.nii\")  # Extract first 10 volumes subset <- sub_vector(fbvec, 1:10)  # Extract specific timepoints volumes <- sub_vector(fbvec, c(1, 5, 10)) } # }"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/trans-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract image coordinate transformation — trans","title":"Extract image coordinate transformation — trans","text":"Extract image coordinate transformation Get transformation matrix","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/trans-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract image coordinate transformation — trans","text":"","code":"trans(x)  # S4 method for class 'MetaInfo' trans(x)  # S4 method for class 'NeuroObj' trans(x)  # S4 method for class 'NeuroSpace' trans(x)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/trans-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract image coordinate transformation — trans","text":"x object transformation","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/trans-methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract image coordinate transformation — trans","text":"function returns transformation can used go \"grid coordinates\" \"real world coordinates\" millimeters. function returns transformation can used go \"grid coordinates\" \"real world coordinates\" millimeters. see NeuroSpace","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/trans-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract image coordinate transformation — trans","text":"","code":"bspace <- NeuroSpace(c(10,10,10), c(2,2,2)) trans(bspace) #>      [,1] [,2] [,3] [,4] #> [1,]    2    0    0    0 #> [2,]    0    2    0    0 #> [3,]    0    0    2    0 #> [4,]    0    0    0    1 all.equal(dim(trans(bspace)), c(4,4)) #> [1] TRUE"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/values-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Data Values of an Object — values","title":"Extract Data Values of an Object — values","text":"Extract Data Values Object","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/values-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Data Values of an Object — values","text":"","code":"values(x, ...)  # S4 method for class 'ROIVol' values(x, ...)  # S4 method for class 'ROIVec' values(x, ...)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/values-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Data Values of an Object — values","text":"x object get values ... additional arguments","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/vectors-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract an ordered list of 1D vectors. — vectors","title":"Extract an ordered list of 1D vectors. — vectors","text":"function extracts ordered list 1D vectors object supplies vector data. subset argument specifies subset vectors extract, can vector indices logical vector. return value list containing extracted vectors order specified indices.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/vectors-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract an ordered list of 1D vectors. — vectors","text":"","code":"vectors(x, subset, ...)  # S4 method for class 'NeuroVec,missing' vectors(x)  # S4 method for class 'DenseNeuroVec,missing' vectors(x)  # S4 method for class 'NeuroVec,numeric' vectors(x, subset)  # S4 method for class 'NeuroVec,logical' vectors(x, subset)  # S4 method for class 'NeuroVecSeq,missing' vectors(x)  # S4 method for class 'NeuroVecSeq,numeric' vectors(x, subset)  # S4 method for class 'NeuroVecSeq,logical' vectors(x, subset)  # S4 method for class 'ROIVec,missing' vectors(x)  # S4 method for class 'matrix,missing' vectors(x)  # S4 method for class 'ROIVec,integer' vectors(x, subset)  # S4 method for class 'matrix,integer' vectors(x, subset)  # S4 method for class 'matrix,numeric' vectors(x, subset)  # S4 method for class 'ROIVec,numeric' vectors(x, subset)  # S4 method for class 'ROIVec,logical' vectors(x, subset)  # S4 method for class 'SparseNeuroVec,missing' vectors(x, nonzero = FALSE)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/vectors-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract an ordered list of 1D vectors. — vectors","text":"x object supplies vector data. subset subset vectors extract. ... additional arguments passed methods. nonzero include nonzero vectors output list","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/vectors-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract an ordered list of 1D vectors. — vectors","text":"","code":"file_name <- system.file(\"extdata\", \"global_mask_v4.nii\", package=\"neuroim2\") vec <- read_vec(file_name) v <- vectors(vec) mean(v[[1]]) #> [1] 0"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/vols-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract an ordered series of 3D volumes. — vols","title":"Extract an ordered series of 3D volumes. — vols","text":"function extracts ordered series 3D volumes object supplies volume data. indices argument specifies subset volumes extract, can vector indices logical vector. return value list containing extracted volumes order specified indices.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/vols-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract an ordered series of 3D volumes. — vols","text":"","code":"vols(x, indices, ...)  # S4 method for class 'NeuroVec,numeric' vols(x, indices)  # S4 method for class 'NeuroVec,missing' vols(x)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/vols-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract an ordered series of 3D volumes. — vols","text":"x object supplies volume data. indices subset volumes extract. ... additional arguments passed methods.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/vols-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract an ordered series of 3D volumes. — vols","text":"","code":"vec <- read_vec(system.file(\"extdata\", \"global_mask_v4.nii\", package=\"neuroim2\")) vs <- vols(vec) length(vs) == dim(vec)[4] #> [1] TRUE  vs <- vols(vec, indices=1:3) length(vs) == 3 #> [1] TRUE"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/voxels-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"extract voxel coordinates — voxels","title":"extract voxel coordinates — voxels","text":"extract voxel coordinates","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/voxels-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"extract voxel coordinates — voxels","text":"","code":"voxels(x, ...)  # S4 method for class 'Kernel' voxels(x, center_voxel = NULL)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/voxels-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"extract voxel coordinates — voxels","text":"x object extract voxels ... additional arguments function center_voxel absolute location center voxel, default (0,0,0)","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/which_dim-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Find Dimensions of a Given Axis — which_dim","title":"Find Dimensions of a Given Axis — which_dim","text":"function returns dimension specified axis given object, matrix array.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/which_dim-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find Dimensions of a Given Axis — which_dim","text":"","code":"which_dim(x, axis)  # S4 method for class 'NeuroSpace,NamedAxis' which_dim(x, axis)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/which_dim-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find Dimensions of a Given Axis — which_dim","text":"x object representing input data, matrix array. axis integer representing axis dimension requested. example, 1 rows, 2 columns, 3 depth 3D array.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/which_dim-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find Dimensions of a Given Axis — which_dim","text":"integer representing dimension specified axis given object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/which_dim-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find Dimensions of a Given Axis — which_dim","text":"","code":"x <- NeuroSpace(c(10,10,10), spacing=c(1,1,1)) which_dim(x, x@axes@j) == 2 #> [1] TRUE"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/write_elements-BinaryWriter-numeric-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Write Elements to Binary Writer — write_elements,BinaryWriter,numeric-method","title":"Write Elements to Binary Writer — write_elements,BinaryWriter,numeric-method","text":"Write elements BinaryWriter object.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/write_elements-BinaryWriter-numeric-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write Elements to Binary Writer — write_elements,BinaryWriter,numeric-method","text":"","code":"# S4 method for class 'BinaryWriter,numeric' write_elements(x, els)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/write_elements-BinaryWriter-numeric-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write Elements to Binary Writer — write_elements,BinaryWriter,numeric-method","text":"x Object class BinaryWriter els Numeric vector elements write","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/write_elements-BinaryWriter-numeric-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write Elements to Binary Writer — write_elements,BinaryWriter,numeric-method","text":"None (called side effect)","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/write_elements-BinaryWriter-numeric-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write Elements to Binary Writer — write_elements,BinaryWriter,numeric-method","text":"","code":"if (FALSE) { # \\dontrun{ writer <- BinaryWriter(\"output.bin\", byte_offset = 0L,                       data_type = \"double\", bytes_per_element = 8L) # Write some data write_elements(writer, rnorm(100)) close(writer) } # }"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/write_elements-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a sequence of elements from an input source — write_elements","title":"Write a sequence of elements from an input source — write_elements","text":"Write sequence elements input source","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/write_elements-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a sequence of elements from an input source — write_elements","text":"","code":"write_elements(x, els)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/write_elements-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write a sequence of elements from an input source — write_elements","text":"x output channel els elements write","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/write_vec-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a 4d image vector to disk — write_vec","title":"Write a 4d image vector to disk — write_vec","text":"Write 4d image vector disk","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/write_vec-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a 4d image vector to disk — write_vec","text":"","code":"write_vec(x, file_name, format, data_type, ...)  # S4 method for class 'ROIVec,character,missing,missing' write_vec(x, file_name)  # S4 method for class 'NeuroVec,character,missing,missing' write_vec(x, file_name)  # S4 method for class 'NeuroVec,character,character,missing' write_vec(   x,   file_name,   format,   nbit = FALSE,   compression = 5,   chunk_dim = c(10, 10, 10, dim(x)[4]) )  # S4 method for class 'NeuroVec,character,missing,character' write_vec(x, file_name, data_type)  # S4 method for class 'ROIVec,character,missing,missing' write_vec(x, file_name)  # S4 method for class 'NeuroVec,character,missing,missing' write_vec(x, file_name)  # S4 method for class 'NeuroVec,character,character,missing' write_vec(   x,   file_name,   format,   nbit = FALSE,   compression = 5,   chunk_dim = c(10, 10, 10, dim(x)[4]) )  # S4 method for class 'NeuroVec,character,missing,character' write_vec(x, file_name, data_type)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/write_vec-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write a 4d image vector to disk — write_vec","text":"x image object, typically NeuroVec instance. file_name output file name. format file format string. Since \"NIFTI\" currently supported format, parameter can safely ignored omitted. data_type numeric data type. specified character vector : \"BINARY\", \"UBYTE\", \"SHORT\", \"INT\", \"FLOAT\", \"DOUBLE\". Otherwise output format inferred R datatype image. ... extra args nbit set nbit compression compression compression level 1 9 chunk_dim dimensions chunk","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/write_vec-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write a 4d image vector to disk — write_vec","text":"","code":"bvec <- NeuroVec(array(0, c(10,10,10,10)), NeuroSpace(c(10,10,10,10), c(1,1,1))) if (FALSE) { # \\dontrun{ write_vec(bvol, \"out.nii\") write_vec(bvol, \"out.nii.gz\") write_vec(bvec, \"out.nii\") write_vec(bvec, \"out.nii.gz\") } # }"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/write_vol-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a 3d image volume to disk — write_vol","title":"Write a 3d image volume to disk — write_vol","text":"Write 3d image volume disk","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/write_vol-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a 3d image volume to disk — write_vol","text":"","code":"write_vol(x, file_name, format, data_type)  # S4 method for class 'NeuroVol,character,missing,missing' write_vol(x, file_name)  # S4 method for class 'ClusteredNeuroVol,character,missing,missing' write_vol(x, file_name)  # S4 method for class 'NeuroVol,character,character,missing' write_vol(x, file_name, format)  # S4 method for class 'ROIVol,character,character,missing' write_vol(x, file_name, format)  # S4 method for class 'NeuroVol,character,missing,character' write_vol(x, file_name, data_type)"},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/write_vol-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write a 3d image volume to disk — write_vol","text":"x image object, typically NeuroVol instance. file_name output file name format file format string. Since \"NIFTI\" currently supported format, parameter can safely ignored omitted. data_type output data type, specified character vector : \"BINARY\", \"UBYTE\", \"SHORT\", \"INT\", \"FLOAT\", \"DOUBLE\". Otherwise output format inferred R datatype image.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/write_vol-methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Write a 3d image volume to disk — write_vol","text":"output format inferred file extension. output format inferred file extension.  write_vol(x, \".nii\") outputs NIFTI file.  write_vol(x, \".nii.gz\") outputs gzipped NIFTI file. file output formats currently supported.","code":""},{"path":"https://bbuchsbaum.github.io/neuroim2/reference/write_vol-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write a 3d image volume to disk — write_vol","text":"","code":"bvol <- NeuroVol(array(0, c(10,10,10)), NeuroSpace(c(10,10,10), c(1,1,1))) if (FALSE) { # \\dontrun{ write_vol(bvol, \"out.nii\") write_vol(bvol, \"out.nii.gz\") } # }"},{"path":"https://bbuchsbaum.github.io/neuroim2/news/index.html","id":"neuroim2-081","dir":"Changelog","previous_headings":"","what":"neuroim2 0.8.1","title":"neuroim2 0.8.1","text":"Initial CRAN submission.","code":""}]
